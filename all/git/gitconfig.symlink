# vim: set filetype=ini
[credential]
  helper = osxkeychain

[core]
  editor = nvim         # Change to 'atom --wait' if feeling bold.
  trustctime = false    # Make `git rebase` safer on OS X - http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
  excludesfile = ~/.gitignore  # Exclude everything in this file. Used for general exclusions.
  attributesfile = ~/.gitattributes  # Set attributes on files. Used for general diff improvements.
  # Use the diff-highlighter, if it's available.
  pager = "[ -f /usr/local/share/git-core/contrib/diff-highlight/diff-highlight ] &&  /usr/local/share/git-core/contrib/diff-highlight/diff-highlight | less -rFX || less -rFX"
  # Use delta if it's available
  # pager = "[ -f /usr/local/bin/delta ] && /usr/local/bin/delta --plus-color="#012800" --minus-color="#340001" --theme='Monokai Extended' || less -rFX"
  # Don't prompt for commit messages for merge commits.
  mergeoptions = --no-edit

[user]
  # Never use the system info if the user info isn't set; error instead.
	useConfigOnly = true
	name = Colin Seymour
	email = colin@symr.io
  signingkey = 88109C73073E7080

# Override default when working in work repos
[includeIf "gitdir:~/github/"]
  path = ~/.dotfiles/all/git/gitconfig-github

[github]
  user = lildude

[color]
  ui = always   # Cos everyone loves colours

# Supported colors: normal, black, red, green, yellow, blue, magenta, cyan, or white
# Supported effects: bold, dim, ul (underline), blink, and reverse (swap foreground and background)
[color "branch"]
  #current = green # Default: green
  #local = yellow
  remote = blue

[color "diff"]
  commit = green
  meta = yellow # Default: unset
  frag = magenta bold # Default: unset - Appears as purple on my current customised Solarized iTerm2 theme.
  old = red # Default: red
  new = green # Default: green
  whitespace = red reverse # Default: unset - Protects me from committin ws changes

[color "status"]
  added = green # Default: green
  changed = red # Default: red
  untracked = magenta bold  # Default: red - Appears as purple on my current customised Solarized iTerm2 theme.

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[help]
  autocorrect = 1   # Autocorrect mistyped commands.

[alias]
  branch-name = "!git rev-parse --abbrev-ref HEAD"  # Get branch. Used by other aliases.
  st = "status --short --branch --no-ahead-behind"
  sw = switch
  rem = remote -v
  co = switch
  pu = push -u
  cp = cherry-pick
  cherry = cherry-pick
  #lg = log --graph --pretty=oneline --abbrev-commit --decorate
  lg = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit
  cob = switch -c
  b = branch --sort=-committerdate --sort=-committerdate --format='%(HEAD)%(if)%(HEAD)%(then)%(color:green)%(end) %(refname:short) %(color:reset) (%(color:blue)%(committerdate:relative)%(color:reset))'
  # Get default branch - run `git remote set-head origin -a` if still returns master after a rename on github
  db = !git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@'
  # OSX's xargs doesn't need `-r` to prevent exec if no input but GNU xargs does. We install GNU xargs from `findutils` with homebrew to cover both and use `-r`.
  # Remove all local branches that were tracking remote branches that have been deleted.
  up = !git switch $(git db) && git pull --rebase --prune && git branch -vv --color=never | grep --color=never ': gone]' | awk '{print $1}' | $(command -v gxargs xargs | grep -v 'not found' | head -1) -r git branch -D
  com = !git switch $(git db)
  # Create a pull request on GitHub using the `hub` command.
  pr = !hub pull-request -o
  # Grab someone else's PR changes without using hub
  # Source: https://davidwalsh.name/pull-down-pr
  prco = !f() { git fetch -fu ${2:-upstream} refs/pull/$1/head:pr/$1 && git switch pr/$1; }; f
  pr-clean = !git switch $(git db) ; git for-each-ref refs/heads/pr/* --format="%(refname)" | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done
  tagcommit = rev-list -n 1
  br = !git switch $(git branch --no-color | cut -c 3- | awk '{print $1}' | fzf +m --preview 'git show --color=always {}')
  cof = !git switch $(git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads | fzf)
  # Usage: git change-commits GIT_AUTHOR_NAME "old name" "new name"
  # Usage: git change-commits GIT_AUTHOR_EMAIL "old@email.com" "new@email.com" HEAD~10..HEAD
  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "

[gist]
  browse = true  # Open GitHub Gist in browser after submission.

[fetch]
  prune = 1  # Always prune when fetching (and pulling).

[push]
  default = current # Default: simple

[filter "media"]
  required = true
  clean = git media clean %f
  smudge = git media smudge %f

[diff]
  renames = copies  # Detect copies as well as renames
	noprefix = true   # Don't show the a/ and b/ at the beginning of file paths in diffs

[http]
  sslVerify = true

[filter "lfs"]
  required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process

[archive]
  restrictRemote = false

[commit]
  gpgSign = true

#[branch]
#  autosetupmerge = always

[gpg]
  program = gpg

[merge]
	conflictstyle = diff3

[pager]
  diff = diff-so-fancy | less --tabs=1,5 -RFX
  show = diff-so-fancy | less --tabs=1,5 -RFX

[protocol]
	version = 2

[feature]
	manyFiles = true

[init]
	defaultBranch = main

[pull]
	rebase = false

[advice]
  detachedHead = false
