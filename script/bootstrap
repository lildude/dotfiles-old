#!/usr/bin/env bash
#
set -euo pipefail
DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)
# shellcheck source=script/lib.sh
source "$DIR/script/lib.sh"

#### Lets GO!! ####
info "👢 Bootstrapping to ${HOME}…"

# Ask for the administrator password upfront
if [ $MACOS ] && [ -z "${CI:-}" ]; then
  sudo -v
  # Keep-alive: update existing `sudo` time stamp until this script has finished
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
fi

info "🏡 Arranging the furniture…"
cd "$HOME" || exit 1

for dir in bin Downloads Development; do
  mkdir -p "$HOME/$dir"
done
ln -Ff -s Downloads tmp
ln -Ff -s Development dev
mkdir -p "$HOME/tmp/trash"

export PATH=$HOME/bin:$PATH

# Don't install Homebrew on minimal installations
if [ -z "${MIN:-}" ]; then
  [ -f "$BREWFILE" ] && ln -Ff -s "$BREWFILE" .Brewfile
fi

# Only install Homebrew if we've got a populated $HOME/.Brewfile
if ! command -v brew &> /dev/null && [ -s "$HOME/.Brewfile" ]; then
  info '🍺 Installing Homebrew…'
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" > "$HOME/tmp/homebrew.log" 2>&1

  if [ "$LINUX" ]; then
    if [ -f "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
      # If I have sudo access on the host, Homebrew will be here
      # shellcheck disable=SC2046
      eval $(SHELL=bash /home/linuxbrew/.linuxbrew/bin/brew shellenv)
    else
      # Else it'll be in my homedir
      # shellcheck disable=SC2046
      eval $(SHELL=bash "$HOME/.linuxbrew/bin/brew shellenv")
    fi
  fi
fi

if [ -s "$HOME/.Brewfile" ]; then
  info '📦 Checking if we need to install packages…'
  if ! brew bundle check --global > /dev/null 2>&1; then
    # shellcheck disable=SC2016
    info '📦 Install missing packages…'
    brew bundle install --global
  fi
fi

# Link all linkable files
info "🔗 Linking files…"
while IFS= read -r -d '' src; do
  # Skip over OS-specific links that aren't this OS
  if [[ $src =~ $DIR/(linux|macos)/ ]] && [[ ! $src =~ $DIR/$OS/ ]]; then
    continue
  fi
  # Skip over ssh if min
  if [ "$MIN" ] && [[ $src =~ $DIR/all/ssh ]]; then
    continue
  fi

  dst="$HOME/.$(basename "${src%.*}")"
  display_dst="${dst/$HOME/\~}"
  display_src="${src/$DIR/.dotfiles}"
  if [ ! -L "$dst" ]; then
    info "   … $(printf "%-40s → %s" "$display_src" "$display_dst")"
    if [ -e "$dst" ]; then
      mv "$dst" "$dst.bak"
    fi
    ln -Ffs "$src" "$dst"
  fi
done <  <(find -H "$DIR" -maxdepth 3 -name '*.symlink' -not -path '*.git*' -print0)

# Link everything in all/bin to $HOME/bin
while IFS= read -r -d '' src; do
  dst="$HOME/bin/$(basename "${src}")"
  display_dst="${dst/$HOME/\~}"
  display_src="${src/$DIR/.dotfiles}"
  if [ ! -L "$dst" ]; then
    info "   … $(printf "%-40s → %s" "$display_src" "$display_dst")"
    if [ -e "$dst" ]; then
      mv "$dst" "$dst.bak"
    fi
    ln -Ffs "$src" "$dst"
  fi
done <  <(find -H "$DIR/all/bin" -type f -print0)

# Run all install.sh scripts
while IFS= read -r -d '' installer; do
  # Skip over OS-specific links that aren't this OS
  if [[ $installer =~ $DIR/(linux|macos)/ ]] && [[ ! $installer =~ $DIR/$OS/ ]]; then
    continue
  fi
  info "👟 ${installer/$DIR/.dotfiles}…"
  $installer
done < <(find "$DIR" -maxdepth 3 -name install.sh -print0)

info "🛠  Tweaking .gitconfig for ${OS}…"
local_cfg="$HOME/.gitconfig.local"
rm -f "$local_cfg"

# Always use SSH
git config --file "$local_cfg" url."git@github.com:".insteadof "https://github.com/"

# Set path to gpg
git config --file "$local_cfg" gpg.program "$(command -v gpg2 || command -v gpg)"

# Use git-delta is available
if command -v delta > /dev/null; then
  git config --file "$local_cfg" core.pager "delta --diff-so-fancy"
  git config --file "$local_cfg" interactive.diffFilter "delta --color-only"
fi

if [ "$MACOS" ]; then
  git config --file "$local_cfg" core.trustctime false # Make `git rebase` safer on OS X - http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
  git config --file "$local_cfg" credential.helper osxkeychain
fi

if [ "$LINUX" ]; then
  # Don't communicate with GitHub over SSH on Codespaces
  if [ "${CODESPACES:-}" = "true" ]; then
    git config --file "$local_cfg" --unset-all url."git@github.com:".insteadof
    git config --file "$local_cfg" url."https://github.com/".insteadOf "git@github.com:"
  fi
fi

# gpg-agent doesn't play nice with ~ or $HOME in gpg-agent.conf so we need to test it manually
# Debug: echo "test" | gpg --clearsign
# Reload: gpg-connect-agent reloadagent /bye
echo "pinentry-program $HOME/bin/pinentry-auto" >> "$HOME/.gnupg/gpg-agent.conf"

# This needs to be separate as it requires interaction
"$DIR/script/extract-onepassword-secrets"

printf "\\n${green}%s${reset}\\n\\n" '🏁 All done!!'