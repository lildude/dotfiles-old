#!/usr/bin/env bash
#
# Extract my secrets from the Dotfile vault on 1Password
#
# Files can be updated using: `op edit document --vault Dotfiles <doc_uuid> <filename>` and then add a path property for the file.
#
set -euo pipefail

DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)
# shellcheck source=script/lib.sh
source "$DIR/script/lib.sh"

# Exit early on minimal installs or CI
[ -n "${MIN:-}" ] || [ -n "${CI:-}" ] && exit 0

info 'ðŸ”‘ Getting all the secretsâ€¦'

# We can't install 1password-cli with Homebrew on Linux
if [ "${LINUX:-}" ] && [ ! -f "$HOME/bin/op" ]; then
  filename="op_linux_amd64_v1.1.0.zip"
  curl -sLO "https://cache.agilebits.com/dist/1P/op/pkg/v1.1.0/$filename"
  cd "$HOME/bin"
  unzip "$HOME/$filename" > /dev/null
  # Verify download
  gpg --keyserver hkps://keyserver.ubuntu.com --receive-keys 3FEF9748469ADBE15DA7CA80AC2D62742012EA22 &> /dev/null
  gpg --verify op.sig op &> /dev/null || fail "Problem verifying op binary"
  rm op.sig
  cd "$HOME"
  rm "$HOME/$filename"
fi

if ! [ -L "$HOME/.gnupg" ] || ! [ -L "$HOME/.ssh" ]; then
  fail "Run script/bootstrap first!"
fi

if ! command -v op &> /dev/null; then
  fail "1password-cli not installed!"
fi

# Log in to 1password if not already
# shellcheck disable=SC2154
if [ -z "${OP_SESSION_my:-}" ]; then
  eval "$(op signin my.1password.com colin@symr.io)"
fi

# Everything in the Dotfiles vault should be downloaded to the file in the path field
# templateUuid == 006 means pull only documents
item_uuids=$(op list items --vault Dotfiles | jq -r '.[] | select(.templateUuid=="006") | .uuid')

for item_id in $item_uuids; do
  # shellcheck disable=SC2046
  read -r filename path <<< $(op get item "$item_id" --vault Dotfiles | jq -r '[.details.documentAttributes.fileName, .details.sections[1].fields[].v]|join(" ")' | sed -e "s|\$HOME|$HOME|g")
  # Ensure the saved path ends in the filename, if not error
  info "   Extracting $filename â†’ $path"
  [ "$(basename "$path")" != "$filename" ] && fail "Whoops, $path doesn't end with the saved filename $filename"
  # Move on if the file already exits
  [ -s "$path" ] && continue
  # Make the holding dir, just in case
  mkdir -p "$(dirname "$path")"
  # Download document
  if op get document "$item_id" --vault Dotfiles > "$path"; then
    chmod 600 "$path"
  else
    fail "Failed to restore $path"
  fi
done

if ! command -v gpg >/dev/null; then
    fail "Install GPG first!"
fi

# https://gist.github.com/troyfontaine/18c9146295168ee9ca2b30c00bd1b41e
info "   Setting up GPG"
gpg --import ~/.gnupg/colin@symr.io.asc 2>&1

info "   Storing SSH keys in keychain/agent"
[ "$LINUX" ] && eval "$(ssh-agent -s)"
[ "$MACOS" ] && opts="-K"
# shellcheck disable=SC2046
DISPLAY=1 SSH_ASKPASS="$DIR/script/1pass-askpass" ssh-add ${opts:-} $(find "$HOME/.ssh/" -name "*.pub" | sed 's/.pub//g') < /dev/null

