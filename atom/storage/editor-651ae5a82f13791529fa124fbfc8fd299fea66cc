{"mode":"editor","version":1,"windowDimensions":{"x":253,"y":23,"width":1137,"height":873,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/lildude/Development/php-github-api"],"buffers":[{"text":"<?php\n\nnamespace Github\\Tests;\n\nuse Github\\Client;\nuse Github\\Exception\\BadMethodCallException;\n\nclass ClientTest extends \\PHPUnit_Framework_TestCase\n{\n    /**\n     * @test\n     */\n    public function shouldNotHaveToPassHttpClientToConstructor()\n    {\n        $client = new Client();\n\n        $this->assertInstanceOf('Github\\HttpClient\\HttpClient', $client->getHttpClient());\n    }\n\n    /**\n     * @test\n     */\n    public function shouldPassHttpClientInterfaceToConstructor()\n    {\n        $client = new Client($this->getHttpClientMock());\n\n        $this->assertInstanceOf('Github\\HttpClient\\HttpClientInterface', $client->getHttpClient());\n    }\n\n    /**\n     * @test\n     * @dataProvider getAuthenticationFullData\n     */\n    public function shouldAuthenticateUsingAllGivenParameters($login, $password, $method)\n    {\n        $httpClient = $this->getHttpClientMock();\n        $httpClient->expects($this->once())\n            ->method('authenticate')\n            ->with($login, $password, $method);\n\n        $client = new Client($httpClient);\n        $client->authenticate($login, $password, $method);\n    }\n\n    public function getAuthenticationFullData()\n    {\n        return array(\n            array('login', 'password', Client::AUTH_HTTP_PASSWORD),\n            array('token', null, Client::AUTH_HTTP_TOKEN),\n            array('token', null, Client::AUTH_URL_TOKEN),\n            array('client_id', 'client_secret', Client::AUTH_URL_CLIENT_ID),\n        );\n    }\n\n    /**\n     * @test\n     * @dataProvider getAuthenticationPartialData\n     */\n    public function shouldAuthenticateUsingGivenParameters($token, $method)\n    {\n        $httpClient = $this->getHttpClientMock();\n        $httpClient->expects($this->once())\n            ->method('authenticate')\n            ->with($token, null, $method);\n\n        $client = new Client($httpClient);\n        $client->authenticate($token, $method);\n    }\n\n    public function getAuthenticationPartialData()\n    {\n        return array(\n            array('token', Client::AUTH_HTTP_TOKEN),\n            array('token', Client::AUTH_URL_TOKEN),\n        );\n    }\n\n    /**\n     * @test\n     * @expectedException \\Github\\Exception\\InvalidArgumentException\n     */\n    public function shouldThrowExceptionWhenAuthenticatingWithoutMethodSet()\n    {\n        $httpClient = $this->getHttpClientMock(array('addListener'));\n\n        $client = new Client($httpClient);\n        $client->authenticate('login', null, null);\n    }\n\n    /**\n     * @test\n     */\n    public function shouldClearHeadersLazy()\n    {\n        $httpClient = $this->getHttpClientMock(array('clearHeaders'));\n        $httpClient->expects($this->once())->method('clearHeaders');\n\n        $client = new Client($httpClient);\n        $client->clearHeaders();\n    }\n\n    /**\n     * @test\n     */\n    public function shouldSetHeadersLaizly()\n    {\n        $headers = array('header1', 'header2');\n\n        $httpClient = $this->getHttpClientMock();\n        $httpClient->expects($this->once())->method('setHeaders')->with($headers);\n\n        $client = new Client($httpClient);\n        $client->setHeaders($headers);\n    }\n\n    /**\n     * @test\n     * @dataProvider getApiClassesProvider\n     */\n    public function shouldGetApiInstance($apiName, $class)\n    {\n        $client = new Client();\n\n        $this->assertInstanceOf($class, $client->api($apiName));\n    }\n\n    /**\n     * @test\n     * @dataProvider getApiClassesProvider\n     */\n    public function shouldGetMagicApiInstance($apiName, $class)\n    {\n        $client = new Client();\n\n        $this->assertInstanceOf($class, $client->$apiName());\n    }\n\n    /**\n     * @test\n     * @expectedException \\Github\\Exception\\InvalidArgumentException\n     */\n    public function shouldNotGetApiInstance()\n    {\n        $client = new Client();\n        $client->api('do_not_exist');\n    }\n\n    /**\n     * @test\n     * @expectedException BadMethodCallException\n     */\n    public function shouldNotGetMagicApiInstance()\n    {\n        $client = new Client();\n        $client->doNotExist();\n    }\n\n    public function getApiClassesProvider()\n    {\n        return array(\n            array('user', 'Github\\Api\\User'),\n            array('users', 'Github\\Api\\User'),\n\n            array('me', 'Github\\Api\\CurrentUser'),\n            array('current_user', 'Github\\Api\\CurrentUser'),\n            array('currentUser', 'Github\\Api\\CurrentUser'),\n\n            array('git', 'Github\\Api\\GitData'),\n            array('git_data', 'Github\\Api\\GitData'),\n            array('gitData', 'Github\\Api\\GitData'),\n\n            array('gist', 'Github\\Api\\Gists'),\n            array('gists', 'Github\\Api\\Gists'),\n\n            array('issue', 'Github\\Api\\Issue'),\n            array('issues', 'Github\\Api\\Issue'),\n\n            array('markdown', 'Github\\Api\\Markdown'),\n\n            array('organization', 'Github\\Api\\Organization'),\n            array('organizations', 'Github\\Api\\Organization'),\n\n            array('repo', 'Github\\Api\\Repo'),\n            array('repos', 'Github\\Api\\Repo'),\n            array('repository', 'Github\\Api\\Repo'),\n            array('repositories', 'Github\\Api\\Repo'),\n\n            array('search', 'Github\\Api\\Search'),\n\n            array('pr', 'Github\\Api\\PullRequest'),\n            array('pullRequest', 'Github\\Api\\PullRequest'),\n            array('pull_request', 'Github\\Api\\PullRequest'),\n            array('pullRequests', 'Github\\Api\\PullRequest'),\n            array('pull_requests', 'Github\\Api\\PullRequest'),\n\n            array('authorization', 'Github\\Api\\Authorizations'),\n            array('authorizations', 'Github\\Api\\Authorizations'),\n\n            array('meta', 'Github\\Api\\Meta')\n        );\n    }\n\n    public function getHttpClientMock(array $methods = array())\n    {\n        $methods = array_merge(\n            array('get', 'post', 'patch', 'put', 'delete', 'request', 'setOption', 'setHeaders', 'authenticate'),\n            $methods\n        );\n\n        return $this->getMock('Github\\HttpClient\\HttpClientInterface', $methods);\n    }\n}\n","markerStore":{"nextMarkerId":27,"markersById":{"0":{"range":{"start":{"row":196,"column":28},"end":{"row":196,"column":28}},"properties":{"type":"selection","editorId":8,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":8,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/lildude/Development/php-github-api/test/Github/Tests/ClientTest.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"004697d2bebc4b6ca7ff351687e4c09aa7682f32","deserializer":"TextBuffer","version":2},{"text":"<?php\n\nnamespace Github;\n\nuse Github\\Api\\ApiInterface;\nuse Github\\Exception\\InvalidArgumentException;\nuse Github\\Exception\\BadMethodCallException;\nuse Github\\HttpClient\\HttpClient;\nuse Github\\HttpClient\\HttpClientInterface;\n\n/**\n * Simple yet very cool PHP GitHub client.\n *\n * @method Api\\CurrentUser currentUser()\n * @method Api\\CurrentUser me()\n * @method Api\\Enterprise ent()\n * @method Api\\Enterprise enterprise()\n * @method Api\\GitData git()\n * @method Api\\GitData gitData()\n * @method Api\\Gists gist()\n * @method Api\\Gists gists()\n * @method Api\\Issue issue()\n * @method Api\\Issue issues()\n * @method Api\\Markdown markdown()\n * @method Api\\Notification notification()\n * @method Api\\Notification notifications()\n * @method Api\\Organization organization()\n * @method Api\\Organization organizations()\n * @method Api\\PullRequest pr()\n * @method Api\\PullRequest pullRequest()\n * @method Api\\PullRequest pullRequests()\n * @method Api\\Repo repo()\n * @method Api\\Repo repos()\n * @method Api\\Repo repository()\n * @method Api\\Repo repositories()\n * @method Api\\Search search()\n * @method Api\\Organization team()\n * @method Api\\Organization teams()\n * @method Api\\User user()\n * @method Api\\User users()\n * @method Api\\Authorizations authorization()\n * @method Api\\Authorizations authorizations()\n * @method Api\\Meta meta()\n *\n * @author Joseph Bielawski <stloyd@gmail.com>\n *\n * Website: http://github.com/KnpLabs/php-github-api\n */\nclass Client\n{\n    /**\n     * Constant for authentication method. Indicates the default, but deprecated\n     * login with username and token in URL.\n     */\n    const AUTH_URL_TOKEN = 'url_token';\n\n    /**\n     * Constant for authentication method. Not indicates the new login, but allows\n     * usage of unauthenticated rate limited requests for given client_id + client_secret.\n     */\n    const AUTH_URL_CLIENT_ID = 'url_client_id';\n\n    /**\n     * Constant for authentication method. Indicates the new favored login method\n     * with username and password via HTTP Authentication.\n     */\n    const AUTH_HTTP_PASSWORD = 'http_password';\n\n    /**\n     * Constant for authentication method. Indicates the new login method with\n     * with username and token via HTTP Authentication.\n     */\n    const AUTH_HTTP_TOKEN = 'http_token';\n\n    /**\n     * @var array\n     */\n    private $options = array(\n        'base_url'    => 'https://api.github.com/',\n\n        'user_agent'  => 'php-github-api (http://github.com/KnpLabs/php-github-api)',\n        'timeout'     => 10,\n\n        'api_limit'   => 5000,\n        'api_version' => 'v3',\n\n        'cache_dir'   => null\n    );\n\n    /**\n     * The Buzz instance used to communicate with GitHub.\n     *\n     * @var HttpClient\n     */\n    private $httpClient;\n\n    /**\n     * Instantiate a new GitHub client.\n     *\n     * @param null|HttpClientInterface $httpClient Github http client\n     */\n    public function __construct(HttpClientInterface $httpClient = null)\n    {\n        $this->httpClient = $httpClient;\n    }\n\n    /**\n     * @param string $name\n     *\n     * @throws InvalidArgumentException\n     *\n     * @return ApiInterface\n     */\n    public function api($name)\n    {\n        switch ($name) {\n            case 'me':\n            case 'current_user':\n            case 'currentUser':\n                $api = new Api\\CurrentUser($this);\n                break;\n\n            case 'deployment':\n            case 'deployments':\n                $api = new Api\\Deployment($this);\n                break;\n\n            case 'ent':\n            case 'enterprise':\n                $api = new Api\\Enterprise($this);\n                break;\n\n            case 'git':\n            case 'git_data':\n            case 'gitData':\n                $api = new Api\\GitData($this);\n                break;\n\n            case 'gist':\n            case 'gists':\n                $api = new Api\\Gists($this);\n                break;\n\n            case 'issue':\n            case 'issues':\n                $api = new Api\\Issue($this);\n                break;\n\n            case 'markdown':\n                $api = new Api\\Markdown($this);\n                break;\n\n            case 'notification':\n            case 'notifications':\n                $api = new Api\\Notification($this);\n                break;\n\n            case 'organization':\n            case 'organizations':\n                $api = new Api\\Organization($this);\n                break;\n\n            case 'pr':\n            case 'pullRequest':\n            case 'pull_request':\n            case 'pullRequests':\n            case 'pull_requests':\n                $api = new Api\\PullRequest($this);\n                break;\n\n            case 'repo':\n            case 'repos':\n            case 'repository':\n            case 'repositories':\n                $api = new Api\\Repo($this);\n                break;\n\n            case 'search':\n                $api = new Api\\Search($this);\n                break;\n\n            case 'team':\n            case 'teams':\n                $api = new Api\\Organization\\Teams($this);\n                break;\n\n            case 'user':\n            case 'users':\n                $api = new Api\\User($this);\n                break;\n\n            case 'authorization':\n            case 'authorizations':\n                $api = new Api\\Authorizations($this);\n                break;\n\n            case 'meta':\n                $api = new Api\\Meta($this);\n                break;\n\n            default:\n                throw new InvalidArgumentException(sprintf('Undefined api instance called: \"%s\"', $name));\n        }\n\n        return $api;\n    }\n\n    /**\n     * Authenticate a user for all next requests.\n     *\n     * @param string      $tokenOrLogin GitHub private token/username/client ID\n     * @param null|string $password     GitHub password/secret (optionally can contain $authMethod)\n     * @param null|string $authMethod   One of the AUTH_* class constants\n     *\n     * @throws InvalidArgumentException If no authentication method was given\n     */\n    public function authenticate($tokenOrLogin, $password = null, $authMethod = null)\n    {\n        if (null === $password && null === $authMethod) {\n            throw new InvalidArgumentException('You need to specify authentication method!');\n        }\n\n        if (null === $authMethod && in_array($password, array(self::AUTH_URL_TOKEN, self::AUTH_URL_CLIENT_ID, self::AUTH_HTTP_PASSWORD, self::AUTH_HTTP_TOKEN))) {\n            $authMethod = $password;\n            $password   = null;\n        }\n\n        if (null === $authMethod) {\n            $authMethod = self::AUTH_HTTP_PASSWORD;\n        }\n\n        $this->getHttpClient()->authenticate($tokenOrLogin, $password, $authMethod);\n    }\n\n    /**\n     * Sets the URL of your GitHub Enterprise instance.\n     *\n     * @param string $enterpriseUrl URL of the API in the form of http(s)://hostname\n     */\n    public function setEnterpriseUrl($enterpriseUrl)\n    {\n        $baseUrl = (substr($enterpriseUrl, -1) == '/') ? substr($enterpriseUrl, 0, -1) : $enterpriseUrl;\n        $this->getHttpClient()->client->setBaseUrl($baseUrl . '/api/v3');\n    }\n\n    /**\n     * @return HttpClient\n     */\n    public function getHttpClient()\n    {\n        if (null === $this->httpClient) {\n            $this->httpClient = new HttpClient($this->options);\n        }\n\n        return $this->httpClient;\n    }\n\n    /**\n     * @param HttpClientInterface $httpClient\n     */\n    public function setHttpClient(HttpClientInterface $httpClient)\n    {\n        $this->httpClient = $httpClient;\n    }\n\n    /**\n     * Clears used headers.\n     */\n    public function clearHeaders()\n    {\n        $this->getHttpClient()->clearHeaders();\n    }\n\n    /**\n     * @param array $headers\n     */\n    public function setHeaders(array $headers)\n    {\n        $this->getHttpClient()->setHeaders($headers);\n    }\n\n    /**\n     * @param string $name\n     *\n     * @throws InvalidArgumentException\n     *\n     * @return mixed\n     */\n    public function getOption($name)\n    {\n        if (!array_key_exists($name, $this->options)) {\n            throw new InvalidArgumentException(sprintf('Undefined option called: \"%s\"', $name));\n        }\n\n        return $this->options[$name];\n    }\n\n    /**\n     * @param string $name\n     * @param mixed  $value\n     *\n     * @throws InvalidArgumentException\n     * @throws InvalidArgumentException\n     */\n    public function setOption($name, $value)\n    {\n        if (!array_key_exists($name, $this->options)) {\n            throw new InvalidArgumentException(sprintf('Undefined option called: \"%s\"', $name));\n        }\n\n        $this->options[$name] = $value;\n    }\n\n    /**\n     * @param string $name\n     *\n     * @throws InvalidArgumentException\n     *\n     * @return ApiInterface\n     */\n    public function __call($name, $args)\n    {\n        try {\n            return $this->api($name);\n        } catch (InvalidArgumentException $e) {\n            throw new BadMethodCallException(sprintf('Undefined method called: \"%s\"', $name));\n        }\n    }\n}\n","markerStore":{"nextMarkerId":51,"markersById":{"0":{"range":{"start":{"row":327,"column":5},"end":{"row":327,"column":5}},"properties":{"type":"selection","editorId":12,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"49":{"range":{"start":{"row":327,"column":4},"end":{"row":327,"column":5}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":true},"50":{"range":{"start":{"row":321,"column":4},"end":{"row":321,"column":5}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":28,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/lildude/Development/php-github-api/lib/Github/Client.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b80ad622ca9f696e8da8c27dd40d45d3234359d1","deserializer":"TextBuffer","version":2},{"text":"<?php\n\nnamespace Github\\HttpClient;\n\nuse Github\\Exception\\TwoFactorAuthenticationRequiredException;\nuse Guzzle\\Http\\Client as GuzzleClient;\nuse Guzzle\\Http\\ClientInterface;\nuse Guzzle\\Http\\Message\\Request;\nuse Guzzle\\Http\\Message\\Response;\nuse Github\\Exception\\ErrorException;\nuse Github\\Exception\\RuntimeException;\nuse Github\\HttpClient\\Listener\\AuthListener;\nuse Github\\HttpClient\\Listener\\ErrorListener;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\n/**\n * Performs requests on GitHub API. API documentation should be self-explanatory.\n *\n * @author Joseph Bielawski <stloyd@gmail.com>\n */\nclass HttpClient implements HttpClientInterface\n{\n    protected $options = array(\n        'base_url'    => 'https://api.github.com/',\n\n        'user_agent'  => 'php-github-api (http://github.com/KnpLabs/php-github-api)',\n        'timeout'     => 10,\n\n        'api_limit'   => 5000,\n        'api_version' => 'v3',\n\n        'cache_dir'   => null\n    );\n\n    protected $headers = array();\n\n    private $lastResponse;\n    private $lastRequest;\n\n    /**\n     * @param array           $options\n     * @param ClientInterface $client\n     */\n    public function __construct(array $options = array(), ClientInterface $client = null)\n    {\n        $this->options = array_merge($this->options, $options);\n        $client = $client ?: new GuzzleClient($this->options['base_url'], $this->options);\n        $this->client  = $client;\n\n        $this->addListener('request.error', array(new ErrorListener($this->options), 'onRequestError'));\n        $this->clearHeaders();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function setOption($name, $value)\n    {\n        $this->options[$name] = $value;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function setHeaders(array $headers)\n    {\n        $this->headers = array_merge($this->headers, $headers);\n    }\n\n    /**\n     * Clears used headers.\n     */\n    public function clearHeaders()\n    {\n        $this->headers = array(\n            'Accept' => sprintf('application/vnd.github.%s+json', $this->options['api_version']),\n            'User-Agent' => sprintf('%s', $this->options['user_agent']),\n        );\n    }\n\n    public function addListener($eventName, $listener)\n    {\n        $this->client->getEventDispatcher()->addListener($eventName, $listener);\n    }\n\n    public function addSubscriber(EventSubscriberInterface $subscriber)\n    {\n        $this->client->addSubscriber($subscriber);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function get($path, array $parameters = array(), array $headers = array())\n    {\n        return $this->request($path, null, 'GET', $headers, array('query' => $parameters));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function post($path, $body = null, array $headers = array())\n    {\n        return $this->request($path, $body, 'POST', $headers);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function patch($path, $body = null, array $headers = array())\n    {\n        return $this->request($path, $body, 'PATCH', $headers);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function delete($path, $body = null, array $headers = array())\n    {\n        return $this->request($path, $body, 'DELETE', $headers);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function put($path, $body, array $headers = array())\n    {\n        return $this->request($path, $body, 'PUT', $headers);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function request($path, $body = null, $httpMethod = 'GET', array $headers = array(), array $options = array())\n    {\n        $request = $this->createRequest($httpMethod, $path, $body, $headers, $options);\n\n        try {\n            $response = $this->client->send($request);\n        } catch (\\LogicException $e) {\n            throw new ErrorException($e->getMessage(), $e->getCode(), $e);\n        } catch (TwoFactorAuthenticationRequiredException $e) {\n            throw $e;\n        } catch (\\RuntimeException $e) {\n            throw new RuntimeException($e->getMessage(), $e->getCode(), $e);\n        }\n\n        $this->lastRequest  = $request;\n        $this->lastResponse = $response;\n\n        return $response;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function authenticate($tokenOrLogin, $password = null, $method)\n    {\n        $this->addListener('request.before_send', array(\n            new AuthListener($tokenOrLogin, $password, $method), 'onRequestBeforeSend'\n        ));\n    }\n\n    /**\n     * @return Request\n     */\n    public function getLastRequest()\n    {\n        return $this->lastRequest;\n    }\n\n    /**\n     * @return Response\n     */\n    public function getLastResponse()\n    {\n        return $this->lastResponse;\n    }\n\n    protected function createRequest($httpMethod, $path, $body = null, array $headers = array(), array $options = array())\n    {\n        return $this->client->createRequest(\n            $httpMethod,\n            $path,\n            array_merge($this->headers, $headers),\n            $body,\n            $options\n        );\n    }\n}\n","markerStore":{"nextMarkerId":33,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":16,"preserveFolds":true,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/lildude/Development/php-github-api/lib/Github/HttpClient/HttpClient.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"44b2b87facf5a6bf4453edcc0481decc68913969","deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Development/php-github-api/test/Github/Tests/ClientTest.php","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":12,"softTabs":true,"displayBuffer":{"id":13,"softWrapped":true,"scrollTop":5731,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Development/php-github-api/lib/Github/Client.php","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":16,"softTabs":true,"displayBuffer":{"id":17,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Development/php-github-api/lib/Github/HttpClient/HttpClient.php","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/lildude/Development/php-github-api/lib/Github/Client.php","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-php","language-html","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"linter":{"scope":"File"},"metrics":{"sessionLength":163618361},"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false,"wholeWord":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["mock","options"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/lildude/Development/php-github-api/test/Github/Tests/ClientTest.php":1438700754687,"/Users/lildude/Development/php-github-api/lib/Github/Client.php":1438790235935,"/Users/lildude/Development/php-github-api/lib/Github/HttpClient/HttpClient.php":1438700807056},"keybinding-resolver":{},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/lildude/Development/php-github-api":{"isExpanded":true,"entries":{"doc":{"isExpanded":false,"entries":{}},"lib":{"isExpanded":true,"entries":{"Github":{"isExpanded":true,"entries":{"Api":{"isExpanded":false,"entries":{}},"Exception":{"isExpanded":false,"entries":{}},"HttpClient":{"isExpanded":true,"entries":{"Cache":{"isExpanded":false,"entries":{}},"Listener":{"isExpanded":false,"entries":{}},"Message":{"isExpanded":false,"entries":{}}}}}}}},"test":{"isExpanded":true,"entries":{"Github":{"isExpanded":true,"entries":{"Tests":{"isExpanded":true,"entries":{"Api":{"isExpanded":false,"entries":{}},"Functional":{"isExpanded":false,"entries":{}},"HttpClient":{"isExpanded":false,"entries":{}},"Mock":{"isExpanded":false,"entries":{}}}}}}}}}}},"selectedPath":"/Users/lildude/Development/php-github-api/lib/Github/Client.php","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}