{"mode":"editor","version":1,"windowDimensions":{"x":34,"y":22,"width":1276,"height":829},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/lildude/Sites/phpldapadmin/config","buffers":[{"text":"<?php\n/** NOTE **\n ** Make sure that <?php is the FIRST line of this file!\n ** IE: There should NOT be any blank lines or spaces BEFORE <?php\n **/\n\n/**\n * The phpLDAPadmin config file\n * See: http://phpldapadmin.sourceforge.net/wiki/index.php/Config.php\n *\n * This is where you can customise some of the phpLDAPadmin defaults\n * that are defined in config_default.php.\n *\n * To override a default, use the $config->custom variable to do so.\n * For example, the default for defining the language in config_default.php\n *\n * $this->default->appearance['language'] = array(\n *  'desc'=>'Language',\n *  'default'=>'auto');\n *\n * to override this, use $config->custom->appearance['language'] = 'en_EN';\n *\n * This file is also used to configure your LDAP server connections.\n *\n * You must specify at least one LDAP server there. You may add\n * as many as you like. You can also specify your language, and\n * many other options.\n *\n * NOTE: Commented out values in this file prefixed by //, represent the\n * defaults that have been defined in config_default.php.\n * Commented out values prefixed by #, dont reflect their default value, you can\n * check config_default.php if you want to see what the default is.\n *\n * DONT change config_default.php, you changes will be lost by the next release\n * of PLA. Instead change this file - as it will NOT be replaced by a new\n * version of phpLDAPadmin.\n */\n\n/*********************************************\n * Useful important configuration overrides  *\n *********************************************/\n\n/* If you are asked to put PLA in debug mode, this is how you do it: */\n#  $config->custom->debug['level'] = 255;\n#  $config->custom->debug['syslog'] = true;\n#  $config->custom->debug['file'] = '/tmp/pla_debug.log';\n\n/* phpLDAPadmin can encrypt the content of sensitive cookies if you set this\n   to a big random string. */\n// $config->custom->session['blowfish'] = null;\n\n/* If your auth_type is http, you can override your HTTP Authentication Realm. */\n// $config->custom->session['http_realm'] = sprintf('%s %s',app_name(),'login');\n\n/* The language setting. If you set this to 'auto', phpLDAPadmin will attempt\n   to determine your language automatically.\n   If PLA doesnt show (all) strings in your language, then you can do some\n   translation at http://translations.launchpad.net/phpldapadmin and download\n   the translation files, replacing those provided with PLA.\n   (We'll pick up the translations before making the next release too!) */\n// $config->custom->appearance['language'] = 'auto';\n\n/* The temporary storage directory where we will put jpegPhoto data\n   This directory must be readable and writable by your web server. */\n// $config->custom->jpeg['tmpdir'] = '/tmp';     // Example for Unix systems\n#  $config->custom->jpeg['tmpdir'] = 'c:\\\\temp'; // Example for Windows systems\n\n/* Set this to (bool)true if you do NOT want a random salt used when\n   calling crypt().  Instead, use the first two letters of the user's\n   password.  This is insecure but unfortunately needed for some older\n   environments. */\n#  $config->custom->password['no_random_crypt_salt'] = true;\n\n/* PHP script timeout control. If php runs longer than this many seconds then\n   PHP will stop with an Maximum Execution time error. Increase this value from\n   the default if queries to your LDAP server are slow. The default is either\n   30 seconds or the setting of max_exection_time if this is null. */\n// $config->custom->session['timelimit'] = 30;\n\n/* Our local timezone\n   This is to make sure that when we ask the system for the current time, we\n   get the right local time. If this is not set, all time() calculations will\n   assume UTC if you have not set PHP date.timezone. */\n// $config->custom->appearance['timezone'] = null;\n#  $config->custom->appearance['timezone'] = 'Australia/Melbourne';\n\n/*********************************************\n * Commands                                  *\n *********************************************/\n\n/* Command availability ; if you don't authorize a command the command\n   links will not be shown and the command action will not be permitted.\n   For better security, set also ACL in your ldap directory. */\n/*\n$config->custom->commands['cmd'] = array(\n\t'entry_internal_attributes_show' => true,\n\t'entry_refresh' => true,\n\t'oslinks' => true,\n\t'switch_template' => true\n);\n\n$config->custom->commands['script'] = array(\n\t'add_attr_form' => true,\n\t'add_oclass_form' => true,\n\t'add_value_form' => true,\n\t'collapse' => true,\n\t'compare' => true,\n\t'compare_form' => true,\n\t'copy' => true,\n\t'copy_form' => true,\n\t'create' => true,\n\t'create_confirm' => true,\n\t'delete' => true,\n\t'delete_attr' => true,\n\t'delete_form' => true,\n\t'draw_tree_node' => true,\n\t'expand' => true,\n\t'export' => true,\n\t'export_form' => true,\n\t'import' => true,\n\t'import_form' => true,\n\t'login' => true,\n\t'logout' => true,\n\t'login_form' => true,\n\t'mass_delete' => true,\n\t'mass_edit' => true,\n\t'mass_update' => true,\n\t'modify_member_form' => true,\n\t'monitor' => true,\n\t'purge_cache' => true,\n\t'query_engine' => true,\n\t'rename' => true,\n\t'rename_form' => true,\n\t'rdelete' => true,\n\t'refresh' => true,\n\t'schema' => true,\n\t'server_info' => true,\n\t'show_cache' => true,\n\t'template_engine' => true,\n\t'update_confirm' => true,\n\t'update' => true\n);\n*/\n\n/*********************************************\n * Appearance                                *\n *********************************************/\n\n/* If you want to choose the appearance of the tree, specify a class name which\n   inherits from the Tree class. */\n// $config->custom->appearance['tree'] = 'AJAXTree';\n#  $config->custom->appearance['tree'] = 'HTMLTree';\n\n/* Just show your custom templates. */\n// $config->custom->appearance['custom_templates_only'] = false;\n\n/* Disable the default template. */\n// $config->custom->appearance['disable_default_template'] = false;\n\n/* Hide the warnings for invalid objectClasses/attributes in templates. */\n// $config->custom->appearance['hide_template_warning'] = false;\n\n/* Set to true if you would like to hide header and footer parts. */\n// $config->custom->appearance['minimalMode'] = false;\n\n/* Configure what objects are shown in left hand tree */\n// $config->custom->appearance['tree_filter'] = '(objectclass=*)';\n\n/* The height and width of the tree. If these values are not set, then\n   no tree scroll bars are provided. */\n// $config->custom->appearance['tree_height'] = null;\n#  $config->custom->appearance['tree_height'] = 600;\n// $config->custom->appearance['tree_width'] = null;\n#  $config->custom->appearance['tree_width'] = 250;\n\n/* Confirm create and update operations, allowing you to review the changes\n   and optionally skip attributes during the create/update operation. */\n// $config->custom->confirm['create'] = true;\n// $config->custom->confirm['update'] = true;\n\n/* Confirm copy operations, and treat them like create operations. This allows\n   you to edit the attributes (thus changing any that might conflict with\n   uniqueness) before creating the new entry. */\n// $config->custom->confirm['copy'] = true;\n\n/*********************************************\n * User-friendly attribute translation       *\n *********************************************/\n\n/* Use this array to map attribute names to user friendly names. For example, if\n   you don't want to see \"facsimileTelephoneNumber\" but rather \"Fax\". */\n// $config->custom->appearance['friendly_attrs'] = array();\n$config->custom->appearance['friendly_attrs'] = array(\n\t'facsimileTelephoneNumber' => 'Fax',\n\t'gid'                      => 'Group',\n\t'mail'                     => 'Email',\n\t'telephoneNumber'          => 'Telephone',\n\t'uid'                      => 'User Name',\n\t'userPassword'             => 'Password'\n);\n\n/*********************************************\n * Hidden attributes                         *\n *********************************************/\n\n/* You may want to hide certain attributes from being edited. If you want to\n   hide attributes from the user, you should use your LDAP servers ACLs.\n   NOTE: The user must be able to read the hide_attrs_exempt entry to be\n   excluded. */\n// $config->custom->appearance['hide_attrs'] = array();\n#  $config->custom->appearance['hide_attrs'] = array('objectClass');\n\n/* Members of this list will be exempt from the hidden attributes. */\n// $config->custom->appearance['hide_attrs_exempt'] = null;\n#  $config->custom->appearance['hide_attrs_exempt'] = 'cn=PLA UnHide,ou=Groups,c=AU';\n\n/*********************************************\n * Read-only attributes                      *\n *********************************************/\n\n/* You may want to phpLDAPadmin to display certain attributes as read only,\n   meaning that users will not be presented a form for modifying those\n   attributes, and they will not be allowed to be modified on the \"back-end\"\n   either. You may configure this list here:\n   NOTE: The user must be able to read the readonly_attrs_exempt entry to be\n   excluded. */\n// $config->custom->appearance['readonly_attrs'] = array();\n\n/* Members of this list will be exempt from the readonly attributes. */\n// $config->custom->appearance['readonly_attrs_exempt'] = null;\n#  $config->custom->appearance['readonly_attrs_exempt'] = 'cn=PLA ReadWrite,ou=Groups,c=AU';\n\n/*********************************************\n * Group attributes                          *\n *********************************************/\n\n/* Add \"modify group members\" link to the attribute. */\n// $config->custom->modify_member['groupattr'] = array('member','uniqueMember','memberUid');\n\n/* Configure filter for member search. This only applies to \"modify group members\" feature */\n// $config->custom->modify_member['filter'] = '(objectclass=Person)';\n\n/* Attribute that is added to the group member attribute. */\n// $config->custom->modify_member['attr'] = 'dn';\n\n/* For Posix attributes */\n// $config->custom->modify_member['posixattr'] = 'uid';\n// $config->custom->modify_member['posixfilter'] = '(uid=*)';\n// $config->custom->modify_member['posixgroupattr'] = 'memberUid';\n\n/*********************************************\n * Support for attrs display order           *\n *********************************************/\n\n/* Use this array if you want to have your attributes displayed in a specific\n   order. You can use default attribute names or their fridenly names.\n   For example, \"sn\" will be displayed right after \"givenName\". All the other\n   attributes that are not specified in this array will be displayed after in\n   alphabetical order. */\n// $config->custom->appearance['attr_display_order'] = array();\n#  $config->custom->appearance['attr_display_order'] = array(\n#   'givenName',\n#   'sn',\n#   'cn',\n#   'displayName',\n#   'uid',\n#   'uidNumber',\n#   'gidNumber',\n#   'homeDirectory',\n#   'mail',\n#   'userPassword'\n#  );\n\n/*********************************************\n * Define your LDAP servers in this section  *\n *********************************************/\n\n$servers = new Datastore();\n\n/* $servers->NewServer('ldap_pla') must be called before each new LDAP server\n   declaration. */\n$servers->newServer('ldap_pla');\n\n/* A convenient name that will appear in the tree viewer and throughout\n   phpLDAPadmin to identify this LDAP server to users. */\n$servers->setValue('server','name','My LDAP Server');\n\n/* Examples:\n   'ldap.example.com',\n   'ldaps://ldap.example.com/',\n   'ldapi://%2fusr%local%2fvar%2frun%2fldapi'\n           (Unix socket at /usr/local/var/run/ldap) */\n// $servers->setValue('server','host','127.0.0.1');\n\n/* The port your LDAP server listens on (no quotes). 389 is standard. */\n// $servers->setValue('server','port',389);\n\n/* Array of base DNs of your LDAP server. Leave this blank to have phpLDAPadmin\n   auto-detect it for you. */\n// $servers->setValue('server','base',array(''));\n\n/* Five options for auth_type:\n   1. 'cookie': you will login via a web form, and a client-side cookie will\n      store your login dn and password.\n   2. 'session': same as cookie but your login dn and password are stored on the\n      web server in a persistent session variable.\n   3. 'http': same as session but your login dn and password are retrieved via\n      HTTP authentication.\n   4. 'config': specify your login dn and password here in this config file. No\n      login will be required to use phpLDAPadmin for this server.\n   5. 'sasl': login will be taken from the webserver's kerberos authentication.\n      Currently only GSSAPI has been tested (using mod_auth_kerb).\n\n   Choose wisely to protect your authentication information appropriately for\n   your situation. If you choose 'cookie', your cookie contents will be\n   encrypted using blowfish and the secret your specify above as\n   session['blowfish']. */\n// $servers->setValue('login','auth_type','session');\n\n/* The DN of the user for phpLDAPadmin to bind with. For anonymous binds or\n   'cookie','session' or 'sasl' auth_types, LEAVE THE LOGIN_DN AND LOGIN_PASS\n   BLANK. If you specify a login_attr in conjunction with a cookie or session\n   auth_type, then you can also specify the bind_id/bind_pass here for searching\n   the directory for users (ie, if your LDAP server does not allow anonymous\n   binds. */\n// $servers->setValue('login','bind_id','');\n#  $servers->setValue('login','bind_id','cn=Manager,dc=example,dc=com');\n\n/* Your LDAP password. If you specified an empty bind_id above, this MUST also\n   be blank. */\n// $servers->setValue('login','bind_pass','');\n#  $servers->setValue('login','bind_pass','secret');\n\n/* Use TLS (Transport Layer Security) to connect to the LDAP server. */\n// $servers->setValue('server','tls',false);\n\n/************************************\n *      SASL Authentication         *\n ************************************/\n\n/* Enable SASL authentication LDAP SASL authentication requires PHP 5.x\n   configured with --with-ldap-sasl=DIR. If this option is disabled (ie, set to\n   false), then all other sasl options are ignored. */\n// $servers->setValue('login','auth_type','sasl');\n\n/* SASL auth mechanism */\n// $servers->setValue('sasl','mech','GSSAPI');\n\n/* SASL authentication realm name */\n// $servers->setValue('sasl','realm','');\n#  $servers->setValue('sasl','realm','EXAMPLE.COM');\n\n/* SASL authorization ID name\n   If this option is undefined, authorization id will be computed from bind DN,\n   using authz_id_regex and authz_id_replacement. */\n// $servers->setValue('sasl','authz_id', null);\n\n/* SASL authorization id regex and replacement\n   When authz_id property is not set (default), phpLDAPAdmin will try to\n   figure out authorization id by itself from bind distinguished name (DN).\n\n   This procedure is done by calling preg_replace() php function in the\n   following way:\n\n   $authz_id = preg_replace($sasl_authz_id_regex,$sasl_authz_id_replacement,\n    $bind_dn);\n\n   For info about pcre regexes, see:\n   - pcre(3), perlre(3)\n   - http://www.php.net/preg_replace */\n// $servers->setValue('sasl','authz_id_regex',null);\n// $servers->setValue('sasl','authz_id_replacement',null);\n#  $servers->setValue('sasl','authz_id_regex','/^uid=([^,]+)(.+)/i');\n#  $servers->setValue('sasl','authz_id_replacement','$1');\n\n/* SASL auth security props.\n   See http://beepcore-tcl.sourceforge.net/tclsasl.html#anchor5 for explanation. */\n// $servers->setValue('sasl','props',null);\n\n/* Default password hashing algorithm. One of md5, ssha, sha, md5crpyt, smd5,\n   blowfish, crypt or leave blank for now default algorithm. */\n// $servers->setValue('appearance','password_hash','md5');\n\n/* If you specified 'cookie' or 'session' as the auth_type above, you can\n   optionally specify here an attribute to use when logging in. If you enter\n   'uid' and login as 'dsmith', phpLDAPadmin will search for (uid=dsmith)\n   and log in as that user.\n   Leave blank or specify 'dn' to use full DN for logging in. Note also that if\n   your LDAP server requires you to login to perform searches, you can enter the\n   DN to use when searching in 'bind_id' and 'bind_pass' above. */\n// $servers->setValue('login','attr','dn');\n\n/* Base DNs to used for logins. If this value is not set, then the LDAP server\n   Base DNs are used. */\n// $servers->setValue('login','base',array());\n\n/* If 'login,attr' is used above such that phpLDAPadmin will search for your DN\n   at login, you may restrict the search to a specific objectClasses. EG, set this\n   to array('posixAccount') or array('inetOrgPerson',..), depending upon your\n   setup. */\n// $servers->setValue('login','class',array());\n\n/* If you specified something different from 'dn', for example 'uid', as the\n   login_attr above, you can optionally specify here to fall back to\n   authentication with dn.\n   This is useful, when users should be able to log in with their uid, but\n   the ldap administrator wants to log in with his root-dn, that does not\n   necessarily have the uid attribute.\n   When using this feature, login_class is ignored. */\n// $servers->setValue('login','fallback_dn',false);\n\n/* Specify true If you want phpLDAPadmin to not display or permit any\n   modification to the LDAP server. */\n// $servers->setValue('server','read_only',false);\n\n/* Specify false if you do not want phpLDAPadmin to draw the 'Create new' links\n   in the tree viewer. */\n// $servers->setValue('appearance','show_create',true);\n\n/* Set to true if you would like to initially open the first level of each tree. */\n// $servers->setValue('appearance','open_tree',false);\n\n/* This feature allows phpLDAPadmin to automatically determine the next\n   available uidNumber for a new entry. */\n// $servers->setValue('auto_number','enable',true);\n\n/* The mechanism to use when finding the next available uidNumber. Two possible\n   values: 'uidpool' or 'search'.\n   The 'uidpool' mechanism uses an existing uidPool entry in your LDAP server to\n   blindly lookup the next available uidNumber. The 'search' mechanism searches\n   for entries with a uidNumber value and finds the first available uidNumber\n   (slower). */\n// $servers->setValue('auto_number','mechanism','search');\n\n/* The DN of the search base when the 'search' mechanism is used above. */\n#  $servers->setValue('auto_number','search_base','ou=People,dc=example,dc=com');\n\n/* The minimum number to use when searching for the next available number\n   (only when 'search' is used for auto_number. */\n// $servers->setValue('auto_number','min',array('uidNumber'=>1000,'gidNumber'=>500));\n\n/* If you set this, then phpldapadmin will bind to LDAP with this user ID when\n   searching for the uidnumber. The idea is, this user id would have full\n   (readonly) access to uidnumber in your ldap directory (the logged in user\n   may not), so that you can be guaranteed to get a unique uidnumber for your\n   directory. */\n// $servers->setValue('auto_number','dn',null);\n\n/* The password for the dn above. */\n// $servers->setValue('auto_number','pass',null);\n\n/* Enable anonymous bind login. */\n// $servers->setValue('login','anon_bind',true);\n\n/* Use customized page with prefix when available. */\n#  $servers->setValue('custom','pages_prefix','custom_');\n\n/* If you set this, then only these DNs are allowed to log in. This array can\n   contain individual users, groups or ldap search filter(s). Keep in mind that\n   the user has not authenticated yet, so this will be an anonymous search to\n   the LDAP server, so make your ACLs allow these searches to return results! */\n#  $servers->setValue('login','allowed_dns',array(\n#   'uid=stran,ou=People,dc=example,dc=com',\n#   '(&(gidNumber=811)(objectClass=groupOfNames))',\n#   '(|(uidNumber=200)(uidNumber=201))',\n#   'cn=callcenter,ou=Group,dc=example,dc=com'));\n\n/* Set this if you dont want this LDAP server to show in the tree */\n// $servers->setValue('server','visible',true);\n\n/* Set this if you want to hide the base DNs that dont exist instead of\n   displaying the message \"The base entry doesnt exist, create it?\"\n// $servers->setValue('server','hide_noaccess_base',false);\n#  $servers->setValue('server','hide_noaccess_base',true);\n\n/* This is the time out value in minutes for the server. After as many minutes\n   of inactivity you will be automatically logged out. If not set, the default\n   value will be ( session_cache_expire()-1 ) */\n#  $servers->setValue('login','timeout',30);\n\n/* Set this if you want phpldapadmin to perform rename operation on entry which\n   has children. Certain servers are known to allow it, certain are not. */\n// $servers->setValue('server','branch_rename',false);\n\n/* If you set this, then phpldapadmin will show these attributes as\n   internal attributes, even if they are not defined in your schema. */\n// $servers->setValue('server','custom_sys_attrs',array(''));\n#  $servers->setValue('server','custom_sys_attrs',array('passwordExpirationTime','passwordAllowChangeTime'));\n\n/* If you set this, then phpldapadmin will show these attributes on\n   objects, even if they are not defined in your schema. */\n// $servers->setValue('server','custom_attrs',array(''));\n#  $servers->setValue('server','custom_attrs',array('nsRoleDN','nsRole','nsAccountLock'));\n\n/* These attributes will be forced to MAY attributes and become option in the\n   templates. If they are not defined in the templates, then they wont appear\n   as per normal template processing. You may want to do this because your LDAP\n   server may automatically calculate a default value.\n   In Fedora Directory Server using the DNA Plugin one could ignore uidNumber,\n   gidNumber and sambaSID. */\n// $servers->setValue('server','force_may',array(''));\n#  $servers->setValue('server','force_may',array('uidNumber','gidNumber','sambaSID'));\n\n/*********************************************\n * Unique attributes                         *\n *********************************************/\n\n/* You may want phpLDAPadmin to enforce some attributes to have unique values\n   (ie: not belong to other entries in your tree. This (together with\n   'unique','dn' and 'unique','pass' option will not let updates to\n   occur with other attributes have the same value. */\n#  $servers->setValue('unique','attrs',array('mail','uid','uidNumber'));\n\n/* If you set this, then phpldapadmin will bind to LDAP with this user ID when\n   searching for attribute uniqueness. The idea is, this user id would have full\n   (readonly) access to your ldap directory (the logged in user may not), so\n   that you can be guaranteed to get a unique uidnumber for your directory. */\n// $servers->setValue('unique','dn',null);\n\n/* The password for the dn above. */\n// $servers->setValue('unique','pass',null);\n\n/**************************************************************************\n * If you want to configure additional LDAP servers, do so below.         *\n * Remove the commented lines and use this section as a template for all  *\n * your other LDAP servers.                                               *\n **************************************************************************/\n\n$servers->newServer('ldap_pla');\n$servers->setValue('server','name','Vagrant OpenLDAP');\n$servers->setValue('server','host','127.0.0.1');\n$servers->setValue('server','port',3890);\n$servers->setValue('server','base',array('dc=puppetlabs,dc=test'));\n$servers->setValue('login','auth_type','cookie');\n$servers->setValue('login','bind_id','cn=admin,dc=puppetlabs,dc=test');\n$servers->setValue('login','bind_pass','test');\n$servers->setValue('server','tls',false);\n\n/*\n$servers->newServer('ldap_pla');\n$servers->setValue('server','name','LDAP Server');\n$servers->setValue('server','host','127.0.0.1');\n$servers->setValue('server','port',389);\n$servers->setValue('server','base',array(''));\n$servers->setValue('login','auth_type','cookie');\n$servers->setValue('login','bind_id','');\n$servers->setValue('login','bind_pass','');\n$servers->setValue('server','tls',false);\n\n# SASL auth\n$servers->setValue('login','auth_type','sasl');\n$servers->setValue('sasl','mech','GSSAPI');\n$servers->setValue('sasl','realm','EXAMPLE.COM');\n$servers->setValue('sasl','authz_id',null);\n$servers->setValue('sasl','authz_id_regex','/^uid=([^,]+)(.+)/i');\n$servers->setValue('sasl','authz_id_replacement','$1');\n$servers->setValue('sasl','props',null);\n\n$servers->setValue('appearance','password_hash','md5');\n$servers->setValue('login','attr','dn');\n$servers->setValue('login','fallback_dn',false);\n$servers->setValue('login','class',null);\n$servers->setValue('server','read_only',false);\n$servers->setValue('appearance','show_create',true);\n\n$servers->setValue('auto_number','enable',true);\n$servers->setValue('auto_number','mechanism','search');\n$servers->setValue('auto_number','search_base',null);\n$servers->setValue('auto_number','min',array('uidNumber'=>1000,'gidNumber'=>500));\n$servers->setValue('auto_number','dn',null);\n$servers->setValue('auto_number','pass',null);\n\n$servers->setValue('login','anon_bind',true);\n$servers->setValue('custom','pages_prefix','custom_');\n$servers->setValue('unique','attrs',array('mail','uid','uidNumber'));\n$servers->setValue('unique','dn',null);\n$servers->setValue('unique','pass',null);\n\n$servers->setValue('server','visible',true);\n$servers->setValue('login','timeout',30);\n$servers->setValue('server','branch_rename',false);\n$servers->setValue('server','custom_sys_attrs',array('passwordExpirationTime','passwordAllowChangeTime'));\n$servers->setValue('server','custom_attrs',array('nsRoleDN','nsRole','nsAccountLock'));\n$servers->setValue('server','force_may',array('uidNumber','gidNumber','sambaSID'));\n*/\n?>\n","markers":{"markers":{"1":{"id":1,"range":[[538,2],[538,2]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":7,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[527,0],[527,0]],"newRange":[[527,0],[528,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[528,0],[528,0]],"newRange":[[528,0],[528,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,0],[528,0]],"newRange":[[528,0],[536,41]],"oldText":"","newText":"$servers->newServer('ldap_pla');\n$servers->setValue('server','name','LDAP Server');\n$servers->setValue('server','host','127.0.0.1');\n$servers->setValue('server','port',389);\n$servers->setValue('server','base',array(''));\n$servers->setValue('login','auth_type','cookie');\n$servers->setValue('login','bind_id','');\n$servers->setValue('login','bind_pass','');\n$servers->setValue('server','tls',false);","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[536,41],[536,41]],"newRange":[[536,41],[537,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[537,0],[537,0]],"newRange":[[537,0],[537,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[528,21],[528,29]]},"newParams":{"tailed":false,"range":[[528,29],[528,29]]},"deserializer":"MarkerPatch"},{"oldRange":[[528,21],[528,29]],"newRange":[[528,21],[528,22]],"oldText":"ldap_pla","newText":"V","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,22],[528,22]],"newRange":[[528,22],[528,23]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,23],[528,23]],"newRange":[[528,23],[528,24]],"oldText":"","newText":"g","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,24],[528,24]],"newRange":[[528,24],[528,25]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,25],[528,25]],"newRange":[[528,25],[528,26]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,26],[528,26]],"newRange":[[528,26],[528,27]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,27],[528,27]],"newRange":[[528,27],[528,28]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,28],[528,28]],"newRange":[[528,28],[528,29]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,29],[528,29]],"newRange":[[528,29],[528,30]],"oldText":"","newText":"O","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,30],[528,30]],"newRange":[[528,30],[528,31]],"oldText":"","newText":"p","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,31],[528,31]],"newRange":[[528,31],[528,32]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,32],[528,32]],"newRange":[[528,32],[528,33]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,33],[528,33]],"newRange":[[528,33],[528,34]],"oldText":"","newText":"L","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,34],[528,34]],"newRange":[[528,34],[528,35]],"oldText":"","newText":"D","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,35],[528,35]],"newRange":[[528,35],[528,36]],"oldText":"","newText":"A","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,36],[528,36]],"newRange":[[528,36],[528,37]],"oldText":"","newText":"P","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[529,36],[529,47]]},"newParams":{"tailed":false,"range":[[529,47],[529,47]]},"deserializer":"MarkerPatch"},{"oldRange":[[529,36],[529,47]],"newRange":[[529,36],[529,52]],"oldText":"LDAP Server","newText":"Vagrant OpenLDAP","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[531,38],[531,38]],"newRange":[[531,38],[531,39]],"oldText":"","newText":"0","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[532,42],[532,42]],"newRange":[[532,42],[532,63]],"oldText":"","newText":"dc=puppetlabs,dc=test","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[534,38],[534,38]],"newRange":[[534,38],[534,39]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[534,39],[534,39]],"newRange":[[534,39],[534,40]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[534,40],[534,40]],"newRange":[[534,40],[534,41]],"oldText":"","newText":"=","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[534,41],[534,41]],"newRange":[[534,41],[534,42]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[534,42],[534,42]],"newRange":[[534,42],[534,43]],"oldText":"","newText":"d","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[534,43],[534,43]],"newRange":[[534,43],[534,44]],"oldText":"","newText":"m","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[534,44],[534,44]],"newRange":[[534,44],[534,45]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[534,45],[534,45]],"newRange":[[534,45],[534,46]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[534,46],[534,46]],"newRange":[[534,46],[534,47]],"oldText":"","newText":",","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[534,47],[534,47]],"newRange":[[534,47],[534,68]],"oldText":"","newText":"dc=puppetlabs,dc=test","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[535,40],[535,40]],"newRange":[[535,40],[535,41]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[535,41],[535,41]],"newRange":[[535,41],[535,42]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[535,42],[535,42]],"newRange":[[535,42],[535,43]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[535,43],[535,43]],"newRange":[[535,43],[535,44]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[528,21],[528,37]]},"newParams":{"tailed":false,"range":[[528,37],[528,37]]},"deserializer":"MarkerPatch"},{"oldRange":[[528,21],[528,37]],"newRange":[[528,21],[528,22]],"oldText":"Vagrant OpenLDAP","newText":"l","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,22],[528,22]],"newRange":[[528,22],[528,23]],"oldText":"","newText":"d","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,23],[528,23]],"newRange":[[528,23],[528,24]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,24],[528,24]],"newRange":[[528,24],[528,25]],"oldText":"","newText":"p","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,25],[528,25]],"newRange":[[528,25],[528,26]],"oldText":"","newText":"_","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,26],[528,26]],"newRange":[[528,26],[528,27]],"oldText":"","newText":"p","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,27],[528,27]],"newRange":[[528,27],[528,28]],"oldText":"","newText":"l","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[528,28],[528,28]],"newRange":[[528,28],[528,29]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/Sites/phpldapadmin/config/config.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2aee3fac1bce62828ec3c5c74c48d8ebf3cdbd47","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":7,"softTabs":false,"displayBuffer":{"id":8,"softWrap":false,"editorWidthInChars":null,"scrollTop":10445,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Sites/phpldapadmin/config/config.php","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/lildude/Sites/phpldapadmin/config/config.php","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"metrics":{"sessionLength":335311},"fuzzy-finder":{"/Users/lildude/Sites/phpldapadmin/config/config.php":1407753666593},"keybinding-resolver":{"attached":false},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/lildude/Sites/phpldapadmin/config/config.php","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}