{"mode":"editor","version":1,"windowDimensions":{"x":41,"y":22,"width":1133,"height":829},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{"/Users/lildude/github/hubot-classic/scripts/strava.coffee.new":"source.coffee"}},"project":{"path":"/Users/lildude/github/hubot-classic","buffers":[{"text":"# Description:\n#   umps a weather forecast graph image in the room\n#\n# Commands:\n#   hubot weather [me/in] <location>\n\nbaseUrl = 'https://team.githubapp.com/api'\nheaders = {\n  'Authentication': process.env.TEAM_TOKEN,\n  'Accept': 'application/json'\n}\n\nreportWeather = (msg, subject) ->\n  msg.http(\"http://api.openweathermap.org/data/2.5/weather?q=#{subject}&units=imperial\").get() (err, res, body) ->\n    if res.statusCode isnt 200\n      msg.reply \"OpenWeatherMap couldn't find #{subject.replace(/\\+/g, ' ')} :sweat:, got HTTP #{res.statusCode} back.\"\n      return\n\n    data = JSON.parse(body)\n\n    humanPlace = subject.replace(/\\+/g, ' ')\n    place = (humanPlace.split(' ').map (word) -> word[0].toUpperCase() + word[1..-1].toLowerCase()).join ' ' # upper case first letter\n\n    description = data[\"weather\"][0][\"description\"].toLowerCase()\n    temp = parseInt(data[\"main\"][\"temp\"])\n    tempCelsius = (temp - 32) * 5/9\n    wind = data[\"wind\"][\"speed\"]\n    msg.send(\"In #{place}, it's currently #{Math.round(temp)}F/#{Math.round(tempCelsius)}C degrees, #{description}. Winds at #{wind} knots.\")\n\nmodule.exports = (robot) ->\n  robot.respond /weather (me |in )?(.+)$/i, (msg) ->\n    subject = msg.match[2].replace(/\\s/g, '+')\n\n    msg.finish()\n\n    try\n      user = robot.brain.userForName(subject)\n    catch e\n      console.log(e)\n\n    if user\n      msg.send(\"...looking for \" + subject)\n\n      msg.http(baseUrl + \"/users/\" + user.githubLogin + \"/locations\")\n        .headers(headers)\n        .get() (err, res, body) ->\n          if err\n            console.log(err)\n          else\n            locations = JSON.parse(body).locations\n            locations = `locations.sort(function(a,b) { return parseFloat(a.id) - parseFloat(b.id) } )`\n\n            if locations[0]\n              lastLocation = locations[locations.length-1]\n\n              if lastLocation && lastLocation.name\n                msg.send(subject + \" was last seen in \" + lastLocation.name)\n                reportWeather(msg, lastLocation.name.replace(/\\s/g, '+'))\n    else\n      reportWeather(msg, subject)\n","markers":{"markers":{"1":{"id":1,"range":[[35,7],[35,7]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":394,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/github/hubot-classic/scripts/weather.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b6202e49b6bc3835f0e30c9f72fbe7d0ac7aef78","deserializer":"TextBuffer"},{"text":"# Description:\n#   Looks up leaders in the Github cycling and running Strava clubs.\n#\n# Commands:\n#   hubot strava me - Gives you top 3 leaders by distance, longest ride & run, and elevation for both the GitHub Cycling and Running clubs\n#   hubot strava me run - Gives you only the running club's figures\n#   hubot strava me bike - Give you only the cycling club's figures\n\nmodule.exports = (robot) ->\n  robot.respond /strava ?(me )?(.+)?$/i, (msg) ->\n    if !process.env.STRAVA_ACCESS_TOKEN?\n      msg.send(\"Needs STRAVA_ACCESS_TOKEN\")\n      return\n    bike = '26337' # Strava bike team ID\n    run = '35534'  # Strava run team ID\n    teams = []\n    if msg.match[1] == 'bike' or msg.match[2] == 'bike'\n      teams.push bike\n    else if msg.match[1] == 'run' or msg.match[2] == 'run'\n      teams.push run\n    else\n      teams.push bike\n      teams.push run\n\n    for team_id in teams\n      do (team_id) ->\n        who = if team_id == '26337' then \"Cyclists\" else \"Runners\"\n        msg.http(\"https://www.strava.com/api/v3/clubs/#{team_id}/activities\")\n          .header('Authorization', \"Bearer #{process.env.STRAVA_ACCESS_TOKEN}\")\n          .get() (err, res, body) ->\n            info = {}\n            activities = JSON.parse(body)\n            for activity in activities\n              athlete = \"#{activity.athlete.firstname} #{activity.athlete.lastname}\"\n              info[athlete] ||= {\n                totalDistance: 0\n                maxDistance: -1\n                totalClimbing: 0\n              }\n              distance = activity.distance\n              elevationGain = activity.total_elevation_gain\n              info[athlete].totalDistance += distance\n              info[athlete].maxDistance = distance if distance > info[athlete].maxDistance\n              info[athlete].totalClimbing += elevationGain\n\n            totalDistance = []\n            totalClimbing = []\n            maxDistance = []\n            for name, data of info\n              totalDistance.push [Math.round(data.totalDistance), name]\n              totalClimbing.push [Math.round(data.totalClimbing), name]\n              maxDistance.push [Math.round(data.maxDistance), name]\n\n            comparator = (a, b) ->\n              return -1 if (a[0] > b[0])\n              return 1  if (a[0] < b[0])\n              return 0;\n            totalDistance.sort(comparator)\n            totalClimbing.sort(comparator)\n            maxDistance.sort(comparator)\n\n            leaderBoard = \"=> #{who}:\\n\"\n            leaderBoard += \"Total Distance Leaders:\\n\"\n            for leader in totalDistance[0..2]\n              leaderBoard += \"#{leader[1].rpad(' ', 15)} : #{leader[0]/1000}km\\n\"\n            leaderBoard += \"\\nMax Distance Leaders:\\n\"\n            for leader in maxDistance[0..2]\n              leaderBoard += \"#{leader[1].rpad(' ', 15)} : #{leader[0]/1000}km\\n\"\n            leaderBoard += \"\\nTotal Climbing Leaders:\\n\"\n            for leader in totalClimbing[0..2]\n              leaderBoard += \"#{leader[1].rpad(' ', 15)} : #{leader[0]}m\\n\"\n            msg.send leaderBoard\n\n  String::rpad = (padString, length) ->\n    str = this\n    while str.length < length\n      str = str + padString\n    return str\n","markers":{"markers":{"1":{"id":1,"range":[[9,49],[9,49]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1218,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/github/hubot-classic/scripts/strava.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e66d27ce5e333b47afdbd4dc9eef7f3af8adb5ea","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":394,"softTabs":true,"displayBuffer":{"id":395,"softWrap":false,"editorWidthInChars":114,"scrollTop":482,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/github/hubot-classic/scripts/weather.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":1218,"softTabs":true,"displayBuffer":{"id":1219,"softWrap":false,"editorWidthInChars":114,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/github/hubot-classic/scripts/strava.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/lildude/github/hubot-classic/scripts/weather.coffee","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"metrics":{"sessionLength":13137893},"fuzzy-finder":{"/Users/lildude/github/hubot-classic/scripts/weather.coffee":1401123863479,"/Users/lildude/github/hubot-classic/scripts/strava.coffee":1400686451601},"keybinding-resolver":{"attached":false},"tree-view":{"directoryExpansionStates":{"scripts":{}},"selectedPath":"/Users/lildude/github/hubot-classic/scripts/weather.coffee","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":4403,"width":200},"find-and-replace":{"viewState":{"findHistory":[],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}}}}