{"mode":"editor","version":1,"windowDimensions":{"x":316,"y":233,"width":1440,"height":1058,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/lildude/Sites/phpSmug3"],"buffers":[{"text":"<?php\n/* Last updated with phpSmug 0.11\n *\n * This example file shows you how to get a list of public albums for a\n * particular SmugMug user, by their username.\n *\n * Obviously, you'll want to replace the \"<API KEY>\" with one provided\n * by SmugMug: http://www.flickr.com/services/api/key.gne and replace\n * <NICKNAME> with a SmugMug nickname.\n */\n$time = microtime();\n$time = explode(\" \", $time);\n$time = $time[1] + $time[0];\n$start = $time;\n\n\nrequire_once(\"../phpSmug.php\");\n\nerror_reporting( E_ERROR );\n\ntry {\n// OAuth\n\n$d = '';\n\n$f = new phpSmug(\"APIKey=woTP74YfM4zRoScpGFdHYPMLRYZSEhl2\", 'OAuthSecret=5a3707ce2c2afadaa5a5e0c1c327ccae', \"AppName=Developing phpSmug Wrapper/PHPUnit Testing\", \"APIVer=1.3.0\");\n//$f->oauth_signature_method = 'PLAINTEXT';\n//$f->oauth_signature_method = 'HMAC-SHA1';\n\n// Login\n//$f = new phpSmug(\"APIKey=woTP74YfM4zRoScpGFdHYPMLRYZSEhl2\", \"AppName=Developing phpSmug Wrapper\", \"APIVer=1.2.2\");\n//$f->setAdapter('socket');\n$f->setSecureOnly();\n//$d = $f;\n//$f->setProxy('server=emeacache.uk.oracle.com', 'port=80');\n\n//$d = $f->enableCache(\"type=fs\", \"cache_dir=/home/cs125667/public_html/habari/user/cache/\", \"cache_expire=60\");\n//$d = $f->enableCache(\"type=fs\", \"cache_dir=./cache/\", \"cache_expire=20\");\n//$d = $f->enableCache(\"type=db\", \"dsn=mysql://root:rg415sd@localhost/test\", \"cache_expire=60\");\n//$d = $f->login(array(\"EmailAddress\" => \"lildood@gmail.com\", \"Password\" => \"Yc1rm9cp?\"));\n//$d = $f->login('UserID=166590', 'PasswordHash=$1$LVZSb7p7$4NMWz7vLlAtt45F6gER440');\n//$d = $f->login_withPassword(array(\"EmailAddress\" => \"lildood@gmail.com\", \"Password\" => \"Yc1rm9cp?\"));\n//$d = $f->login_withHash('UserID=166590', 'PasswordHash=$1$LVZSb7p7$4NMWz7vLlAtt45F6gER440');\n\n//$f->enableCache(\"type=db\", \"connection=mysql://root:rg415sd@localhost/test\", \"cache_expire=60\");\n//$d = $f->clearCache(TRUE);\n//$d = $f->enableCache(\"type=db\", \"dsn=mysql://root:rg415sd@localhost/test\", \"cache_expire=60\");\n//$d = $f->enableCache(\"type=db\", \"dsn=sqlite:////tmp/phpSmug.db?mode=0666\", \"cache_expire=60\" );\n\n//$d = $f->enableCache(\"type=fs\", \"cache_dir=./cache/\", \"cache_expire=60\");\n//$d = $f->login();\n//$d = $f->login(\"EmailAddress=lildood@gmail.com\", \"Password=Yc1rm9cp?\");\n//$d = $f->logout();\n//$d = $f->clearCache(TRUE);\n//$d = $f->getErrorCode();\n//$d .= $f->getErrorMsg();\n//$d = $f->service_ping();\n//$f->setProxy('server=emeacache.uk.oracle.com', 'port=80');\n//$d = $f;\n//\n//$d = $f->reflection_getMethods();\n//foreach($d as $f) {\n//\techo 'array(\\''.str_replace('.', '_', str_replace('smugmug.', '', $f['Name'])).'\\')<br />';\n//}\n//$d = $f->reflection_getGroupedMethods();\n//$d = $f->reflection_getMethodInfo('MethodName=smugmug.albums.get');\n//$d = $d['Response']['Properties'][0]['Members'];\n\n\n\n//$d = $f->auth_getRequestToken();\n//$d = $f->authorize();\n/****** START OAUTH TESTING *******/\n/* ** Start OAuth Authorisation Testing ***\nI use session variables and a tmp cookie for testing. It's up to application developers to devise their own store methods\n *\n *\n\nif ($_COOKIE['phpSmugTestOAuth']) {\n\techo \"<p>Cookie found with OAuth token</p>\";\n\t$token = unserialize($_COOKIE['phpSmugTestOAuth']);\n} else {\n\tif (session_id() == \"\") { @session_start();}\n\n\tif (! $_SESSION['SmugGalReqToken']) {\n\t\t// Step 1: Get a Request Token\n\t\t$d = $f->auth_getRequestToken();\n\t\t$_SESSION['SmugGalReqToken'] = serialize($d);\n\n\t\t// Step 2: Get the User to login to SmugMug and Authorise this demo\n\t\techo \"<p>Click <a href='\".$f->authorize().\"' target='_blank'><strong>HERE</strong></a> to Authorize This Demo.</p>\";\n\t\techo \"<p>A new window/tab will open asking you to login to SmugMug (if not already logged in).  Once you've logged it, SmugMug will redirect you to a page asking you to approve the access (it's read only) to your public photos.  Approve the request and come back to this page and click REFRESH below.</p>\";\n\t\techo \"<p><a href='\".$_SERVER['PHP_SELF'].\"'><strong>REFRESH</strong></a></p>\";\n\t} else {\n\t\t$reqToken = unserialize($_SESSION['SmugGalReqToken']);\n\t\tunset($_SESSION['SmugGalReqToken']);\n\t\tsession_unregister('SmugGalReqToken');\n\n\t\t// Step 3: Use the Request token obtained in step 1 to get an access token\n\t\t$f->setToken(\"id={$reqToken['Token']['id']}\", \"Secret={$reqToken['Token']['Secret']}\");\n\t\t$token = $f->auth_getAccessToken();\t// The results of this call is what your application needs to store.\n\n\t\tsetcookie('phpSmugTestOAuth', serialize($token));\n\t}\n}\n/* */\n// Set the Access token for use by phpSmug.\n//$f->setToken(\"id={$token['Token']['id']}\", \"Secret={$token['Token']['Secret']}\");\n//$d = $token;\n//$d = $f->auth_checkAccessToken();\n\n\n/*** End of OAuth Authorisation testing ***/\n/* Once we've got the token and token secret and stored them somewhere safe, we need to pull them into phpSmug\n   before we can go any further.\n\n   This is a good step for an example file showing developers how to use OAuth for their apps.\n\n   As the token and token secret don't change unless the user revokes control, we can effectively store them forever.\n\n   I'm going to define it here statically for testing. If I redo the above section, I need to change this with the new token info.\n   */\n\n// Modify/Public\n$f->setToken('id=42f12726ada8e03f7b2988f3a7a2e107', 'Secret=4c7765f67a6cd16a2ef454c638987948af5d8791ade8081386b1ed7eae321983');\n//$d = $f->auth_checkAccessToken();\n//$f->setSecureOnly();\n//$d = $f;\n/* Albums */\n//$d = $f->albums_get(\"Extras=SquareThumbs,Title\");\n//$d = $f->albums_get();\n//$d = $f->albums_get(\"NickName=colinseymour\");\n//$d = $f->albums_get();\n// THIS two tests run in close succession cause an invalidation of my token because of a signature error.\n//$d = $f->albums_get('Heavy=1');\n//$d = $f->albums_get(array('Extras' => 'External'));\n//$d = $f->albums_get(array( 'Extras' => 'EXIF,Description,Keywords', 'Associative' => '' ));\n//$d = $f->albums_getInfo(\"AlbumID=9294332\", \"AlbumKey=RWFZX\" );\n$d = $f->albums_browse(\"AlbumID=9294332\", \"AlbumKey=RWFZX\");\n//$d = $f->albums_getStats(\"AlbumID={$d[0]['id']}\", \"Month=09\", \"Year=2007\");\n//$f->debug(memory_get_peak_usage()/1024);\n/* *\n$optargs = array( \"Description\" => \"This is an old descriptions changed using the API\",\n \t\t\t\t  \"Keywords\" => \"test album api\",\n\t\t\t\t  \"Public\" => 0,\n\t\t\t\t  \"TemplateID\" => 10,\n\t\t\t\t  \"CategoryID\" => 0);\n$d = $f->albums_create('Title=Test Album', $optargs);\n /* */\n//$d = $f->albums_changeSettings(\"AlbumID={$d[0]['id']}\", \"Password=\");\n//$d = $f->albums_changeSettings(\"AlbumID={$d[0]['id']}\", \"SortMethod=DateTimeOriginal\");\n//$d = $f->albums_reSort(\"AlbumID={$d[0]['id']}\", \"By=FileName\", \"Direction=DESC\");\n\n//$d = $f->albums_delete(3612604);\n//$d = $f->albums_applyWatermark(\"AlbumID=5852428\", \"WatermarkID=50275\");\n//$d = $f->albums_getInfo(\"AlbumID=5693084\", \"AlbumKey=kfzFY\");\n//$d = $f->albums_removeWatermark(4644971);\n\n/* Albumtemplates */\n//$d = $f->albumtemplates_get();\n/* $optargs = array(\n\tAlbumTemplateName => \"Created with API\",\n\tTemplateID => 10,\n\tSortMethod => \"Position\",\n\tSortDirection => FALSE,\n\tPublic => TRUE,\n\tPassword => \"blah\",\n\tPasswordHint => \"blah blah blah\",\n\tPrintable => TRUE,\n\tHeader => TRUE,\n\tFilenames => TRUE,\n\tComments => TRUE,\n\tExternal => TRUE,\n\tOriginals => TRUE,\n\tLarges => TRUE,\n\tClean => TRUE,\n\tEXIF => TRUE,\n\tShare => TRUE,\n\tProtected => TRUE,\n\tWatermarking => TRUE,\n\tWatermarkID => 3612760,\n\tFriendEdit => TRUE,\n\tFamilyEdit => TRUE,\n\tHideOwner => TRUE,\n\tDefaultColor => TRUE,\n\tGeography => TRUE,\n\tCanRank => TRUE,\n\tProofDays => 7,\n\tBackprinting => \"Arse\",\n\tSmugSearchable => TRUE,\n\tWorldSearchable => TRUE); */\n\n//$d = $f->albumtemplates_create($optargs);\n//$d = $f->albumtemplates_changeSettings(51900, $optargs);\n\n/* Categories */\n//$d = $f->categories_get();\n\n//$d = $f->categories_create(\"Name=TestCat\");\n//$d = $f->categories_rename(\"CategoryID={$d}\", \"Name=NewCatName\");\n//$d = $f->categories_delete(197416);\n\n/* Communities */\n\n/* Family */\n//$d = $f->family_get();\t\t// Needs testing\n\n/* Friends */\n//$d = $f->friends_get();\t\t// Needs more testing\n\n/* Images */\n//$d = $f->images_get(\"AlbumID={$d[49]['id']}\", \"AlbumKey={$d[49]['Key']}\", \"Heavy=true\");\n//$d = $f->images_get(\"AlbumID={$d[49]['id']}\", \"AlbumKey={$d[49]['Key']}\", \"Extras=FileName,Hidden,Caption,Format,TinyURL,SmallURL,ThumbURL,MediumURL,LargeURL,XLargeURL,X2LargeURL,X3LargeURL,OriginalURL,Width,Height,Video320URL,Video640URL,Video960URL,Video1280URL,Video1920URL\");\n//$d = $d['Images'];\n//$d = $f->images_get(\"AlbumID=12616891\", \"AlbumKey=wCote\", \"Heavy=1\");\n//$d = $f->images_get(\"AlbumID=6828068\", \"AlbumKey=4uMym\", \"Heavy=1\");\n//$d = $f->images_get(array( \"AlbumID\" => \"23039193\", \"AlbumKey\" => \"m98pLs\", \"Heavy\" => 1 ) );\n//$d = $f->images_getURLs(\"ImageID=1385923576\", \"ImageKey=XbGbzgG\");\n//$d = $f->signResource( $d['TinyURL'] ); // TODO: bung in a URL here\n//$d = $f->images_getEXIF(205645237);\n//$d = $f->images_getInfo(\"ImageID=762469124\", \"ImageKey=E2RAR\", 'Heavy=TRUE');\n//$d = $f->images_getStats(205645237, 10, 2007);\n//$d = $f->images_applyWatermark(\"ImageID=363248964\", \"WatermarkID=50275\");\n//$d = $f->images_getInfo(\"ImageID=792528962\", \"ImageKey=krBTe\", 'Heavy=TRUE');\n//$d = $f->images_getPricing(\"ImageID={$d['0']['id']}\");\n//$d = $f->images_removeWatermark(\"ImageID=351003540\", \"Strict=1\");\n//$d = $f->images_changePosition(311875926, 2);\n//$d = $f->images_changeSettings(311924021, '', \"1New title1\");\n//$d = $f->images_rotate(\"ImageID=794556056\", \"Degrees=270\");\n//$d = $f->images_crop( array( 'ImageID' => 762423766, 'Height' => 490, 'Width' => 490, 'X' => 260, 'Y' => 260 ) );\n//$d = $f->images_delete(206851703);\n//$d = $f->images_zoomThumbnail(\"ImageID=351014162\", \"Height=50\", \"Width=50\", \"X=10\", \"Y=10\");\n// 2$a = $d;\n//$d = $f->images_upload(\"AlbumID=23516228\", \"File=../tests/testimg.jpg\");\n//$d = $f->images_upload(\"AlbumID={$a['id']}\", \"File=../tests/testimg.jpg\");\n//$d = $f->images_get(\"AlbumID={$a['id']}\", \"AlbumKey={$a['Key']}\");\n\n//$d = $f->images_uploadFromURL(3612760, \"http://www.colinseymour.co.uk/blog/wp-content/uploads/2007/09/happybirthday.jpg\", \"Happy Birthday\", \"birthday card pic\");\n\n/* Orders */\n\n/* Propricing */\n//$d = $f->propricing_setAlbum(\"AlbumID=5693084\", \"Price=10.99\", \"Strict=1\", \"ProductID=10040\");\n//$d = $f->propricing_getAlbum(\"AlbumID=5693084\");\n//$d = $f->propricing_setPortfolio(\"Price=1.99\");\n//$d = $f->propricing_getPortfolio();\n\n/* ShareGroups */\n//$d = $f->sharegroups_create( \"Name=TestShareGroup\", \"AccessPassworded=TRUE\", \"Password=foo\", \"PasswordHint=bar\" );\n//$d = $f->sharegroups_get(\"Heavy=TRUE\");\n//$d = $f->sharegroups_getInfo(32118);\n//$d = $f->sharegroups_create(\"ShareGroup222222\", \"This is another share group, but this time created by the API\", \"ColsShare\");\n//$d = $f->sharegroups_addAlbum(32224, 3612760);\n//$d = $f->sharegroups_delete(32221);\n//$d = $f->sharegroups_removeAlbum(32118, 3312584);\n//$d = $f->sharegroups_albums_get( \"ShareGroupTag=uvFY9LHC5Ks2s\" );\n\n/* Subcategories */\n//$d = $f->subcategories_get();\n//$d = $f->subcategories_getAll();\n//$d = $f->subcategories_rename(392595, \"Doogs\");\n//$d = $f->subcategories_create(\"Cats\", 1);\n//$d = $f->subcategories_delete(392603);\n\n/* Themes */\n//$d = $f->themes_get();\n\n/* Styles */\n//$d = $f->styles_getTemplates();\n\n/* Users */\n//$d = $f->users_getTree('NickName=colinseymour', \"Heavy=true\");\n//$d = $f->users_getTree('LastUpdated,Title', '', FALSE);\n//$d = $f->users_getTree('', \"colinseymour\", TRUE, array('XP1Z2N9l4zbWo', '1PfrfCQ4PyT1c'));\n//$d = $f->users_getTransferStats(09, 2007);\n//$d = $f->users_getDisplayName(\"NickName=colinseymour\");\n\n/* Watermarks */\n//$d = $f->watermarks_get();\n//$d = $f->watermarks_getInfo(\"WatermarkID={$d['id']}\");\n//$d = $f->watermarks_changeSettings(23596, \"Starry\", \"Tile\", 60, FALSE);\n//$d = $f->watermarks_delete(23792);\n//$d = $f->watermarks_create(307118515, 'Test Watermark', 'BottomRight', 50, TRUE);\n//$d = $f->watermarks_create(\"ImageID=307118515\", 'Name=Test Watermark', 'Pinned=BottomRight', 'Dissolve=10', 'Thumbs=TRUE');\n\n\n/******** NOT TESTED YET ********/\n\n//$d = $f->albumtemplates_delete(51892);\t// Not yet implemented in API\n\n//$d = $f->communities_get();\t\t// Not completely implemented in API\n//$d = $f->communities_getAvailable();\t\t// Not Yet implemented in API\n//$d = $f->communities_join(1781); //Not implemented in API yet\n//$d = $f->communities_leave(1781); //Not implemented in API yet\n//$d = $f->communities_leaveAll(); //Not implemented in API yet\n\n//$d = $f->images_pricing_get(205645237);  // Not yet implemented by API\n\n//$d = $f->orders_get(); \t// Not yet implemented in API\n\n//$d = $f->sharegroups_changeSettings(32221, \"ShareGroup111\");  // Not yet implemented in API\n//$d = $f->reflection_getMethods();\n//$d = $f->reflection_getMethodInfo('MethodName=smugmug.albums.reSort');\n//$d = $d['Response'];\n//$d = $d['Response']['Properties'][0]['Elements'][0]['Members'];\n//$d = $d['Response']['Properties'][0]['Members'];\n\n\necho \"<pre>\";\n//print_r($d);\nphpSmug::debug($d);\necho \"</pre>\";\n//$d = 'http://colinseymour.smugmug.com/photos/i-XbGbzgG/0/L/i-XbGbzgG-L.jpg';\n//echo '<img src=\"'.$d.'\"/>';\n\n\n$time = microtime();\n$time = explode(\" \", $time);\n$time = $time[1] + $time[0];\n$finish = $time;\n$totaltime = ($finish - $start);\nprintf (\"This page took %f seconds to load.\", $totaltime);\n\n\n}\ncatch (Exception $e) {\n\tphpSmug::debug($e);\n}\n\n\n?>\n<html><head><title>Title</title></head>\n\t<body>\n\t\t<?php foreach ( $d['Images'] as $img ) {\n\t\t\techo \"<img src='{$img['ThumbURL']}' />\";\n\t\t} ?>\n\t</body>\n</html>\n","markerStore":{"nextMarkerId":338,"markersById":{"0":{"range":{"start":{"row":32,"column":0},"end":{"row":32,"column":0}},"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"193":{"range":{"start":{"row":138,"column":22},"end":{"row":138,"column":60}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false},"232":{"range":{"start":{"row":138,"column":22},"end":{"row":138,"column":58}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false},"252":{"range":{"start":{"row":138,"column":23},"end":{"row":138,"column":57}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false},"319":{"range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"320":{"range":{"start":{"row":6,"column":0},"end":{"row":7,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"321":{"range":{"start":{"row":32,"column":0},"end":{"row":33,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"322":{"range":{"start":{"row":34,"column":0},"end":{"row":35,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"323":{"range":{"start":{"row":115,"column":0},"end":{"row":116,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"324":{"range":{"start":{"row":117,"column":0},"end":{"row":118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"325":{"range":{"start":{"row":119,"column":0},"end":{"row":120,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"326":{"range":{"start":{"row":138,"column":0},"end":{"row":139,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"327":{"range":{"start":{"row":146,"column":0},"end":{"row":148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"328":{"range":{"start":{"row":160,"column":0},"end":{"row":161,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"329":{"range":{"start":{"row":170,"column":0},"end":{"row":171,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"330":{"range":{"start":{"row":217,"column":0},"end":{"row":219,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"331":{"range":{"start":{"row":280,"column":0},"end":{"row":281,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"332":{"range":{"start":{"row":282,"column":0},"end":{"row":283,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"333":{"range":{"start":{"row":324,"column":0},"end":{"row":325,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"334":{"range":{"start":{"row":329,"column":0},"end":{"row":330,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false}},"version":2},"history":{"version":3,"nextCheckpointId":64,"undoStack":[{"type":"group-start","snapshot":{"0":{"range":[[34,0],[34,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[34,0],[34,0]],"newRange":[[34,0],[34,1]],"oldText":"","newText":"/"}},{"type":"change","content":{"oldRange":[[34,1],[34,1]],"newRange":[[34,1],[34,2]],"oldText":"","newText":"/"}},{"type":"group-end","snapshot":{"0":{"range":[[34,2],[34,2]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[137,2],[137,2]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[137,1],[137,2]],"newRange":[[137,1],[137,1]],"oldText":"/","newText":""}},{"type":"change","content":{"oldRange":[[137,0],[137,1]],"newRange":[[137,0],[137,0]],"oldText":"/","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[137,0],[137,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[137,0],[137,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[328,0],[328,4]],"newRange":[[328,0],[328,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[323,1],[323,2]],"newRange":[[323,1],[323,1]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[281,83],[281,84]],"newRange":[[281,83],[281,83]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[279,73],[279,74]],"newRange":[[279,73],[279,73]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[169,19],[169,20]],"newRange":[[169,19],[169,19]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[159,20],[159,21]],"newRange":[[159,20],[159,20]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[146,53],[146,54]],"newRange":[[146,53],[146,53]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[145,25],[145,26]],"newRange":[[145,25],[145,25]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[119,0],[119,3]],"newRange":[[119,0],[119,0]],"oldText":"   ","newText":""}},{"type":"change","content":{"oldRange":[[117,0],[117,3]],"newRange":[[117,0],[117,0]],"oldText":"   ","newText":""}},{"type":"change","content":{"oldRange":[[115,0],[115,3]],"newRange":[[115,0],[115,0]],"oldText":"   ","newText":""}},{"type":"change","content":{"oldRange":[[6,70],[6,71]],"newRange":[[6,70],[6,70]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[3,71],[3,72]],"newRange":[[3,71],[3,71]],"oldText":" ","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[137,0],[137,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[216,0],[216,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[216,0],[216,0]],"newRange":[[216,0],[216,1]],"oldText":"","newText":"/"}},{"type":"change","content":{"oldRange":[[216,1],[216,1]],"newRange":[[216,1],[216,2]],"oldText":"","newText":"/"}},{"type":"group-end","snapshot":{"0":{"range":[[216,2],[216,2]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[217,0],[217,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[217,0],[217,0]],"newRange":[[217,0],[217,1]],"oldText":"","newText":"/"}},{"type":"change","content":{"oldRange":[[217,1],[217,1]],"newRange":[[217,1],[217,2]],"oldText":"","newText":"/"}},{"type":"group-end","snapshot":{"0":{"range":[[217,2],[217,2]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[137,62],[137,62]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[137,62],[137,62]],"newRange":[[137,62],[138,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[138,0],[138,0]],"newRange":[[138,0],[138,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[138,0],[138,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,0],[138,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,0],[138,0]],"newRange":[[138,0],[138,1]],"oldText":"","newText":"$"}},{"type":"group-end","snapshot":{"0":{"range":[[138,1],[138,1]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,1],[138,1]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,1],[138,1]],"newRange":[[138,1],[138,2]],"oldText":"","newText":"d"}},{"type":"group-end","snapshot":{"0":{"range":[[138,2],[138,2]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,2],[138,2]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,2],[138,2]],"newRange":[[138,2],[138,3]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[138,3],[138,3]],"newRange":[[138,3],[138,4]],"oldText":"","newText":"="}},{"type":"change","content":{"oldRange":[[138,4],[138,4]],"newRange":[[138,4],[138,5]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"0":{"range":[[138,5],[138,5]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,5],[138,5]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,5],[138,5]],"newRange":[[138,5],[138,6]],"oldText":"","newText":"$"}},{"type":"change","content":{"oldRange":[[138,6],[138,6]],"newRange":[[138,6],[138,7]],"oldText":"","newText":"f"}},{"type":"group-end","snapshot":{"0":{"range":[[138,7],[138,7]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,7],[138,7]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,7],[138,7]],"newRange":[[138,7],[138,8]],"oldText":"","newText":"-"}},{"type":"group-end","snapshot":{"0":{"range":[[138,8],[138,8]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,8],[138,8]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,8],[138,8]],"newRange":[[138,8],[138,9]],"oldText":"","newText":">"}},{"type":"group-end","snapshot":{"0":{"range":[[138,9],[138,9]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,9],[138,9]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,9],[138,9]],"newRange":[[138,9],[138,10]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[138,10],[138,10]],"newRange":[[138,10],[138,11]],"oldText":"","newText":"l"}},{"type":"change","content":{"oldRange":[[138,11],[138,11]],"newRange":[[138,11],[138,12]],"oldText":"","newText":"b"}},{"type":"change","content":{"oldRange":[[138,12],[138,12]],"newRange":[[138,12],[138,13]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[138,13],[138,13]],"newRange":[[138,13],[138,14]],"oldText":"","newText":"m"}},{"type":"change","content":{"oldRange":[[138,14],[138,14]],"newRange":[[138,14],[138,15]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[138,15],[138,15]],"newRange":[[138,15],[138,16]],"oldText":"","newText":"_"}},{"type":"group-end","snapshot":{"0":{"range":[[138,16],[138,16]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,16],[138,16]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,16],[138,16]],"newRange":[[138,16],[138,17]],"oldText":"","newText":"b"}},{"type":"change","content":{"oldRange":[[138,17],[138,17]],"newRange":[[138,17],[138,18]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[138,18],[138,18]],"newRange":[[138,18],[138,19]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[138,19],[138,19]],"newRange":[[138,19],[138,20]],"oldText":"","newText":"w"}},{"type":"change","content":{"oldRange":[[138,20],[138,20]],"newRange":[[138,20],[138,21]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[138,21],[138,21]],"newRange":[[138,21],[138,22]],"oldText":"","newText":"e"}},{"type":"group-end","snapshot":{"0":{"range":[[138,22],[138,22]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,22],[138,22]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,22],[138,22]],"newRange":[[138,22],[138,23]],"oldText":"","newText":"*"}},{"type":"group-end","snapshot":{"0":{"range":[[138,23],[138,23]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,23],[138,23]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,23],[138,23]],"newRange":[[138,23],[138,25]],"oldText":"","newText":"()"}},{"type":"group-end","snapshot":{"0":{"range":[[138,25],[138,25]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,24],[138,24]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,23],[138,24]],"newRange":[[138,23],[138,23]],"oldText":"(","newText":""}},{"type":"change","content":{"oldRange":[[138,23],[138,24]],"newRange":[[138,23],[138,23]],"oldText":")","newText":""}},{"type":"change","content":{"oldRange":[[138,22],[138,23]],"newRange":[[138,22],[138,22]],"oldText":"*","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[138,22],[138,22]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,22],[138,22]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,22],[138,22]],"newRange":[[138,22],[138,24]],"oldText":"","newText":"()"}},{"type":"group-end","snapshot":{"0":{"range":[[138,24],[138,24]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,23],[138,23]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,23],[138,23]],"newRange":[[138,23],[138,25]],"oldText":"","newText":"\"\""}},{"type":"group-end","snapshot":{"0":{"range":[[138,25],[138,25]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,24],[138,24]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,24],[138,24]],"newRange":[[138,24],[138,57]],"oldText":"","newText":"AlbumID=9294332\", \"AlbumKey=RWFZX"}},{"type":"group-end","snapshot":{"0":{"range":[[138,57],[138,57]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[138,59],[138,59]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[138,59],[138,59]],"newRange":[[138,59],[138,60]],"oldText":"","newText":";"}},{"type":"group-end","snapshot":{"0":{"range":[[138,60],[138,60]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[137,0],[137,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[137,0],[137,0]],"newRange":[[137,0],[137,1]],"oldText":"","newText":"/"}},{"type":"change","content":{"oldRange":[[137,1],[137,1]],"newRange":[[137,1],[137,2]],"oldText":"","newText":"/"}},{"type":"group-end","snapshot":{"0":{"range":[[137,2],[137,2]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[32,2],[32,2]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[32,1],[32,2]],"newRange":[[32,1],[32,1]],"oldText":"/","newText":""}},{"type":"change","content":{"oldRange":[[32,0],[32,1]],"newRange":[[32,0],[32,0]],"oldText":"/","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[32,0],[32,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/lildude/Sites/phpSmug3/admin/test.php","digestWhenLastPersisted":"897a515ac50223db831ebc3424669fb74ca6c7b6","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"<?php\n/**\n * phpSmug - phpSmug is a PHP wrapper class for the SmugMug API. The intention\n *\t\t     of this class is to allow PHP application developers to quickly\n *\t\t\t and easily interact with the SmugMug API in their applications,\n *\t\t\t without having to worry about the finer details of the API.\n *\n * @author Colin Seymour <lildood@gmail.com>\n * @version 3.5\n * @package phpSmug\n * @license GPL 3 {@link http://www.gnu.org/copyleft/gpl.html}\n * @copyright Copyright (c) 2008 Colin Seymour\n *\n * This file is part of phpSmug.\n *\n * phpSmug is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * phpSmug is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with phpSmug.  If not, see <http://www.gnu.org/licenses/>.\n *\n *\n * For more information about the class and upcoming tools and toys using it,\n * visit {@link http://phpsmug.com/}.\n *\n * For installation and usage instructions, open the README.txt file\n * packaged with this class. If you don't have a copy, you can refer to the\n * documentation at:\n *\n *          {@link http://phpsmug.com/docs/}\n *\n * phpSmug is inspired by phpFlickr 2.1.0 ({@link http://www.phpflickr.com}) by Dan Coulter\n *\n * Please help support the maintenance and development of phpSmug by making\n * a donation ({@link http://phpsmug.com/donate/}).\n **/\n\n/**\n * We define our own exception so application developers can differentiate these\n * from other exceptions.\n */\nclass PhpSmugException extends Exception {}\n\n/**\n * phpSmug - all of the phpSmug functionality is provided in this class\n *\n * @package phpSmug\n **/\nclass phpSmug {\n\tstatic $version = '3.5';\n\tprivate $cacheType = FALSE;\n\tvar $SessionID;\n\tvar $loginType;\n\tvar $OAuthSecret;\n\tvar $oauth_signature_method;\n\tvar $cache_expire = 3600;\n\tvar $oauth_token_secret;\n\tvar $oauth_token;\n\tvar $mode;\n\tprivate $secure = false;\n\tprivate $adapter = 'curl';\n\n\t/**\n     * When your database cache table hits this many rows, a cleanup\n     * will occur to get rid of all of the old rows and cleanup the\n     * garbage in the table.  For most personal apps, 1000 rows should\n     * be more than enough.  If your site gets hit by a lot of traffic\n     * or you have a lot of disk space to spare, bump this number up.\n     * You should try to set it high enough that the cleanup only\n     * happens every once in a while, so this will depend on the growth\n     * of your table.\n     *\n     * @var integer\n     **/\n    var $max_cache_rows = 1000;\n\n\t/**\n\t * Constructor to set up a phpSmug instance.\n\t *\n\t * The Application Name (AppName) is not obligatory, but it helps\n\t * SmugMug diagnose any problems users of your application may encounter.\n\t * If you're going to use this, please use a string and include your\n\t * version number and URL as follows.\n\t * For example \"My Cool App/1.0 (http://my.url.com)\"\n\t *\n\t * The API Key must be set before any calls can be made.  You can\n     * get your own at {@link http://www.smugmug.com/hack/apikeys}\n     *\n     * By default phpSmug will use the latest stable API endpoint, but\n     * you can over-ride this when instantiating the instance.\n\t *\n\t * @return\tvoid\n\t * @param\tstring\t$APIKey SmugMug API key. You can get your own from {@link http://www.smugmug.com/hack/apikeys}\n\t * @param\tstring\t$OAuthSecret SmugMug OAuth Secret. This is only needed if\n\t *\t\t\t\t\tyou wish to use OAuth for authentication. Do NOT include\n\t *\t\t\t\t\tthis parameter if you are NOT using OAuth.\n\t * @param\tstring\t$AppName (Optional) Name and version information of your\n\t *\t\t\t\t\tapplication in the form \"AppName/version (URI)\"\n\t *\t\t\t\t\te.g. \"My Cool App/1.0 (http://my.url.com)\".\n\t *\t\t\t\t\tThis isn't obligatory, but it helps SmugMug diagnose any\n\t *\t\t\t\t\tproblems users of your application may encounter.\n\t * @param\tstring\t$APIVer (Optional) API endpoint you wish to use.\n\t *\t\t\t\t\tDefaults to 1.2.2\n\t **/\n\tfunction __construct()\n\t{\n\t\t$args = phpSmug::processArgs( func_get_args() );\n        $this->APIKey = $args['APIKey'];\n\t\tif ( array_key_exists( 'OAuthSecret', $args ) ) {\n\t\t\t$this->OAuthSecret = $args['OAuthSecret'];\n\t\t\t// Force 1.2.2 endpoint as OAuth is being used.\n\t\t\t$this->APIVer = '1.2.2';\n\t\t}\n\t\t// Over ride the above if an APIVer is provided.  This is only needed to keep support for 1.2.1 and lower APIs.\n\t\t$this->APIVer = ( array_key_exists( 'APIVer', $args ) ) ? $args['APIVer'] : '1.2.2';\n\n\t\t// Set the Application Name\n\t\t$this->AppName = ( array_key_exists( 'AppName', $args ) ) ?  $args['AppName'] : 'Unknown Application';\n\n\t\t// All calls to the API are done via POST using my own constructed httpRequest class\n\t\t$this->req = new httpRequest();\n\t\t$this->req->setConfig( array( 'adapter' => $this->adapter, 'follow_redirects' => TRUE, 'max_redirects' => 3, 'ssl_verify_peer' => FALSE, 'ssl_verify_host' => FALSE, 'connect_timeout' => 60 ) );\n\t\t$this->req->setHeader( array( 'User-Agent' => \"{$this->AppName} using phpSmug/\" . phpSmug::$version, 'Content-Type' => 'application/x-www-form-urlencoded' ) );\n    }\n\n\t/**\n\t * General debug function used for testing and development of phpSmug.\n\t *\n\t * Feel free to use this in your own application development.\n\t *\n\t * @static\n\t * @access\tpublic\n\t * @param\tmixed\t\t$var Any string, object or array you want to display\n\t * @param\tboolean\t\t$echo Print the output or not.  This is only really used\n\t *\t\t\t\t\t\tfor unit testing.\n\t * @return string\n\t **/\n\tpublic static function debug( $var, $echo = TRUE )\n\t{\n\t\tob_start();\n\t\t$out = '';\n\t\techo '<pre>Debug:';\n\t\tif ( is_array( $var ) || is_object( $var ) ) { print_r( $var ); } else { echo $var; }\n\t\techo '</pre>';\n\t\tif ( $echo ) { ob_end_flush(); } else { $out = ob_get_clean(); }\n\t\treturn $out;\n\t}\n\n\t/**\n\t * Function enables caching.\n\t *\n\t * Params can be passed as an associative array or a set of param=value strings.\n\t *\n\t * phpSmug uses the PEAR MDB2 module to interact with the database. You will\n\t * need to install PEAR, the MDB2 module and corresponding database driver yourself\n\t * in order to use database caching.\n\t *\n\t * @access\tpublic\n\t * @param\tstring\t\t$type The type of cache to use. It must be either\n\t *\t\t\t\t\t\t\"db\" (for database caching) or \"fs\" (for filesystem).\n\t * @param\tstring\t\t$dsn When using type \"db\", this must be a PEAR::MDB2\n\t *\t\t\t\t\t\tconnection string eg. \"mysql://user:password@server/database\".\n\t *\t\t\t\t\t\tThis option is not used for type \"fs\".\n\t * @param\tstring\t\t$cache_dir When using type \"fs\", this is the directory\n\t *\t\t\t\t\t\tto use for caching. This directory must exist and be\n\t *\t\t\t\t\t\twritable by the web server. Use absolute paths for\n\t *\t\t\t\t\t\tbest results.  Relative paths may have unexpected\n\t *\t\t\t\t\t\tbehavior when you include this.  They'll usually work,\n\t *\t\t\t\t\t\tyou'll just want to test them.\n\t * @param\tinteger\t\t$cache_expire Cache timeout in seconds. This defaults\n\t *\t\t\t\t\t\tto 3600 seconds (1 hour) if not specified.\n\t * @param\tstring\t\t$table If using type \"db\", this is the database table\n\t *\t\t\t\t\t\tname that will be used.  Defaults to \"phpsmug_cache\".\n\t * @return\tmixed\t\tReturns TRUE if caching is enabled successfully, else\n\t *\t\t\t\t\t\treturns an error and disables caching.\n\t **/\n\tpublic function enableCache()\n\t{\n\t\t$args = phpSmug::processArgs( func_get_args() );\n\t\t$this->cacheType = $args['type'];\n\n\t\t$this->cache_expire = ( array_key_exists( 'cache_expire', $args ) ) ? $args['cache_expire'] : '3600';\n\t\t$this->cache_table  = ( array_key_exists( 'table', $args ) ) ? $args['table'] : 'phpsmug_cache';\n\n        if ( $this->cacheType == 'db' ) {\n    \t\trequire_once 'MDB2.php';\n\n\t\t\t$db =& MDB2::connect( $args['dsn'] );\n\t\t\tif ( PEAR::isError( $db ) ) {\n\t\t\t\t$this->cacheType = FALSE;\n\t\t\t\treturn \"CACHING DISABLED: {$db->getMessage()} {$db->getUserInfo()} ({$db->getCode()})\";\n\t\t\t}\n\t\t\t$this->cache_db = $db;\n\n\t\t\t$options = array( 'comment' => 'phpSmug cache', 'charset' => 'utf8', 'collate' => 'utf8_unicode_ci' );\n\t\t\t$fields = array( 'request' => array( 'type' => 'text', 'length' => '35', 'notnull' => TRUE ),\n\t\t\t\t\t\t\t 'response' => array( 'type' => 'clob', 'notnull' => TRUE ),\n\t\t\t\t\t\t\t 'expiration' => array( 'type' => 'integer', 'notnull' => TRUE )\n\t\t\t\t\t\t   );\n\t\t\t$db->loadModule('Manager');\n\t\t\t$db->createTable( $this->cache_table, $fields, $options );\n\t\t\t$db->setOption('idxname_format', '%s'); // Make sure index name doesn't have the prefix\n\t\t\t$db->createIndex( $this->cache_table, 'request', array( 'fields' => array( 'request' => array() ) ) );\n\n            if ( $db->queryOne( \"SELECT COUNT(*) FROM $this->cache_table\") > $this->max_cache_rows ) {\n\t\t\t\t$diff = time() - $this->cache_expire;\n                $db->exec( \"DELETE FROM {$this->cache_table} WHERE expiration < {$diff}\" );\n                $db->query( 'OPTIMIZE TABLE ' . $this->cache_table );\n            }\n        } elseif ( $this->cacheType ==  'fs' ) {\n\t\t\tif ( file_exists( $args['cache_dir'] ) && ( is_dir( $args['cache_dir'] ) ) ) {\n\t\t\t\t$this->cache_dir = realpath( $args['cache_dir'] ).'/phpSmug/';\n\t\t\t\tif ( is_writeable( realpath( $args['cache_dir'] ) ) ) {\n\t\t\t\t\tif ( !is_dir( $this->cache_dir ) ) {\n\t\t\t\t\t\tmkdir( $this->cache_dir, 0755 );\n\t\t\t\t\t}\n\t\t\t\t\t$dir = opendir( $this->cache_dir );\n                \twhile ( $file = readdir( $dir ) ) {\n                    \tif ( substr( $file, -6 ) == '.cache' && ( ( filemtime( $this->cache_dir . '/' . $file ) + $this->cache_expire ) < time() ) ) {\n                        \tunlink( $this->cache_dir . '/' . $file );\n                    \t}\n                \t}\n\t\t\t\t} else {\n\t\t\t\t\t$this->cacheType = FALSE;\n\t\t\t\t\treturn 'CACHING DISABLED: Cache Directory \"'.$args['cache_dir'].'\" is not writeable.';\n\t\t\t\t}\n\t\t\t} else \t{\n\t\t\t\t$this->cacheType = FALSE;\n\t\t\t\treturn 'CACHING DISABLED: Cache Directory \"'.$args['cache_dir'].'\" doesn\\'t exist, is a file or is not readable.';\n\t\t\t}\n\t\t}\n\t\treturn (bool) TRUE;\n    }\n\n\t/**\n\t * \tChecks the database or filesystem for a cached result to the request.\n\t *\n\t * @access\tprivate\n\t * @return\tmixed\t\tUnparsed serialized PHP, or FALSE\n\t * @param\tarray\t\t$request Request to the SmugMug created by one of the later functions in phpSmug.\n\t **/\n    private function getCached( $request )\n\t{\n\t\t$request['SessionID']       = ''; // Unset SessionID\n\t\t$request['oauth_nonce']     = '';     // --\\\n\t\t$request['oauth_signature'] = '';  //    |-Unset OAuth info\n\t\t$request['oauth_timestamp'] = ''; // --/\n       \t$reqhash = md5( serialize( $request ).$this->loginType );\n\t\t$expire = ( strpos( $request['method'], 'login.with' ) ) ? 21600 : $this->cache_expire;\n\t\t$diff = time() - $expire;\n\n\t\tif ( $this->cacheType == 'db' ) {\n\t\t\t$result = $this->cache_db->queryOne( 'SELECT response FROM ' . $this->cache_table . ' WHERE request = ' . $this->cache_db->quote( $reqhash ) . ' AND ' . $this->cache_db->quote( $diff ) . ' < expiration' );\n\t\t\tif ( PEAR::isError( $result ) ) {\n\t\t\t\tthrow new PhpSmugException( $result );\n\t\t\t}\n\t\t\tif ( !empty( $result ) ) {\n                return $result;\n            }\n        } elseif ( $this->cacheType == 'fs' ) {\n            $file = $this->cache_dir . '/' . $reqhash . '.cache';\n\t\t\tif ( file_exists( $file ) && ( ( filemtime( $file ) + $expire ) > time() ) ) {\n\t\t\t\t\treturn file_get_contents( $file );\n            }\n        }\n    \treturn FALSE;\n    }\n\n\t/**\n\t * Caches the unparsed serialized PHP of a request.\n\t *\n\t * @access\tprivate\n\t * @param\tarray\t\t$request Request to the SmugMug created by one of the\n\t *\t\t\t\t\t\tlater functions in phpSmug.\n\t * @param\tstring\t\t$response Response from a successful request() method\n\t *\t\t\t\t\t\tcall.\n\t * @return\tnull|TRUE\n\t **/\n    private function cache( $request, $response )\n\t{\n\t\t$request['SessionID']       = ''; // Unset SessionID\n\t\t$request['oauth_nonce']     = ''; // --\\\n\t\t$request['oauth_signature'] = ''; //    |-Unset OAuth info\n\t\t$request['oauth_timestamp'] = ''; // --/\n\t\tif ( ! strpos( $request['method'], '.auth.' ) ) {\n\t\t\t$reqhash = md5( serialize( $request ).$this->loginType );\n\t\t\tif ( $this->cacheType == 'db' ) {\n\t\t\t\tif ( $this->cache_db->queryOne( \"SELECT COUNT(*) FROM {$this->cache_table} WHERE request = '$reqhash'\" ) ) {\n\t\t\t\t\t$sql = 'UPDATE ' . $this->cache_table . ' SET response = '. $this->cache_db->quote( $response ) . ', expiration = ' . $this->cache_db->quote( time() ) . ' WHERE request = ' . $this->cache_db->quote( $reqhash ) ;\n\t\t\t\t\t$result = $this->cache_db->exec( $sql );\n\t\t\t\t} else {\n\t\t\t\t\t$sql = 'INSERT INTO ' . $this->cache_table . ' (request, response, expiration) VALUES (' . $this->cache_db->quote( $reqhash ) .', ' . $this->cache_db->quote( strtr( $response, \"'\", \"\\'\" ) ) . ', ' . $this->cache_db->quote( time() ) . ')';\n\t\t\t\t\t$result = $this->cache_db->exec( $sql );\n\t\t\t\t}\n\t\t\t\tif ( PEAR::isError( $result ) ) {\n\t\t\t\t\t// TODO: Create unit test for this\n\t\t\t\t\tthrow new PhpSmugException( $result );\n\t\t\t\t}\n\t\t\t\treturn $result;\n\t\t\t} elseif ( $this->cacheType == 'fs' ) {\n\t\t\t\t$file = $this->cache_dir . '/' . $reqhash . '.cache';\n\t\t\t\t$fstream = fopen( $file, 'w' );\n\t\t\t\t$result = fwrite( $fstream,$response );\n\t\t\t\tfclose( $fstream );\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t}\n        return TRUE;\n    }\n\n\t/**\n\t * Forcefully clear the cache.\n\t *\n\t * This is useful if you've made changes to your SmugMug galleries and want\n\t * to ensure the changes are reflected by your application immediately.\n\t *\n\t * @access\tpublic\n\t * @param\tboolean\t\t$delete Set to TRUE to delete the cache after\n\t *\t\t\t\t\t\tclearing it\n\t * @return\tboolean\n\t * @since 1.1.7\n\t **/\n    public function clearCache( $delete = FALSE )\n\t{\n\t\t$result = FALSE;\n   \t\tif ( $this->cacheType == 'db' ) {\n\t\t\tif ( $delete ) {\n\t\t\t\t$result = $this->cache_db->exec( 'DROP TABLE ' . $this->cache_table );\n\t\t\t} else {\n\t\t\t\t$result = $this->cache_db->exec( 'DELETE FROM ' . $this->cache_table );\n\t\t\t}\n\t\t\tif ( ! PEAR::isError( $result ) ) {\n\t\t\t\t$result = TRUE;\n\t\t\t}\n\t   \t} elseif ( $this->cacheType == 'fs' ) {\n            $dir = opendir( $this->cache_dir );\n\t       \tif ( $dir ) {\n\t\t\t\tforeach ( glob( $this->cache_dir.\"/*.cache\" ) as $filename ) {\n\t\t\t\t\t$result = unlink( $filename );\n\t\t\t\t}\n\t       \t}\n\t\t\tclosedir( $dir );\n\t\t\tif ( $delete ) {\n\t\t\t\t$result = rmdir( $this->cache_dir );\n\t\t\t}\n\t   \t}\n\t\treturn (bool) $result;\n\t}\n\n\t/**\n\t * \tSends a request to SmugMug's PHP endpoint via POST. If we're calling\n\t *  one of the login.with* or auth.get* methods, we'll use the HTTPS end point to ensure\n\t *  things are secure by default\n\t *\n\t * @access\tprivate\n\t * @param\tstring\t\t$command SmugMug API command to call in the request\n\t * @param\tarray\t\t$args optional Array of arguments that form the API call\n\t * @return\tstring\t\tSerialized PHP response from SmugMug, or an error.\n\t **/\n\tprivate function request( $command, $args = array() )\n\t{\n\t\tif ( ( strpos( $command, 'login.with' ) || strpos( $command, 'Token' ) ) || ( $this->oauth_signature_method == 'PLAINTEXT' ) || $this->secure ) {\n\t\t\t$endpoint = \"https://api.smugmug.com/services/api/php/{$this->APIVer}/\";\n\t\t} else {\n\t\t\t$endpoint = \"http://api.smugmug.com/services/api/php/{$this->APIVer}/\";\n\t\t\tif ( ( isset( $this->SessionID ) && is_null( $this->SessionID ) ) && ( !strpos( $command, 'login.anonymously' ) ) && !$this->OAuthSecret ) {\n\t\t\t\tthrow new PhpSmugException( 'Not authenticated. No Session ID or OAuth Token.  Please login or provide an OAuth token.' );\n\t\t\t}\n\t\t}\n\n\t\t$this->req->setURL( $endpoint );\n\n        if ( substr( $command,0,8 ) != 'smugmug.' ) {\n            $command = 'smugmug.' . $command;\n        }\n\n\t\t$defaultArgs = array( 'method' => $command, );\n\t\tif ( is_null( $this->OAuthSecret ) || empty( $this->OAuthSecret ) ) {\n\t\t\t// Use normal login methods\n\t\t\t$defaultArgs = array_merge( $defaultArgs, array( 'APIKey' => $this->APIKey,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'SessionID' => $this->SessionID,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Strict' => 0 )\n\t\t\t\t\t\t\t\t\t   );\n\t\t} else {\n\t\t\t$this->loginType = 'oauth';\n\t\t}\n\n        // Process arguments, including method and login data.\n        $args = array_merge( $defaultArgs, $args );\n\t\t$keys = array_map( array( 'phpSmug', 'urlencodeRFC3986' ), array_keys( $args ) );\n\t\t$values = array_map( array( 'phpSmug', 'urlencodeRFC3986' ), array_values( $args ) );\n\t\t$args = array_combine( $keys, $values );\n        ksort( $args );\n\t\t//\n        if ( !( $this->response = $this->getCached( $args ) ) ) {\n  \t\t\t$this->req->setPostData( $args );\n\t\t\t$this->req->execute();\n\t\t\t$this->response = $this->req->getBody();\n\t\t\t$this->cache( $args, $this->response );\n\t\t}\n\t\t// TODO: Cater for SmugMug being in read-only mode better.  At the moment we throw and exception and don't allow things to continue.\n\t\t$this->parsed_response = unserialize($this->response);\n\t\tif ( $this->parsed_response['stat'] == 'fail' ) {\n\t\t\t$this->error_code = $this->parsed_response['code'];\n            $this->error_msg = $this->parsed_response['message'];\n\t\t\t$this->parsed_response = FALSE;\n\t\t\tthrow new PhpSmugException( \"SmugMug API Error for method {$command}: {$this->error_msg}\", $this->error_code );\n\t\t} else {\n\t\t\t$this->error_code = FALSE;\n            $this->error_msg = FALSE;\n\t\t\t// The login calls don't return the mode because you can't login if SmugMug is in read-only mode.\n\t\t\tif ( isset( $this->parsed_response['mode'] ) ) {\n\t\t\t\t$this->mode = $this->parsed_response['mode'];\n\t\t\t}\n\t\t}\n\t\treturn $this->response;\n    }\n\n\t/**\n\t * Set a proxy for all phpSmug calls.\n\t *\n\t * Params can be passed as an associative array or a set of param=value strings.\n\t *\n\t * @access\tpublic\n\t * @param\tstring\t\t$server Proxy server\n\t * @param\tstring\t\t$port Proxy server port\n\t * @param\tstring\t\t$username (Optional) Proxy username\n\t * @param\tstring\t\t$password (Optional) Proxy password\n\t * @param\tstring\t\t$auth_scheme (Optional) Proxy authentication scheme.\n\t *\t\t\t\t\t\tDefaults to \"basic\". Other supported option is \"digest\".\n\t * @return\tvoid\n\t **/\n    public function setProxy()\n\t{\n\t\t$args = phpSmug::processArgs( func_get_args() );\n\t\t$this->proxy['server'] = $args['server'];\n\t\t$this->proxy['port'] = $args['port'];\n\t\t$this->proxy['username'] = ( isset( $args['username'] ) ) ? $args['username'] : '';\n\t\t$this->proxy['password'] = ( isset( $args['password'] ) ) ? $args['password'] : '';\n\t\t$this->proxy['auth_scheme'] = ( isset( $args['auth_scheme'] ) ) ? $args['auth_scheme'] : 'basic';\n\t\t$this->req->setConfig( array( 'proxy_host' => $this->proxy['server'],\n\t\t\t\t\t\t\t\t\t  'proxy_port' => $this->proxy['port'],\n\t\t\t\t\t\t\t\t\t  'proxy_user' => $this->proxy['username'],\n\t\t\t\t\t\t\t\t\t  'proxy_password' => $this->proxy['password'],\n\t\t\t\t\t\t\t\t\t  'proxy_auth_scheme' => $this->proxy['auth_scheme'] ) );\n    }\n\n\t/**\n\t * Set Token and Token Secret for use by other methods in phpSmug.\n\t *\n\t * Use this method to pull in the token and token secret obtained during\n\t * the OAuth authorisation process.\n\t *\n\t * If OAuth is being used, this method MUST be called so phpSmug knows about\n\t * the token and token secret.\n\t *\n\t * NOTE: It's up to the application developer using phpSmug to store the Access\n\t * token and token secret in a location convenient for their application.\n\t * phpSmug can not do this as all storage and caching done by phpSmug is\n\t * of a temporary nature.\n\t *\n\t * @access\tpublic\n\t * @param\tstring\t\t$id Token ID returned by auth_getAccessToken()\n\t * @param\tstring\t\t$Secret Token secret returned by auth_getAccessToken()\n\t * @return\tvoid\n\t **/\n\tpublic function setToken()\n\t{\n\t\t $args = phpSmug::processArgs( func_get_args() );\n\t\t $this->oauth_token = $args['id'];\n\t\t $this->oauth_token_secret = $args['Secret'];\n\t}\n\n\t/**\n\t * Set the adapter.\n\t *\n\t * @access\tpublic\n\t * @param\tstring\t\t$adapter Allowed options are 'curl' or 'socket'. Default is 'curl'\n\t * @return\tvoid\n\t */\n\tpublic function setAdapter( $adapter )\n\t{\n\t\t$adapter = strtolower( $adapter );\n\t\tif ( $adapter == 'curl' || $adapter == 'socket' ) {\n\t\t\t$this->adapter = $adapter;\n\t\t\t$this->req->setAdapter( $adapter );\n\t\t}\n\t}\n\n\t/**\n\t * Get the adapter.  This is primarily for unit testing\n\t *\n\t * @access\tpublic\n\t * @return\tstring\t\tEither 'socket' or 'curl'.\n\t */\n\tpublic function getAdapter()\n\t{\n\t\treturn $this->req->getAdapter();\n\t}\n\n\t/**\n\t * Force the use of the secure/HTTPS API endpoint for ALL API calls, not just\n\t * those entailing authentication.\n\t *\n\t * This is only implemented if authenticating using OAuth.\n\t *\n\t * @access\tpublic\n\t * @return\tvoid\n\t */\n\n\tpublic function setSecureOnly()\n\t{\n\t\tif ( isset( $this->OAuthSecret ) ) {\n\t\t\t$this->secure = true;\n\t\t}\n\t}\n\n\t/**\n\t * Single login function for all non-OAuth logins.\n\t *\n\t * I've created this function to try and get things consistent across the\n\t * entire phpSmug functionality.\n\t *\n\t * This method will determine the login type from the arguments provided. If\n\t * no arguments are provide, anonymous login will be used.\n\t *\n\t * @access\tpublic\n\t * @param\tstring\t\t$EmailAddress The user's email address\n\t * @param\tstring\t\t$Password The user's password.\n\t * @param\tstring\t\t$UserID The user's ID obtained from a previous login\n\t *\t\t\t\t\t\tusing EmailAddress/Password\n\t * @param\tstring\t\t$PasswordHash The user's password hash obtained from\n\t *\t\t\t\t\t\ta previous login using EmailAddress/Password\n\t * @uses\trequest\n\t * @return\tmixed\t\tReturns the login response or FALSE.\n\t **/\n\tpublic function login()\n\t{\n\t\tif ( func_get_args() ) {\n\t\t\t$args = phpSmug::processArgs( func_get_args() );\n\t\t\tif ( array_key_exists( 'EmailAddress', $args ) ) {\n\t\t\t\t// Login with password\n\t\t\t\t$this->request( 'smugmug.login.withPassword', array( 'EmailAddress' => $args['EmailAddress'], 'Password' => $args['Password'] ) );\n\t\t\t} else if ( array_key_exists( 'UserID', $args ) ) {\n\t\t\t\t// Login with hash\n\t\t\t\t$this->request( 'smugmug.login.withHash', array( 'UserID' => $args['UserID'], 'PasswordHash' => $args['PasswordHash'] ) );\n\t\t\t}\n\t\t\t$this->loginType = 'authd';\n\n\t\t} else {\n\t\t\t// Anonymous login\n\t\t\t$this->loginType = 'anon';\n\t\t\t$this->request( 'smugmug.login.anonymously' );\n\t\t}\n\t\t$this->SessionID = $this->parsed_response['Login']['Session']['id'];\n\t\treturn $this->parsed_response ? $this->parsed_response['Login'] : FALSE;\n\t}\n\n\t/**\n\t * Catch login_* methods and direct them to the single login() method.\n\t *\n\t * This prevents these methods being passed to __call() and the resulting\n\t * cryptic and tough troubleshooting that would ensue for users who don't use\n\t * the login() method. Now they use it, even if they don't know about it.\n\t *\n\t * @access\tpublic\n\t * @uses\tlogin\n\t */\n\tpublic function login_anonymously()\n\t{\n\t\treturn $this->login();\n\t}\n\n\tpublic function login_withHash()\n\t{\n\t\t$args = phpSmug::processArgs( func_get_args() );\n\t\treturn $this->login( $args );\n\t}\n\n\tpublic function login_withPassword( $args )\n\t{\n\t\t$args = phpSmug::processArgs( func_get_args() );\n\t\treturn $this->login( $args );\n\t}\n\n\t/**\n\t * I've chosen to go with the HTTP PUT method as it is quicker, simpler\n\t * and more reliable than using the API or POST methods.\n\t *\n\t * @access\tpublic\n\t * @param\tinteger\t\t$AlbumID The AlbumID the image is to be uploaded to\n\t * @param\tstring\t\t$File The path to the local file that is being uploaded\n\t * @param\tstring\t\t$FileName (Optional) The filename to give the file\n\t *\t\t\t\t\t\ton upload\n\t * @param\tmixed\t\t$arguments (Optional) Additional arguments. See\n\t *\t\t\t\t\t\tSmugMug API documentation.\n\t * @uses\trequest\n\t * @link\thttp://wiki.smugmug.net/display/API/Uploading\n\t * @return\tarray|false\n\t * @todo Add support for multiple asynchronous uploads\n\t **/\n\tpublic function images_upload()\n\t{\n\t\t$args = phpSmug::processArgs( func_get_args() );\n\t\tif ( !array_key_exists( 'File', $args ) ) {\n\t\t\tthrow new PhpSmugException( 'No upload file specified.' );\n\t\t}\n\n\t\t// Set FileName, if one isn't provided in the method call\n\t\tif ( !array_key_exists( 'FileName', $args ) ) {\n\t\t\t$args['FileName'] = basename( $args['File'] );\n\t\t}\n\n\t\t// Ensure the FileName is phpSmug::urlencodeRFC3986 encoded - caters for stange chars and spaces\n\t\t$args['FileName'] = phpSmug::urlencodeRFC3986( $args['FileName'] );\n\n\t\t// OAuth Stuff\n\t\tif ( $this->OAuthSecret ) {\n\t\t\t$sig = $this->generate_signature( 'Upload', array( 'FileName' => $args['FileName'] ) );\n\t\t}\n\n\t\tif ( is_file( $args['File'] ) ) {\n\t\t\t$fp = fopen( $args['File'], 'r' );\n\t\t\t$data = fread( $fp, filesize( $args['File'] ) );\n\t\t\tfclose( $fp );\n\t\t} else {\n\t\t\tthrow new PhpSmugException( \"File doesn't exist: {$args['File']}\" );\n\t\t}\n\n\t\t// Create a new object as we still need the other request object\n\t\t$upload_req = new httpRequest();\n        $upload_req->setMethod( 'PUT' );\n\t\t$upload_req->setConfig( array( 'follow_redirects' => TRUE, 'max_redirects' => 3, 'ssl_verify_peer' => FALSE, 'ssl_verify_host' => FALSE, 'connect_timeout' => 60 ) );\n\t\t$upload_req->setAdapter( $this->adapter );\n\n\t\t// Set the proxy if one has been set earlier\n\t\tif ( isset( $this->proxy ) && is_array( $this->proxy ) ) {\n\t\t\t$upload_req->setConfig(array('proxy_host' => $this->proxy['server'],\n\t\t\t\t\t\t\t             'proxy_port' => $this->proxy['port'],\n\t\t\t\t\t\t\t\t\t     'proxy_user' => $this->proxy['user'],\n\t\t\t\t\t\t\t\t\t     'proxy_password' => $this->proxy['password']));\n\t\t}\n\n\t\t$upload_req->setHeader( array( 'User-Agent' => \"{$this->AppName} using phpSmug/\" . phpSmug::$version,\n\t\t\t\t\t\t\t\t\t   'Content-MD5' => md5_file( $args['File'] ),\n\t\t\t\t\t\t\t\t\t   'Connection' => 'keep-alive') );\n\n\t\tif ( $this->loginType == 'authd' ) {\n\t\t\t$upload_req->setHeader( 'X-Smug-SessionID', $this->SessionID );\n\t\t} else {\n\t\t\t$upload_req->setHeader( 'Authorization', 'OAuth realm=\"http://api.smugmug.com/\",'\n\t\t\t\t.'oauth_consumer_key=\"'.$this->APIKey.'\",'\n\t\t\t\t.'oauth_token=\"'.$this->oauth_token.'\",'\n\t\t\t\t.'oauth_signature_method=\"'.$this->oauth_signature_method.'\",'\n\t\t\t\t.'oauth_signature=\"'.urlencode( $sig ).'\",'\n\t\t\t\t.'oauth_timestamp=\"'.$this->oauth_timestamp.'\",'\n\t\t\t\t.'oauth_version=\"1.0\",'\n\t\t\t\t.'oauth_nonce=\"'.$this->oauth_nonce.'\"' );\n\t\t}\n\n\t\t$upload_req->setHeader( array( 'X-Smug-Version' => $this->APIVer,\n\t\t\t\t\t\t\t\t\t   'X-Smug-ResponseType' => 'PHP',\n\t\t\t\t\t\t\t\t\t   'X-Smug-AlbumID' => $args['AlbumID'],\n\t\t\t\t\t\t\t\t\t   'X-Smug-Filename'=> basename($args['FileName'] ) ) ); // This is actually optional, but we may as well use what we're given\n\n\t\t/* Optional Headers */\n\t\tforeach( $args as $arg => $value ) {\n\t\t\tif ( $arg == 'File' ) continue;\n\t\t\t$upload_req->setHeader( 'X-Smug-' . $arg, $value );\n\t\t}\n\n\t\t//$proto = ( $this->oauth_signature_method == 'PLAINTEXT' || $this->secure ) ? 'https' : 'http';\t// No secure uploads at this time.\n\t\t//$upload_req->setURL( $proto . '://upload.smugmug.com/'.$args['FileName'] );\n\t\t$upload_req->setURL( 'http://upload.smugmug.com/'.$args['FileName'] );\n\t\t$upload_req->setBody( $data );\n\n        //Send Requests\n\t\t$upload_req->execute();\n\n\t\t$this->response = $upload_req->getBody();\n\n\t\t// For some reason the return string is formatted with \\n and extra space chars.  Remove these.\n\t\t$replace = array( '\\n', '\\t', '  ' );\n\t\t$this->response = str_replace( $replace, '', $this->response );\n\t\t$this->parsed_response = unserialize( trim( $this->response ) );\n\n\t\tif ( $this->parsed_response['stat'] == 'fail' ) {\n\t\t\t$this->error_code = $this->parsed_response['code'];\n            $this->error_msg = $this->parsed_response['message'];\n\t\t\t$this->parsed_response = FALSE;\n\t\t\tthrow new PhpSmugException( \"SmugMug API Error for method image_upload: {$this->error_msg}\", $this->error_code );\n\t\t} else {\n\t\t\t$this->error_code = FALSE;\n            $this->error_msg = FALSE;\n\t\t}\n\t\treturn $this->parsed_response ? $this->parsed_response['Image'] : FALSE;\n\t}\n\n\t/**\n\t * Dynamic method handler.  This function handles all SmugMug method calls\n\t * not explicitly implemented by phpSmug.\n\t *\n \t * @access\tpublic\n\t * @uses\trequest\n\t * @param\tstring\t\t$method The SmugMug method you want to call, but\n\t *\t\t\t\t\t\twith \".\" replaced by \"_\"\n\t * @param\tmixed\t\t$arguments The params to be passed to the relevant API\n\t *\t\t\t\t\t\tmethod. See SmugMug API docs for more details.\n\t * @return\tmixed\n\t **/\n\tpublic function __call( $method, $arguments )\n\t{\n\t\t$method = strtr( $method, '_', '.' );\n\t\t$args = phpSmug::processArgs( $arguments );\n\n\t\tif ( $this->OAuthSecret ) {\n\t\t\t$sig = $this->generate_signature( $method, $args );\n\t\t\t$oauth_params = array (\n\t\t\t\t'oauth_version'             => '1.0',\n\t\t\t\t'oauth_nonce'               => $this->oauth_nonce,\n\t\t\t\t'oauth_timestamp'           => $this->oauth_timestamp,\n\t\t\t\t'oauth_consumer_key'        => $this->APIKey,\n\t\t\t\t'oauth_signature_method'    => $this->oauth_signature_method,\n\t\t\t\t'oauth_signature'           => $sig\n\t\t\t\t);\n\n\t\t\t// Only getRequestToken won't have a token when using OAuth\n\t\t\tif ( $method != 'auth.getRequestToken' ) {\n\t\t\t\t$oauth_params['oauth_token'] = $this->oauth_token;\n\t\t\t}\n\t\t\t$args = array_merge( $args, $oauth_params );\n\t\t}\n\n\t\t$this->request( $method, $args );\n\n\t\t// pop off the \"stat\", \"mode\" and \"method\" parts of the array as we don't need them anymore.\n\t\t// BUG: API 1.2.1 and lower: the results are different if the response only has 1 element.  We shouldn't array_shift() lower down.\n\t\t//      However, I need to consider what to do to fix this: either go the route of making the response similar to what we do now\n\t\t//      and thus don't break anything when people upgrade, or change the response so it's consistent with what the API says the user\n\t\t//      will get back, which WILL break people's apps who don't use the 1.2.2 API endpoint.\n        if ( is_array( $this->parsed_response ) ) $output = array_pop( $this->parsed_response );\n\t\t//if (is_array($this->parsed_response)) $output = $this->parsed_response;\n\t\t// I'm really not sure why I shift this array if it only contains one element.\n\t\t//$output = (count($output) == '1' && is_array($output)) ? array_shift($output) : $output;\n\n\t\t/* Automatically set token if calling getRequestToken */\n\t\tif ( $method == 'auth.getRequestToken' ) {\n\t\t\t$this->setToken( $output['Token'] );\n\t\t}\n\n\t\treturn ( is_string( $output ) && strstr( $output, 'smugmug.' ) ) ? NULL : $output;\n\t}\n\n\t /**\n\t  * Return the authorisation URL.\n\t  *\n\t  * @access public\n\t  * @param\tstring\t\t$Access The required level of access. Defaults to \"Public\"\n\t  * @param\tstring\t\t$Permissions The required permissions.  Defaults to \"Read\"\n\t  * @return string\n\t  **/\n\t public function authorize()\n\t{\n\t\t $args = phpSmug::processArgs( func_get_args() );\n\t\t $perms = ( array_key_exists( 'Permissions', $args ) ) ? $args['Permissions'] : 'Public';\n\t\t $access = ( array_key_exists( 'Access', $args ) ) ? $args['Access'] : 'Read';\n \t\t return \"https://secure.smugmug.com/services/oauth/authorize.mg?Access=$access&Permissions=$perms&oauth_token={$this->oauth_token}\";\n\t }\n\n\n\t /**\n\t  * Static function to encode a string according to RFC3986.\n\t  *\n\t  * This is a requirement of implementing OAuth\n\t  *\n\t  * @static\n\t  * @access private\n\t  * @param\tstring\t\t$string The string requiring encoding\n\t  * @return string\n\t  **/\n\t private static function urlencodeRFC3986( $string )\n\t {\n\t\treturn str_replace( '%7E', '~', rawurlencode( $string ) );\n\t }\n\n\t /**\n\t  * Method that generates the OAuth signature\n\t  *\n\t  * In order for this method to correctly generate a signature, setToken()\n\t  * MUST be called to set the token and token secret within the instance of\n\t  * phpSmug.\n\t  *\n\t  * @access\tprivate\n\t  * @param\tstring\t\t$apicall The API method.\n\t  * @param\tmixed\t\t$apiargs The arguments passed to the API method.\n\t  * @return string\n\t  **/\n\t private function generate_signature( $apicall, $apiargs = NULL, $url = NULL )\n\t {\n\t\t$this->oauth_timestamp = time();\n\t\t$this->oauth_nonce = md5(time() . mt_rand());\n\n\t\tif ( !is_null( $apicall ) && $apicall != 'Upload' ) {\n\t\t\tif ( substr( $apicall,0,8 ) != 'smugmug.' ) {\n\t\t\t\t$apicall = 'smugmug.' . $apicall;\n\t\t\t}\n\t\t}\n\t\tif ( $this->oauth_signature_method == 'PLAINTEXT' ) {\n\t\t\treturn phpSmug::urlencodeRFC3986( $this->OAuthSecret ).'&'.phpSmug::urlencodeRFC3986( $this->oauth_token_secret );\n\t\t} else {\n\t\t\t$this->oauth_signature_method = 'HMAC-SHA1';\n\t\t\t$encKey = phpSmug::urlencodeRFC3986( $this->OAuthSecret ) . '&' . phpSmug::urlencodeRFC3986( $this->oauth_token_secret );\n\n\t\t\tif ( is_null( $apicall ) && !is_null( $url ) ) {\n\t\t\t\t$endpoint = $url;\n\t\t\t} else if ( strpos( $apicall, 'Token' ) || $this->secure && $apicall != 'Upload' ) {\n\t\t\t\t$endpoint = \"https://secure.smugmug.com/services/api/php/{$this->APIVer}/\";\n\t\t\t} else if ( $apicall == 'Upload' ) {\n\t\t\t\t//$proto = ( $this->oauth_signature_method == 'PLAINTEXT' || $this->secure ) ? 'https' : 'http';\n\t\t\t\t//$endpoint = $proto . '://upload.smugmug.com/'.$apiargs['FileName'];\t// No support for secure uploads yet\n\t\t\t\t$endpoint = 'http://upload.smugmug.com/'.$apiargs['FileName'];\n\t\t\t} else {\n\t\t\t\t$endpoint = \"http://api.smugmug.com/services/api/php/{$this->APIVer}/\";\n\t\t\t}\n\n\t\t\tif ( is_null( $apicall ) ) {\n\t\t\t\t$method = 'GET';\n\t\t\t} else if ( $apicall == 'Upload' ) {\n\t\t\t\t$method = 'PUT';\n\t\t\t} else {\n\t\t\t\t$method = 'POST';\n\t\t\t}\n\t\t\t$params = array (\n\t\t\t\t'oauth_version'             => '1.0',\n\t\t\t\t'oauth_nonce'               => $this->oauth_nonce,\n\t\t\t\t'oauth_timestamp'           => $this->oauth_timestamp,\n\t\t\t\t'oauth_consumer_key'        => $this->APIKey,\n\t\t\t\t'oauth_signature_method'    => $this->oauth_signature_method\n\t\t\t\t);\n\t\t\tif ( !is_null( $apicall ) && $apicall != 'Upload' ) $params = array_merge( $params, array('method' => $apicall ) );\n\t\t\t$params = ( !empty( $this->oauth_token ) ) ? array_merge( $params, array( 'oauth_token' => $this->oauth_token ) ) : $params;\n\t\t\tif ( $apicall != 'Upload' ) $params = ( !empty( $apiargs ) ) ? array_merge( $params, $apiargs ) : $params;\n\t\t    $keys = array_map( array( 'phpSmug', 'urlencodeRFC3986' ), array_keys( $params ) );\n\t\t    $values = array_map( array( 'phpSmug', 'urlencodeRFC3986' ), array_values( $params ) );\n\t\t\t$params = array_combine( $keys, $values );\n\t\t    // Sort by keys (natsort)\n\t\t    uksort( $params, 'strnatcmp' );\n\t\t\t// We can't use implode() here as it plays havoc with array keys with empty values.\n\t\t\t$count = count( $params );\n\t\t\t$string = '';\n\t\t\tforeach ( $params as $key => $value ) {\n\t\t\t\t$count--;\n\t\t\t\t$string .= $key . '=' . $value;\n\t\t\t\tif ( $count )\t{\n\t\t\t\t\t$string .= '&';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$base_string = $method . '&' . phpSmug::urlencodeRFC3986( $endpoint ) . '&' .  phpSmug::urlencodeRFC3986( $string );\n\t\t\t$sig = base64_encode( hash_hmac( 'sha1', $base_string, $encKey, true ) );\n\t\t\treturn $sig;\n\t\t}\n\t }\n\n\t /**\n\t  * Process arguments passed to method\n\t  *\n\t  * @static\n\t  * @param\tarray\t\tArguments taken from a function by func_get_args()\n\t  * @access private\n\t  * @return array\n\t  **/\n\t private static function processArgs( $arguments )\n\t {\n\t\t$args = array();\n\t\tforeach ( $arguments as $arg ) {\n\t\t\tif ( is_array( $arg ) ) {\n\t\t\t\t$args = array_merge( $args, $arg );\n\t\t\t} else {\n\t\t\t\t$exp = explode( '=', $arg, 2 );\n\t\t\t\t$args[$exp[0]] = $exp[1];\n\t\t\t}\n\t\t}\n\t\treturn $args;\n\t  }\n\n\t/**\n\t * Sign the passed resource with the OAuth params.\n\t *\n\t * This essentially generates a signature for the passed URL and returns a\n\t * string with the OAuth parameters and signature appended.\n\t *\n\t * This is very useful for allowing people to display images that are not set\n\t * to allow external view within the gallery's settings on SmugMug.\n\t *\n\t * @param   string\t\t$url The URL to the resource you wish to sign with the\n\t * @access  public\n\t * @return  string \t\tSigned URL\n\t */\n\tpublic function signResource( $url )\n\t{\n\t\tif ( $this->OAuthSecret ) {\n\t\t\t$sig = $this->generate_signature( null, null, $url );\n\t\t\t$oauth_params = array (\n\t\t\t\t'oauth_version'             => '1.0',\n\t\t\t\t'oauth_nonce'               => $this->oauth_nonce,\n\t\t\t\t'oauth_timestamp'           => $this->oauth_timestamp,\n\t\t\t\t'oauth_consumer_key'        => $this->APIKey,\n\t\t\t\t'oauth_signature_method'    => $this->oauth_signature_method,\n\t\t\t\t'oauth_token'\t\t\t\t=> $this->oauth_token,\n\t\t\t\t'oauth_signature'           => $sig\n\t\t\t\t);\n\n\t\t\t// Build and return the query string.\n\t\t\treturn $url . '?' . http_build_query( $oauth_params );\n\t\t}\n\t}\n}\n\n\n\n/****************** Custom HTTP Request Classes *******************************\n *\n * The classes below could be put into individual files, but to keep things simple\n * I've included them in this file.\n *\n * The code below has been taken from the Habari project - http://habariproject.org\n * and modified to suit the needs of phpSmug.\n *\n * The original source is distributed under the Apache License Version 2.0\n */\n\nclass HttpRequestException extends Exception {}\n\ninterface PhpSmugRequestProcessor\n{\n\tpublic function execute( $method, $url, $headers, $body, $config );\n\tpublic function getBody();\n\tpublic function getHeaders();\n}\n\nclass httpRequest\n{\n\tprivate $method = 'POST';\n\tprivate $url;\n\tprivate $params = array();\n\tprivate $headers = array();\n\tprivate $postdata = array();\n\tprivate $files = array();\n\tprivate $body = '';\n\tprivate $processor = NULL;\n\tprivate $executed = FALSE;\n\n\tprivate $response_body = '';\n\tprivate $response_headers = '';\n\n\t/**\n    * Adapter Configuration parameters\n    * @var  array\n    * @see  setConfig()\n    */\n    protected $config = array(\n\t\t'adapter'\t\t\t=> 'curl',\n        'connect_timeout'   => 5,\n        'timeout'           => 0,\n        'buffer_size'       => 16384,\n\n        'proxy_host'        => '',\n        'proxy_port'        => '',\n        'proxy_user'        => '',\n        'proxy_password'    => '',\n        'proxy_auth_scheme' => 'basic',\n\n\t\t// TODO: These don't apply to SocketRequestProcessor yet\n        'ssl_verify_peer'   => FALSE,\n        'ssl_verify_host'   => 2, // 1 = check CN of ssl cert, 2 = check and verify @see http://php.net/curl_setopt\n        'ssl_cafile'        => NULL,\n        'ssl_capath'        => NULL,\n        'ssl_local_cert'    => NULL,\n        'ssl_passphrase'    => NULL,\n\n        'follow_redirects'  => FALSE,\n        'max_redirects'     => 5\n    );\n\n\t/**\n\t * @param string\t$url URL to request\n\t * @param string\t$method Request method to use (default 'POST')\n\t * @param int\t\t$timeout Timeout in seconds (default 30)\n\t */\n\tpublic function __construct( $url = NULL, $method = 'POST', $timeout = 30 )\n\t{\n\t\t$this->method = strtoupper( $method );\n\t\t$this->url = $url;\n\t\t$this->setTimeout( $timeout );\n\t\t$this->setHeader( array( 'User-Agent' => \"Unknown application using phpSmug/\" . phpSmug::$version ) );\n\n\t\t// can't use curl's followlocation in safe_mode with open_basedir, so fallback to socket for now\n\t\tif ( function_exists( 'curl_init' ) && ( $this->config['adapter'] == 'curl' )\n\t\t\t && ! ( ini_get( 'safe_mode' ) || ini_get( 'open_basedir' ) ) ) {\n\t\t\t$this->processor = new PhpSmugCurlRequestProcessor;\n\t\t}\n\t\telse {\n\t\t\t$this->processor = new PhpSmugSocketRequestProcessor;\n\t\t}\n\t}\n\n\t/**\n\t * Set adapter configuration options\n\t *\n\t * @param mixed\t\t\t$config An array of options or a string name with a\n\t *\t\t\t\t\t\tcorresponding $value\n\t * @param mixed\t\t\t$value\n\t * @return httpRequest\n\t */\n\tpublic function setConfig( $config, $value = null )\n    {\n        if ( is_array( $config ) ) {\n            foreach ( $config as $name => $value ) {\n                $this->setConfig( $name, $value );\n            }\n\n        } else {\n            if ( !array_key_exists( $config, $this->config ) ) {\n\t\t\t\t// We only trigger an error here as using an unknow config param isn't fatal\n\t\t\t\ttrigger_error( \"Unknown configuration parameter '{$config}'\", E_USER_WARNING );\n            } else {\n\t\t\t\t$this->config[$config] = $value;\n\t\t\t}\n        }\n        return $this;\n    }\n\n\t/**\n     * Set http method\n     *\n     * @param string HTTP method to use (GET, POST or PUT)\n     * @return void\n     */\n    public function setMethod( $method )\n\t{\n\t\t$method = strtoupper( $method );\n        if ( $method == 'GET' || $method == 'POST' || $method == 'PUT' ) {\n            $this->method = $method;\n\t\t}\n    }\n\n\t/**\n\t * Set the request query parameters (i.e., the URI's query string).\n\t * Will be merged with existing query info from the URL.\n\t *\n\t * @param array $params\n\t * @return void\n\t */\n\tpublic function setParams( $params )\n\t{\n\t\tif ( ! is_array( $params ) ) {\n\t\t\t$params = parse_str( $params );\n\t\t}\n\t\t$this->params = $params;\n\t}\n\n\t/**\n\t * Add a request header.\n\t *\n\t * @param mixed $header\t\tThe header to add, either as an associative array\n\t *\t\t\t\t\t\t\t'name'=>'value' or as part of a $header $value\n\t *\t\t\t\t\t\t\tstring pair.\n\t * @param mixed $value\t\tThe value for the header if passing the header as\n\t *\t\t\t\t\t\t\ttwo arguments.\n\t * @return void\n\t */\n\tpublic function setHeader( $header, $value = NULL )\n\t{\n\t\tif ( is_array( $header ) ) {\n\t\t\t$this->headers = array_merge( $this->headers, $header );\n\t\t}\n\t\telse {\n\t\t\t$this->headers[$header] = $value;\n\t\t}\n\t}\n\n\t/**\n\t * Return the response headers. Raises a warning and returns if the request wasn't executed yet.\n\t *\n\t * @return mixed\n\t */\n\tpublic function getHeaders()\n\t{\n\t\tif ( !$this->executed ) {\n\t\t\treturn 'Trying to fetch response headers for a pending request.';\n\t\t}\n\t\treturn $this->response_headers;\n\t}\n\n\t/**\n\t * Set the timeout. This is independent of the connect_timeout.\n\t *\n\t * @param int $timeout Timeout in seconds\n\t * @return void\n\t */\n\tpublic function setTimeout( $timeout )\n\t{\n\t\t$this->config['timeout'] = $timeout;\n\t}\n\n\t/**\n\t * Set the adapter to use.  Accepted values are \"curl\" and \"socket\"\n\t *\n\t * @param string $adapter\n\t * @return void\n\t */\n\tpublic function setAdapter( $adapter )\n\t{\n\t\t$adapter = strtolower( $adapter );\n\t\tif ( $adapter == 'curl' || $adapter == 'socket' ) {\n\t\t\t$this->config['adapter'] = $adapter;\n\t\t\t// We need to reset the processor too.  This is quite crude and messy, but we need to do it.\n\t\t\tif ( function_exists( 'curl_init' ) && ( $adapter == 'curl' )\n\t\t\t\t && ! ( ini_get( 'safe_mode' ) || ini_get( 'open_basedir' ) ) ) {\n\t\t\t\t$this->processor = new PhpSmugCurlRequestProcessor;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->processor = new PhpSmugSocketRequestProcessor;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the currently selected adapter. This is more for unit testing purposes\n\t *\n\t * @return string\n\t */\n\tpublic function getAdapter()\n\t{\n\t\treturn $this->config['adapter'];\n\t}\n\n\t/**\n\t * Get the params\n\t *\n\t * @return array\n\t */\n\tpublic function getParams()\n\t{\n\t\treturn $this->params;\n\t}\n\n\t/**\n\t * Get the current configuration. This is more for unit testing purposes\n\t */\n\tpublic function getConfig()\n\t{\n\t\treturn $this->config;\n\t}\n\n\t/**\n\t * Set the destination url\n\t *\n\t * @param string $url Destination URL\n\t * @return void\n\t */\n\tpublic function setUrl( $url )\n\t{\n\t\tif ( $url ) {\n            $this->url = $url;\n\t\t}\n\t}\n\n\t/**\n\t * Set request body\n\t *\n\t * @param mixed\n\t * @return void\n\t */\n\tpublic function setBody( $body )\n\t{\n\t\tif ( $this->method === 'POST' || $this->method === 'PUT' ) {\n\t\t\t$this->body = $body;\n\t\t}\n\t}\n\n\t/**\n\t * set postdata\n\t *\n\t * @access\tpublic\n\t * @param\tmixed\t$name\n\t * @param\tstring\t$value\n\t * @return\tvoid\n\t */\n\tpublic function setPostData( $name, $value = null )\n\t{\n\t\tif ( is_array( $name ) ) {\n\t\t\t//$this->postdata = array_merge( $this->postdata, $name );\n\t\t\t$this->postdata = $name;\n\t\t}\n\t\telse {\n\t\t\t$this->postdata[$name] = $value;\n\t\t}\n\t}\n\n\t/**\n\t * Return the response body. Raises a warning and returns if the request wasn't executed yet.\n\t *\n\t * @return mixed\n\t */\n\tpublic function getBody()\n\t{\n\t\tif ( !$this->executed ) {\n\t\t\treturn 'Trying to fetch response body for a pending request.';\n\t\t}\n\t\treturn $this->response_body;\n\t}\n\n\t/**\n\t * Actually execute the request.\n\t *\n\t * @return mixed\tOn success, returns TRUE and populates the response_body\n\t *\t\t\t\t\tand response_headers fields.\n\t *\t\t\t\t\tOn failure, throws error.\n\t */\n\tpublic function execute()\n\t{\n\t\t$this->prepare();\n\t\t$result = $this->processor->execute( $this->method, $this->url, $this->headers, $this->body, $this->config );\n\t\t$this->body = ''; // We need to do this as we reuse the same object for performance. Once we've executed, the body is useless anyway due to the changing params\n\t\tif ( $result ) {\n\t\t\t$this->response_headers = $this->processor->getHeaders();\n\t\t\t$this->response_body = $this->processor->getBody();\n\t\t\t$this->executed = true;\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\t$this->executed = false;\n\t\t\treturn $result;\n\t\t}\n\t}\n\n\t/**\n\t * Tidy things up in preparation of execution.\n\t *\n\t * @return void\n\t */\n\tprivate function prepare()\n\t{\n\t\t// remove anchors (#foo) from the URL\n\t\t$this->url = preg_replace( '/(#.*?)?$/', '', $this->url );\n\t\t// merge query params from the URL with params given\n\t\t$this->url = $this->mergeQueryParams( $this->url, $this->params );\n\n\t\tif ( $this->method === 'POST' ) {\n\t\t\tif ( !isset( $this->headers['Content-Type'] ) ) {\n\t\t\t\t$this->setHeader( array( 'Content-Type' => 'application/x-www-form-urlencoded' ) );\n\t\t\t}\n\t\t\tif ( $this->headers['Content-Type'] == 'application/x-www-form-urlencoded' || $this->headers['Content-Type'] == 'application/json' ) {\n\t\t\t\t$count = count( $this->postdata );\n\t\t\t\tif( $this->body != '' && $count > 0 ) {\n\t\t\t\t\t$this->body .= '&';\n\t\t\t\t}\n\t\t\t\t//$this->body .= http_build_query( $this->postdata, '', '&' );\n\t\t\t\t// We don't use http_build_query() as it converts empty array values to 0, which we don't want.\n\t\t\t\tforeach ( $this->postdata as $key => $value ) {\n\t\t\t\t\t$count--;\n\t\t\t\t\t$this->body .= $key . '=' . $value;\n\t\t\t\t\tif ( $count )\t{\n\t\t\t\t\t\t$this->body .= '&';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->setHeader( array( 'Content-Length' => strlen( $this->body ) ) );\n\t\t}\n\t}\n\n\t/**\n\t * Merge query params from the URL with given params.\n\t *\n\t * @param string $url The URL\n\t * @param string $params An associative array of parameters.\n\t * @return string\n\t */\n\tprivate function mergeQueryParams( $url, $params )\n\t{\n\t\t$urlparts = parse_url( $url );\n\n\t\tif ( ! isset( $urlparts['query'] ) ) {\n\t\t\t$urlparts['query'] = '';\n\t\t}\n\n\t\tif ( ! is_array( $params ) ) {\n\t\t\tparse_str( $params, $params );\n\t\t}\n\n\t\tif ( $urlparts['query'] != '' ) {\n\t\t\t$parts = array_merge( parse_str( $qparts ) , $params );\n\t\t} else {\n\t\t\t$parts = $params;\n\t\t}\n\t\t$urlparts['query'] = http_build_query( $parts, '', '&' );\n\t\treturn ( $urlparts['query'] != '' ) ? $url .'?'. $urlparts['query'] : $url;\n\t}\n\n}\n\n\n\nclass PhpSmugCurlRequestProcessor implements PhpSmugRequestProcessor\n{\n\tprivate $response_body = '';\n\tprivate $response_headers = '';\n\tprivate $executed = FALSE;\n\tprivate $can_followlocation = TRUE;\n\tprivate $_headers = '';\n\n\tpublic function __construct()\n\t{\n\t\tif ( ini_get( 'safe_mode' ) || ini_get( 'open_basedir' ) ) {\n\t\t\t$this->can_followlocation = FALSE;\n\t\t}\n\t}\n\n\tpublic function execute( $method, $url, $headers, $body, $config )\n\t{\n\t\t$merged_headers = array();\n\t\tforeach ( $headers as $k => $v ) {\n\t\t\t$merged_headers[] = $k . ': ' . $v;\n\t\t}\n\n\t\t$ch = curl_init();\n\n\t\t$options = array(\n\t\t\tCURLOPT_URL\t\t\t\t=> $url,\n\t\t\tCURLOPT_HEADERFUNCTION\t=> array( &$this, '_headerfunction' ),\n\t\t\tCURLOPT_MAXREDIRS\t\t=> $config['max_redirects'],\n\t\t\tCURLOPT_CONNECTTIMEOUT\t=> $config['connect_timeout'],\n\t\t\tCURLOPT_TIMEOUT\t\t\t=> $config['timeout'],\n\t\t\tCURLOPT_SSL_VERIFYPEER\t=> $config['ssl_verify_peer'],\n\t\t\tCURLOPT_SSL_VERIFYHOST\t=> $config['ssl_verify_host'],\n\t\t\tCURLOPT_BUFFERSIZE\t\t=> $config['buffer_size'],\n\t\t\tCURLOPT_HTTPHEADER\t\t=> $merged_headers,\n\t\t\tCURLOPT_RETURNTRANSFER\t=> TRUE,\n\t\t);\n\n\t\tif ( $this->can_followlocation && $config['follow_redirects'] ) {\n\t\t\t$options[CURLOPT_FOLLOWLOCATION] = TRUE; // Follow 302's and the like.\n\t\t}\n\n\t\tif ( $method === 'POST' ) {\n\t\t\t$options[CURLOPT_POST] = TRUE; // POST mode.\n\t\t\t$options[CURLOPT_POSTFIELDS] = $body;\n\t\t}\n\t\telse if ( $method === 'PUT' ) {\n\t\t\t$options[CURLOPT_CUSTOMREQUEST] = 'PUT'; // PUT mode\n\t\t\t$options[CURLOPT_POSTFIELDS] = $body; // The file to put\n\t\t}\n\t\telse {\n\t\t\t$options[CURLOPT_CRLF] = TRUE; // Convert UNIX newlines to \\r\\n\n\t\t}\n\n\t\t// set proxy, if needed\n        if ( $config['proxy_host'] ) {\n            if ( ! $config['proxy_port'] ) {\n                throw new HttpRequestException( 'Proxy port not provided' );\n            }\n            $options[CURLOPT_PROXY] = $config['proxy_host'] . ':' . $config['proxy_port'];\n            if ( $config['proxy_user'] ) {\n                $options[CURLOPT_PROXYUSERPWD] = $config['proxy_user'] . ':' . $config['proxy_password'];\n                switch ( strtolower( $config['proxy_auth_scheme'] ) ) {\n                    case 'basic':\n                        curl_setopt( $ch, CURLOPT_PROXYAUTH, CURLAUTH_BASIC );\n                        break;\n                    case 'digest':\n                        curl_setopt( $ch, CURLOPT_PROXYAUTH, CURLAUTH_DIGEST );\n                }\n            }\n        }\n\t\tcurl_setopt_array($ch, $options);\n\n\t\t$body = curl_exec( $ch );\n\n\t\tif ( curl_errno( $ch ) !== 0 ) {\n\t\t\tthrow new HttpRequestException( sprintf( '%s: CURL Error %d: %s', __CLASS__, curl_errno( $ch ), curl_error( $ch ) ), curl_errno( $ch ) );\n\t\t}\n\n\t\tif ( substr( curl_getinfo( $ch, CURLINFO_HTTP_CODE ), 0, 1 ) != 2 ) {\n\t\t\tthrow new HttpRequestException( sprintf( 'Bad return code (%1$d) for: %2$s', curl_getinfo( $ch, CURLINFO_HTTP_CODE ), $url ), curl_errno( $ch ) );\n\t\t}\n\n\t\tcurl_close( $ch );\n\n\t\t// this fixes an E_NOTICE in the array_pop\n\t\t$tmp_headers = explode( \"\\r\\n\\r\\n\", mb_substr( $this->_headers, 0, -4 ) );\n\n\t\t$this->response_headers = array_pop( $tmp_headers );\n\t\t$this->response_body = $body;\n\t\t$this->executed = true;\n\n\t\treturn true;\n\t}\n\n\tpublic function _headerfunction( $ch, $str )\n\t{\n\t\t$this->_headers .= $str;\n\t\treturn strlen( $str );\n\t}\n\n\tpublic function getBody()\n\t{\n\t\tif ( ! $this->executed ) {\n\t\t\treturn 'Request has not executed yet.';\n\t\t}\n\t\treturn $this->response_body;\n\t}\n\n\tpublic function getHeaders()\n\t{\n\t\tif ( ! $this->executed ) {\n\t\t\treturn 'Request has not executed yet.';\n\t\t}\n\t\treturn $this->response_headers;\n\t}\n}\n\n\n\nclass PhpSmugSocketRequestProcessor implements PhpSmugRequestProcessor\n{\n\tprivate $response_body = '';\n\tprivate $response_headers = '';\n\tprivate $executed = FALSE;\n\tprivate $redir_count = 0;\n\tprivate $can_followlocation = true;\n\n\tpublic function __construct ( )\n\t{\n\t\t// see if we can follow Location: headers\n\t\tif ( ini_get( 'safe_mode' ) || ini_get( 'open_basedir' ) ) {\n\t\t\t$this->can_followlocation = false;\n\t\t}\n\t}\n\n\tpublic function execute ( $method, $url, $headers, $body, $config )\n\t{\n\t\t$merged_headers = array();\n\t\tforeach ( $headers as $k => $v ) {\n\t\t\t$merged_headers[] = $k . ': '. $v;\n\t\t}\n\n\t\t// parse out the URL so we can refer to individual pieces\n\t\t$urlbits = parse_url( $url );\n\n\t\t// set up the options we'll use when creating the request's context\n\t\t$options = array(\n\t\t\t'http' => array(\n\t\t\t\t'method' => $method,\n\t\t\t\t'header' => implode( \"\\n\", $merged_headers ),\n\t\t\t\t'timeout' => $config['timeout'],\n\t\t\t\t'follow_location' => $this->can_followlocation,\t\t// 5.3.4+, should be ignored by others\n\t\t\t\t'max_redirects' => $config['max_redirects'],\n\n\t\t\t\t// and now for our ssl-specific portions, which will be ignored for non-HTTPS requests\n\t\t\t\t'verify_peer' => $config['ssl_verify_peer'],\n\t\t\t\t//'verify_host' => $config['ssl_verify_host'],\t// there doesn't appear to be an equiv of this for sockets - the host is matched by default and you can't just turn that off, only substitute other hostnames\n\t\t\t\t'cafile' => $config['ssl_cafile'],\n\t\t\t\t'capath' => $config['ssl_capath'],\n\t\t\t\t'local_cert' => $config['ssl_local_cert'],\n\t\t\t\t'passphrase' => $config['ssl_passphrase'],\n\t\t\t),\n\t\t);\n\n\t\tif ( $method == 'POST' || $method == 'PUT' ) {\n\t\t\t$options['http']['content'] = $body;\n\t\t}\n\n\t\tif ( $config['proxy_host'] != '' ) {\n\t\t\t$proxy = $config['proxy_host'] . ':' . $config['proxy_port'];\n\t\t\tif ( $config['proxy_user'] != '' ) {\n\t\t\t\t$proxy = $config['proxy_user'] . ':' . $config['proxy_password'] . '@' . $proxy;\n\t\t\t}\n\t\t\t$options['http']['proxy'] = 'tcp://' . $proxy;\n\t\t}\n\n\t\t// create the context\n\t\t$context = stream_context_create( $options );\n\n\t\t// perform the actual request - we use fopen so stream_get_meta_data works\n\t\t$fh = @fopen( $url, 'r', false, $context );\n\t\tif ( $fh === false ) {\n\t\t\tthrow new Exception( 'Unable to connect to ' . $urlbits['host'] );\n\t\t}\n\n\t\t// read in all the contents -- this is the same as file_get_contents, only for a specific stream handle\n\t\t$body = stream_get_contents( $fh );\n\t\t// get meta data\n\t\t$meta = stream_get_meta_data( $fh );\n\n\t\t// close the connection before we do anything else\n\t\tfclose( $fh );\n\n\t\t// did we timeout?\n\t\tif ( $meta['timed_out'] == true ) {\n\t\t\tthrow new Exception( 'Request timed out' );\n\t\t}\n\n\t\t// $meta['wrapper_data'] should be a list of the headers, the same as is loaded into $http_response_header\n\t\t$headers = array();\n\t\tforeach ( $meta['wrapper_data'] as $header ) {\n\n\t\t\t// break the header up into field and value\n\t\t\t$pieces = explode( ': ', $header, 2 );\n\n\t\t\tif ( count( $pieces ) > 1 ) {\n\t\t\t\t// if the header was a key: value format, store it keyed in the array\n\t\t\t\t$headers[ $pieces[0] ] = $pieces[1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// some headers (like the HTTP version in use) aren't keyed, so just store it keyed as itself\n\t\t\t\t$headers[ $pieces[0] ] = $pieces[0];\n\t\t\t}\n\n\t\t}\n\n\t\t$this->response_headers = $headers;\n\t\t$this->response_body = $body;\n\t\t$this->executed = true;\n\n\t\treturn true;\n\t}\n\n\tpublic function getBody()\n\t{\n\t\tif ( ! $this->executed ) {\n\t\t\treturn 'Request has not executed yet.';\n\t\t}\n\t\treturn $this->response_body;\n\t}\n\n\tpublic function getHeaders()\n\t{\n\t\tif ( ! $this->executed ) {\n\t\t\treturn 'Request has not executed yet.';\n\t\t}\n\t\treturn $this->response_headers;\n\t}\n\n\tprivate function _unchunk( $body )\n\t{\n\t\t/* see <http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html> */\n\t\t$result = '';\n\t\t$chunk_size = 0;\n\n\t\tdo {\n\t\t\t$chunk = explode( \"\\r\\n\", $body, 2 );\n\t\t\tlist( $chunk_size_str, )= explode( ';', $chunk[0], 2 );\n\t\t\t$chunk_size = hexdec( $chunk_size_str );\n\n\t\t\tif ( $chunk_size > 0 ) {\n\t\t\t\t$result .= mb_substr( $chunk[1], 0, $chunk_size );\n\t\t\t\t$body = mb_substr( $chunk[1], $chunk_size+1 );\n\t\t\t}\n\t\t}\n\t\twhile ( $chunk_size > 0 );\n\t\t// this ignores trailing header fields\n\n\t\treturn $result;\n\t}\n}\n\n?>\n","markerStore":{"nextMarkerId":275,"markersById":{"0":{"range":{"start":{"row":357,"column":34},"end":{"row":357,"column":34}},"properties":{"type":"selection","editorId":12,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"212":{"range":{"start":{"row":0,"column":0},"end":{"row":5,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"213":{"range":{"start":{"row":12,"column":0},"end":{"row":13,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"214":{"range":{"start":{"row":32,"column":0},"end":{"row":33,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"215":{"range":{"start":{"row":35,"column":0},"end":{"row":36,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"216":{"range":{"start":{"row":37,"column":0},"end":{"row":38,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"217":{"range":{"start":{"row":39,"column":0},"end":{"row":40,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"218":{"range":{"start":{"row":68,"column":0},"end":{"row":69,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"219":{"range":{"start":{"row":78,"column":0},"end":{"row":79,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"220":{"range":{"start":{"row":82,"column":0},"end":{"row":83,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"221":{"range":{"start":{"row":85,"column":0},"end":{"row":87,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"222":{"range":{"start":{"row":94,"column":0},"end":{"row":96,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"223":{"range":{"start":{"row":131,"column":0},"end":{"row":132,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"224":{"range":{"start":{"row":154,"column":0},"end":{"row":155,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"225":{"range":{"start":{"row":276,"column":0},"end":{"row":277,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"226":{"range":{"start":{"row":369,"column":0},"end":{"row":370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"227":{"range":{"start":{"row":376,"column":0},"end":{"row":377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"228":{"range":{"start":{"row":378,"column":0},"end":{"row":379,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"229":{"range":{"start":{"row":424,"column":0},"end":{"row":425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"230":{"range":{"start":{"row":457,"column":0},"end":{"row":458,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"231":{"range":{"start":{"row":465,"column":0},"end":{"row":466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"232":{"range":{"start":{"row":481,"column":0},"end":{"row":483,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"233":{"range":{"start":{"row":495,"column":0},"end":{"row":496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"234":{"range":{"start":{"row":498,"column":0},"end":{"row":499,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"235":{"range":{"start":{"row":506,"column":0},"end":{"row":507,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"236":{"range":{"start":{"row":508,"column":0},"end":{"row":509,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"237":{"range":{"start":{"row":510,"column":0},"end":{"row":511,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"238":{"range":{"start":{"row":512,"column":0},"end":{"row":513,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"239":{"range":{"start":{"row":516,"column":0},"end":{"row":517,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"240":{"range":{"start":{"row":523,"column":0},"end":{"row":524,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"241":{"range":{"start":{"row":526,"column":0},"end":{"row":531,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"242":{"range":{"start":{"row":555,"column":0},"end":{"row":556,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"243":{"range":{"start":{"row":591,"column":0},"end":{"row":592,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"244":{"range":{"start":{"row":595,"column":0},"end":{"row":596,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"245":{"range":{"start":{"row":614,"column":0},"end":{"row":615,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"246":{"range":{"start":{"row":627,"column":0},"end":{"row":628,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"247":{"range":{"start":{"row":641,"column":0},"end":{"row":642,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"248":{"range":{"start":{"row":666,"column":0},"end":{"row":667,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"249":{"range":{"start":{"row":671,"column":0},"end":{"row":672,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"250":{"range":{"start":{"row":683,"column":0},"end":{"row":684,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"251":{"range":{"start":{"row":685,"column":0},"end":{"row":686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"252":{"range":{"start":{"row":687,"column":0},"end":{"row":688,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"253":{"range":{"start":{"row":692,"column":0},"end":{"row":693,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"254":{"range":{"start":{"row":704,"column":0},"end":{"row":705,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"255":{"range":{"start":{"row":708,"column":0},"end":{"row":709,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"256":{"range":{"start":{"row":721,"column":0},"end":{"row":722,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"257":{"range":{"start":{"row":732,"column":0},"end":{"row":733,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"258":{"range":{"start":{"row":759,"column":0},"end":{"row":760,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"259":{"range":{"start":{"row":775,"column":0},"end":{"row":776,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"260":{"range":{"start":{"row":819,"column":0},"end":{"row":820,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"261":{"range":{"start":{"row":831,"column":0},"end":{"row":832,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"262":{"range":{"start":{"row":869,"column":0},"end":{"row":870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"263":{"range":{"start":{"row":901,"column":0},"end":{"row":902,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"264":{"range":{"start":{"row":1153,"column":0},"end":{"row":1154,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"265":{"range":{"start":{"row":1309,"column":0},"end":{"row":1310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"266":{"range":{"start":{"row":1332,"column":0},"end":{"row":1333,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"267":{"range":{"start":{"row":1428,"column":0},"end":{"row":1429,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"268":{"range":{"start":{"row":1437,"column":0},"end":{"row":1440,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"269":{"range":{"start":{"row":1443,"column":0},"end":{"row":1444,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"270":{"range":{"start":{"row":1445,"column":0},"end":{"row":1448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"271":{"range":{"start":{"row":1573,"column":0},"end":{"row":1574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false}},"version":2},"history":{"version":3,"nextCheckpointId":9,"undoStack":[{"type":"group-start","snapshot":{"0":{"range":[[371,20],[371,20]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[1447,2],[1447,3]],"newRange":[[1447,2],[1447,2]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[1446,68],[1446,69]],"newRange":[[1446,68],[1446,68]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[1445,0],[1445,2]],"newRange":[[1445,0],[1445,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[1443,3],[1443,4]],"newRange":[[1443,3],[1443,3]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[1439,2],[1439,4]],"newRange":[[1439,2],[1439,2]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[1438,32],[1438,33]],"newRange":[[1438,32],[1438,32]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[1437,0],[1437,1]],"newRange":[[1437,0],[1437,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[1428,0],[1428,1]],"newRange":[[1428,0],[1428,0]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[1332,0],[1332,2]],"newRange":[[1332,0],[1332,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[1309,0],[1309,1]],"newRange":[[1309,0],[1309,0]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[1153,0],[1153,1]],"newRange":[[1153,0],[1153,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[901,75],[901,78]],"newRange":[[901,75],[901,75]],"oldText":"  \t","newText":""}},{"type":"change","content":{"oldRange":[[869,0],[869,3]],"newRange":[[869,0],[869,0]],"oldText":"\t  ","newText":""}},{"type":"change","content":{"oldRange":[[831,0],[831,3]],"newRange":[[831,0],[831,0]],"oldText":"\t\t\t","newText":""}},{"type":"change","content":{"oldRange":[[819,0],[819,3]],"newRange":[[819,0],[819,0]],"oldText":"\t\t\t","newText":""}},{"type":"change","content":{"oldRange":[[775,0],[775,2]],"newRange":[[775,0],[775,0]],"oldText":"\t ","newText":""}},{"type":"change","content":{"oldRange":[[759,0],[759,1]],"newRange":[[759,0],[759,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[732,0],[732,3]],"newRange":[[732,0],[732,0]],"oldText":"\t\t\t","newText":""}},{"type":"change","content":{"oldRange":[[721,0],[721,1]],"newRange":[[721,0],[721,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[708,3],[708,4]],"newRange":[[708,3],[708,3]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[704,0],[704,1]],"newRange":[[704,0],[704,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[692,0],[692,2]],"newRange":[[692,0],[692,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[687,0],[687,2]],"newRange":[[687,0],[687,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[685,0],[685,2]],"newRange":[[685,0],[685,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[683,23],[683,24]],"newRange":[[683,23],[683,23]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[671,0],[671,2]],"newRange":[[671,0],[671,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[666,0],[666,3]],"newRange":[[666,0],[666,0]],"oldText":"\t\t\t","newText":""}},{"type":"change","content":{"oldRange":[[641,0],[641,2]],"newRange":[[641,0],[641,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[627,0],[627,2]],"newRange":[[627,0],[627,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[614,0],[614,2]],"newRange":[[614,0],[614,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[595,3],[595,4]],"newRange":[[595,3],[595,3]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[591,0],[591,1]],"newRange":[[591,0],[591,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[555,0],[555,3]],"newRange":[[555,0],[555,0]],"oldText":"\t\t\t","newText":""}},{"type":"change","content":{"oldRange":[[530,77],[530,78]],"newRange":[[530,77],[530,77]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[529,3],[529,4]],"newRange":[[529,3],[529,3]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[528,33],[528,35]],"newRange":[[528,33],[528,33]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[527,74],[527,75]],"newRange":[[527,74],[527,74]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[526,3],[526,4]],"newRange":[[526,3],[526,3]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[523,0],[523,1]],"newRange":[[523,0],[523,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[516,0],[516,1]],"newRange":[[516,0],[516,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[512,3],[512,4]],"newRange":[[512,3],[512,3]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[510,3],[510,4]],"newRange":[[510,3],[510,3]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[508,78],[508,79]],"newRange":[[508,78],[508,78]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[506,0],[506,1]],"newRange":[[506,0],[506,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[498,3],[498,4]],"newRange":[[498,3],[498,3]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[495,0],[495,1]],"newRange":[[495,0],[495,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[482,3],[482,4]],"newRange":[[482,3],[482,3]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[481,20],[481,22]],"newRange":[[481,20],[481,20]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[465,73],[465,74]],"newRange":[[465,73],[465,73]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[457,73],[457,74]],"newRange":[[457,73],[457,73]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[424,0],[424,1]],"newRange":[[424,0],[424,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[378,0],[378,2]],"newRange":[[378,0],[378,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[376,0],[376,2]],"newRange":[[376,0],[376,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[276,52],[276,53]],"newRange":[[276,52],[276,52]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[154,0],[154,1]],"newRange":[[154,0],[154,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[131,0],[131,1]],"newRange":[[131,0],[131,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[95,70],[95,71]],"newRange":[[95,70],[95,70]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[94,6],[94,7]],"newRange":[[94,6],[94,6]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[86,66],[86,67]],"newRange":[[86,66],[86,66]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[85,3],[85,4]],"newRange":[[85,3],[85,3]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[82,0],[82,1]],"newRange":[[82,0],[82,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[78,6],[78,7]],"newRange":[[78,6],[78,6]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[68,0],[68,1]],"newRange":[[68,0],[68,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[39,2],[39,3]],"newRange":[[39,2],[39,2]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[37,2],[37,3]],"newRange":[[37,2],[37,2]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[35,2],[35,3]],"newRange":[[35,2],[35,2]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[32,68],[32,69]],"newRange":[[32,68],[32,68]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[12,2],[12,3]],"newRange":[[12,2],[12,2]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[4,69],[4,70]],"newRange":[[4,69],[4,69]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[3,72],[3,73]],"newRange":[[3,72],[3,72]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[2,78],[2,79]],"newRange":[[2,78],[2,78]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[1,3],[1,4]],"newRange":[[1,3],[1,3]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[0,5],[0,6]],"newRange":[[0,5],[0,5]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[1573,2],[1573,2]],"newRange":[[1573,2],[1574,0]],"oldText":"","newText":"\n"}},{"type":"group-end","snapshot":{"0":{"range":[[371,20],[371,20]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[369,24],[369,30]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[369,24],[369,30]],"newRange":[[369,24],[369,25]],"oldText":"secure","newText":"a"}},{"type":"change","content":{"oldRange":[[369,25],[369,25]],"newRange":[[369,25],[369,26]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[369,26],[369,26]],"newRange":[[369,26],[369,27]],"oldText":"","newText":"i"}},{"type":"group-end","snapshot":{"0":{"range":[[369,27],[369,27]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/lildude/Sites/phpSmug3/phpSmug.php","digestWhenLastPersisted":"ad9d702dc71b9e028a3c39c67991c6ef11ed1037","preferredLineEnding":null,"deserializer":"TextBuffer","version":2}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":8,"softTabs":false,"scrollRow":12,"displayBuffer":{"deserializer":"DisplayBuffer","id":9,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/lildude/Sites/phpSmug3/admin/test.php","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":12,"softTabs":false,"scrollRow":357,"displayBuffer":{"deserializer":"DisplayBuffer","id":13,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/lildude/Sites/phpSmug3/phpSmug.php","largeFileMode":false},"largeFileMode":false}}],"activeItemURI":"/Users/lildude/Sites/phpSmug3/phpSmug.php","focused":true,"flexScale":1},"activePaneId":3},"fullScreen":false,"packagesWithActiveGrammars":["language-php","language-html","language-sql","language-todo"]},"packageStates":{"linter":{"scope":"File"},"metrics":{"sessionLength":3035412},"find-and-replace":{"findOptions":{"findPattern":"secure","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["secure"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/lildude/Sites/phpSmug3/admin/test.php":1446740669129,"/Users/lildude/Sites/phpSmug3/phpSmug.php":1446740700248},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/lildude/Sites/phpSmug3":{"isExpanded":true,"entries":{"admin":{"isExpanded":true,"entries":{"docs-backups":{"isExpanded":false,"entries":{}}}},"examples":{"isExpanded":false,"entries":{}},"tests":{"isExpanded":false,"entries":{}},"tmplib":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/lildude/Sites/phpSmug3/phpSmug.php","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}