{"mode":"editor","version":1,"windowDimensions":{"x":218,"y":63,"width":2213,"height":1166,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/lildude/tmp/trash/testingNotes"],"buffers":[{"text":"### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n\n### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n\n### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n\n### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n\n### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n\n### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n\n### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n\n### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n\n### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n","markerStore":{"nextMarkerId":199,"markersById":{"0":{"range":{"start":{"row":1070,"column":0},"end":{"row":1070,"column":0}},"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":62,"undoStack":[{"type":"checkpoint","id":2,"snapshot":{"0":{"range":[[0,0],[1,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[0,0],[1,0]],"newRange":[[0,0],[0,0]],"oldText":"This is a note in Noted.md\n","newText":""}},{"type":"checkpoint","id":5,"snapshot":{"0":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":6,"snapshot":{"0":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"1":{"range":[[0,0],[0,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[118,0]],"oldText":"","newText":"### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n"}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":9,"snapshot":{"0":{"range":[[118,0],[118,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"1":{"range":[[0,0],[118,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":10,"snapshot":{"0":{"range":[[118,0],[118,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":[[0,0],[118,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":11,"snapshot":{"0":{"range":[[118,0],[118,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":[[0,0],[118,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":12,"snapshot":{"0":{"range":[[118,0],[118,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":[[0,0],[118,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[118,0],[118,0]],"newRange":[[118,0],[119,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[119,0],[119,0]],"newRange":[[119,0],[119,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":13,"snapshot":{"0":{"range":[[119,0],[119,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":[[0,0],[119,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":14,"snapshot":{"0":{"range":[[119,0],[119,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"15":{"range":[[0,0],[119,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[119,0],[119,0]],"newRange":[[119,0],[237,0]],"oldText":"","newText":"### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n"}},{"type":"change","content":{"oldRange":[[119,0],[119,0]],"newRange":[[119,0],[119,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":17,"snapshot":{"0":{"range":[[237,0],[237,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"15":{"range":[[0,0],[237,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":18,"snapshot":{"0":{"range":[[237,0],[237,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"16":{"range":[[0,0],[237,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[237,0],[237,0]],"newRange":[[237,0],[238,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[238,0],[238,0]],"newRange":[[238,0],[238,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":19,"snapshot":{"0":{"range":[[238,0],[238,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"16":{"range":[[0,0],[238,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":20,"snapshot":{"0":{"range":[[238,0],[238,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"16":{"range":[[0,0],[238,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[238,0],[238,0]],"newRange":[[238,0],[356,0]],"oldText":"","newText":"### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n"}},{"type":"change","content":{"oldRange":[[238,0],[238,0]],"newRange":[[238,0],[238,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":23,"snapshot":{"0":{"range":[[356,0],[356,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"16":{"range":[[0,0],[356,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":24,"snapshot":{"0":{"range":[[356,0],[356,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[356,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[356,0],[356,0]],"newRange":[[356,0],[357,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[357,0],[357,0]],"newRange":[[357,0],[357,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":25,"snapshot":{"0":{"range":[[357,0],[357,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[357,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":26,"snapshot":{"0":{"range":[[357,0],[357,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[357,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[357,0],[357,0]],"newRange":[[357,0],[475,0]],"oldText":"","newText":"### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n"}},{"type":"change","content":{"oldRange":[[357,0],[357,0]],"newRange":[[357,0],[357,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":29,"snapshot":{"0":{"range":[[475,0],[475,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[475,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":30,"snapshot":{"0":{"range":[[475,0],[475,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[475,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[475,0],[475,0]],"newRange":[[475,0],[476,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[476,0],[476,0]],"newRange":[[476,0],[476,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":31,"snapshot":{"0":{"range":[[476,0],[476,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[476,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":32,"snapshot":{"0":{"range":[[476,0],[476,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[476,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[476,0],[476,0]],"newRange":[[476,0],[594,0]],"oldText":"","newText":"### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n"}},{"type":"change","content":{"oldRange":[[476,0],[476,0]],"newRange":[[476,0],[476,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":35,"snapshot":{"0":{"range":[[594,0],[594,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[594,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":36,"snapshot":{"0":{"range":[[594,0],[594,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[594,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[594,0],[594,0]],"newRange":[[594,0],[595,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[595,0],[595,0]],"newRange":[[595,0],[595,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":37,"snapshot":{"0":{"range":[[595,0],[595,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[595,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":38,"snapshot":{"0":{"range":[[595,0],[595,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[595,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[595,0],[595,0]],"newRange":[[595,0],[713,0]],"oldText":"","newText":"### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n"}},{"type":"change","content":{"oldRange":[[595,0],[595,0]],"newRange":[[595,0],[595,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":41,"snapshot":{"0":{"range":[[713,0],[713,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[713,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":42,"snapshot":{"0":{"range":[[713,0],[713,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[713,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[713,0],[713,0]],"newRange":[[713,0],[714,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[714,0],[714,0]],"newRange":[[714,0],[714,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":43,"snapshot":{"0":{"range":[[714,0],[714,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[714,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":44,"snapshot":{"0":{"range":[[714,0],[714,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[714,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[714,0],[714,0]],"newRange":[[714,0],[832,0]],"oldText":"","newText":"### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n"}},{"type":"change","content":{"oldRange":[[714,0],[714,0]],"newRange":[[714,0],[714,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":47,"snapshot":{"0":{"range":[[832,0],[832,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[832,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":48,"snapshot":{"0":{"range":[[832,0],[832,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[832,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[832,0],[832,0]],"newRange":[[832,0],[833,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[833,0],[833,0]],"newRange":[[833,0],[833,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":49,"snapshot":{"0":{"range":[[833,0],[833,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[833,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":50,"snapshot":{"0":{"range":[[833,0],[833,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[833,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[833,0],[833,0]],"newRange":[[833,0],[951,0]],"oldText":"","newText":"### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n"}},{"type":"change","content":{"oldRange":[[833,0],[833,0]],"newRange":[[833,0],[833,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":53,"snapshot":{"0":{"range":[[951,0],[951,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[951,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":54,"snapshot":{"0":{"range":[[951,0],[951,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[951,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[951,0],[951,0]],"newRange":[[951,0],[952,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[952,0],[952,0]],"newRange":[[952,0],[952,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":55,"snapshot":{"0":{"range":[[952,0],[952,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[952,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":56,"snapshot":{"0":{"range":[[952,0],[952,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[952,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[952,0],[952,0]],"newRange":[[952,0],[1070,0]],"oldText":"","newText":"### What's in the known_issues directory?\n\nThis directory contains the files that make up each of the GitHub Enterprise known issues.  Each file is created using the script/add-known-issue script which takes the URL of the issue you're documenting, grabs the initial issue or pull request title and summary and places them into the file ready for editing and making customer friendly.\n\nIf you don't provide a URL, you'll be prompted for one.  You'll also be asked to enter the affected releases and the release the issue is resolved in, it at all.\n\n\n[WIP] PoC: Adding Enterprise known issues to help docs\n\n## Why do we need this?\n\nWe've had this requirement and demand for a searchable and referenceable list of known issues for GitHub Enterprise releases.  Since GitHub Enterprise 2.0.0 we've started to manually add these to the release notes but this is proving to be tedious to maintain across all the releases and hard to update and back-reference in previous releases.  Accordingly loads get missed off and they're not always 100% up-to-date.  The release notes are also not easily searched by customers across all patch releases and they also don't provide any details on possible workarounds or if the issue has been addressed in a later release.\n\nThis PR is a proof-of-concept idea I've had knocking around in my head which should address all of these.  At the moment it is functional but quite crude and does need a bit of :heart: :sparkles:, improving and wordsmithing.  It also needs fully populating which will be quite time consuming so may be something we keep for GHE 2.3.0 and later only at first.\n\nBy integrating the known issues into the help-docs we can centralise the documentation of these issues along with the .com \"Common issues\" and take advantage of the functionality already in place without setting up a whole new system or environment that needs maintaining and possibly funding.\n\n## How do we add new issues?\n\nThe general structure of how this will all work is as follows:\n\n1. A new issue is discovered in GitHub Enterprise and an issue or PR is raised.\n2. Someone in Enterprise support checks out the help-docs repository locally and then runs the `script/add-known-issue` script.  They can optionally pass in the URL of the issue or pull request being documented.  If they don't provide a URL as an argument, they'll be prompted for the URL by the script.\n3. The script will then prompt them for...\n    - a comma separated list of affected releases,\n    - a comma separated list of releases in which the issue is first fixed (not required if not fixed),\n    - and to confirm if there is a workaround.\n\n  This is what effectively happens now (31 Jul '15):\n\n  ```\n  $ script/add-known-issue https://github.com/github/github/issues/37229\n  Affected releases (Use comma separated list if more than one): 11.10.335, 11.10.345, 11.10.353, 2.1.5, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4\n  Fixed in (Use comma separated list if more than one. Leave blank if not fixed yet): 2.2.5\n  Is there a workaround? [Y/n]: n\n  Thanks. Now edit './_enterprise_source/admin/known-issues/10-37229.md' and make it customer friendly.\n  ```\n\n  **Note:** You'll need to install the netrc gem and configured your `${HOME}/.netrc` with your username and password or OAuth token for this to work.\n4. The script will then grab the issue title and initial explanation of the problem from the issue on GitHub.com and save it into a ready formatted file in the `_enterprise_source/admin/known-issues` directory in a file named in the form `##-####.md`.  This will be the Known Issue ID.  More on this later.  The content from the initial issue is placed within a Liquid comment, just to be safe - we don't want internal details accidentally leaking outside the company.  My dream is that as more people become aware of this, they'll start writing much better issue titles and problem descriptions in future so less manual changes are required when detailing them publicly.\n5. The engineer would then need to edit this known issue file and make it customer ready.  This will entail setting a good title, providing a brief explanation of the problem and how it manifests, any errors seen, and detailing the steps to workaround the problem, if possible or adviseable.\n6. Once the file is ready for public consumption, the `script/update-known-issues` script is run to populate the contents of the `_data/enterprise_known_issues.yml` file which is used to generate the list of known issues for each release.  This script could be run automatically on deploy.\n\n## What's with the Known Issue ID?\n\nThe idea behind the Known Issue ID is it is designed to provide an easily referenceable number that quickly tells the GitHub engineer the repository and issue/PR without revealing this information directly to customers, though they could possibly guess this with time.\n\nThe first two digits correspond to the GitHub repository and the digits after the dash are the actual issue/PR ID within that repository.\n\nThe mapping I came up with, pulled out of the air at random is:\n\n```\ngithub_repos = {\n  \"github\"      => 10,\n  \"enterprise2\" => 20,\n  \"gist\"        => 30,\n  \"alambic\"     => 40,\n  \"slumlord\"    => 50,\n  \"render\"      => 60,\n  \"pages\"       => 70,\n  \"gitmon\"      => 80,\n  \"git\"         => 90,\n  \"babeld\"      => 11,\n  \"gh-migrator\" => 12,\n  \"codeload\"    => 13\n}\n```\n\nThis isn't a complete list, but it illustrates the point.\n\nSo Known Issue ID 10-37229, included in this PoC equates to github/github#37229. 20-4321 equates to github/enterprise2#4231.\n\nThe primary motivator behind this is that it means the actual known issue filenames don't need to be slugified versions of the title, like the rest of the files and documents, making it considerably easier to quickly update and reference within customer tickets and release notes.  It also means the URL isn't likely to change so the links in customer tickets don't become invalid if they reference them again at a later date.  This does however sacrifice some of the SEO-friendliness we have on the help site.\n\n## How to we update older issues?\n\nEdit the file in the `_enterprise_source/admin/known-issues/` directory as you normally would.  If the title or affected major.minor releases change, then `script/update-known-issues` would need to be run again.  If they don't, it doesn't.\n\n## Added benefits\n\nIf we get into the habit of documenting known issues here first, we can then update the scripts currently used to generate the GitHub Enterprise release notes to trawl through each of the known issues here and automatically populate accurate release notes based on the information within each of the files.\n\n## Testing this out locally\n\nI've added two known issues, neither are customer ready.  10-37229 shows the content directly from the issue assuming one day every one writes great issue titles and problem descriptions.  I wrote this issue so I'm biased about its content :grin:.  The other, 20-4321, is exactly as it appears if someone were to accidentally create an issue and publish it without making any changes.\n\nSo you want to see how this works?  Great!\n\n1. Clone this repository and checkout the known-issues-poc branch\n2. Run `script/enterprise-admin-docs 2.1 && script/enterprise-admin-docs 2.2`\n3. Run `script/server`\n4. Browse to http://127.0.0.1:4000/enterprise/2.2/ -> \"GitHub Enterprise Help Topics\".  \n5. Under the general section you'll see the \"Known Issues\" item. Click it.  Or for the lazy, browse straight to http://127.0.0.1:4000/enterprise/2.2/admin/articles/known-issues/\n6. Click an issue to see the contents.\n7. Change the URL to http://127.0.0.1:4000/enterprise/2.1/admin/articles/known-issues/ to view the known issues associated with GHE 2.1.\n8. Click an issue to see the contents.\n9. Searching works too so feel free to search too.\n\n## Stuff I'm not sure about or I know will need changing\n\nThis is an initial PoC so I'm expecting a lot of changes and ideas.  Some of the things that came to mind whilst I was putting this all together:\n\n- Is this a good idea and the best way to do things?\n- I'm not sure using an admin \"article\" is the right thing to do for the page that lists all the known issues for that release.\n- Do we want to break up this list of known issues in each major.minor release into .patch sub-sections?\n- Is there a better way of grabbing the issue title and body, for example by using a shared credential instead of relying individual user .netrc files?\n- Words - my wording all over the show is terrible.\n- My scripts aren't the best and could do with optimising.\n- Do people like the Known Issue ID mapping idea?\n- The layout of all the pages needs work.\n- I've winged it a bit with getting searching working an producing working links.\n- The search summary for known issues definitely needs work.\n- I'm not sure how well this will scale.\n- Search only returns results based on the issue title and not the content which is likely to include the error strings customers are likely to search for.\n\nLet me know what you think and lets evolve this if people are in agreement.\n\n/cc @michaeltwofish @github/enterprise-docs https://github.com/github/enterprise-support/issues/395\n"}},{"type":"change","content":{"oldRange":[[952,0],[952,0]],"newRange":[[952,0],[952,0]],"oldText":"","newText":""}},{"type":"checkpoint","id":59,"snapshot":{"0":{"range":[[1070,0],[1070,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":[[0,0],[1070,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":60,"snapshot":{"0":{"range":[[1070,0],[1070,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"90":{"range":[[0,0],[1070,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":61,"snapshot":{"0":{"range":[[1070,0],[1070,0]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"90":{"range":[[0,0],[1070,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/lildude/Downloads/trash/testingNotes/Notes/Notes.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e6843e98227fb8cad5a49f748bcbbcbb7f58892b","deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":true,"scrollTop":24641,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Downloads/trash/testingNotes/Notes/Notes.md","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/lildude/Downloads/trash/testingNotes/Notes/Notes.md","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-gfm","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"linter":{"scope":"File"},"metrics":{"sessionLength":3079000},"fuzzy-finder":{"/Users/lildude/Downloads/trash/testingNotes/Notes/Notes.md":1438334680503},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/lildude/tmp/trash/testingNotes":{"isExpanded":true,"entries":{"Notes":{"isExpanded":true,"entries":{}}}}},"selectedPath":"/Users/lildude/tmp/trash/testingNotes/Notes/Notes.md","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}