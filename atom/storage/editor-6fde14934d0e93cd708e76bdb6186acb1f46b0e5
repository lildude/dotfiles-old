{"mode":"editor","version":1,"windowDimensions":{"x":30,"y":22,"width":1267,"height":829},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/lildude/github/github/config","buffers":[{"text":"ActionController::Routing::SEPARATORS << '~'\n\n# Backport Rails 3.0ish DSL\nclass ActionController::Routing::RouteSet::Mapper\n  def method(method, path, options = {})\n    options[:conditions] ||= {}\n    options[:conditions][:method] = method\n\n    to = options.delete(:to)\n    controller, action = to.split('#', 2)\n    if action\n      options[:controller], options[:action] = controller, action\n    else\n      options[:action] = controller\n    end\n\n    if name = options.delete(:as)\n      self.named_route(name, path, options)\n    else\n      self.connect(path, options)\n    end\n  end\n\n  def get(*args);    method(:get, *args);    end\n  def post(*args);   method(:post, *args);   end\n  def put(*args);    method(:put, *args);    end\n  def delete(*args); method(:delete, *args); end\nend\n\nActionController::Routing::Routes.draw do |map|\n  # The % in the label regexp is so uri encoded chars are allowed\n  RepoRegexp  = /[\\w\\.\\-]+/i unless defined?(RepoRegexp)\n\n  ##\n  # Status\n  map.get '/status', :to => 'site#status_text'\n  map.get '/status.json', :to => 'site#status_json'\n\n  ##\n  # Bounces\n  map.with_options :controller => 'site', :action => 'bounce' do |bounce|\n    unless GitHub.enterprise?\n      bounce.connect '/security',            :to => 'http://help.github.com/security/'\n      bounce.connect '/visualisation',       :to => '/visualization'\n      bounce.connect '/mobile',              :to => 'http://mobile.github.com'\n      bounce.connect '/kyleguide',           :to => '/styleguide'\n      bounce.connect '/education',           :to => '/edu'\n      bounce.connect '/mac',                 :to => 'http://mac.github.com'\n      bounce.connect '/windows',             :to => 'http://windows.github.com'\n      bounce.connect '/shop',                :to => 'http://shop.github.com'\n      bounce.connect '/site/terms',          :to => 'http://help.github.com/terms/'\n      bounce.connect '/site/privacy',        :to => 'http://help.github.com/privacy/'\n      bounce.connect \"/:readme\", :readme => /readme(.md)?/i, :to => \"/about\"\n      bounce.connect \"/:contributing\", :contributing => /contributing(.md)?/i, :to => \"/about/jobs\"\n    end\n\n    bounce.connect '/features',            :to => '/features/projects'\n    bounce.connect '/repositories/search', :to => '/search'\n    bounce.connect '/repositories/new',    :to => '/new'\n    bounce.connect '/news',                :to => '/timeline'\n    bounce.connect '/news.atom',           :to => '/timeline.atom'\n\n    # Retired Features\n    bounce.with_options :to => '/410' do |gone|\n      gone.connect '/inbox'\n      gone.connect '/inbox/sent'\n      gone.connect '/:user/:repository/forkqueue', :repository => RepoRegexp\n      gone.connect '/:user/:repository/graphs/impact'\n    end\n  end\n\n  ##\n  # Site\n  unless GitHub.enterprise?\n    map.connect '/training/:section',      :controller => 'site', :action => 'training'\n    map.connect '/logos',                  :controller => 'site', :action => 'logos'\n  end\n  map.connect '/errors',                 :controller => 'site', :action => 'errors'\n  map.connect '/features/:section',      :controller => 'site', :action => 'features'\n  map.connect '/features/:section/:tab', :controller => 'site', :action => 'features'\n  map.connect '/about/:section',         :controller => 'site', :action => 'about'\n  map.connect '/410',                    :controller => 'site', :action => 'feature_gone'\n  map.connect '/_stats',                 :controller => 'site', :action => 'report_stats'\n  map.connect '/site/:action',           :controller => 'site'\n  map.connect '/site/:action.:format',   :controller => 'site'\n\n  ##\n  # Gitignore templates\n  map.gitignore_template '/site/gitignore/:template', :controller => 'gitignore', :action => 'show'\n\n  ##\n  # XHR Socket polling\n\n  map.resources :web_sockets, :as => \"_sockets\", :member => { :message => :post }\n\n  ##\n  # Styleguide\n  unless GitHub.enterprise?\n    map.with_options :controller => 'styleguide', :requirements => { :reference => /.*/ } do |styleguide|\n      styleguide.get '/styleguide/css',                   :to => 'css'\n      styleguide.get '/styleguide/css/:reference',        :to => 'css'\n      styleguide.get '/styleguide/templates',             :to => 'templates'\n      styleguide.get '/styleguide/templates/:reference',  :to => 'templates'\n      styleguide.get '/styleguide/javascript',            :to => 'javascript'\n      styleguide.get '/styleguide/javascript/:reference', :to => 'javascript'\n      styleguide.get '/styleguide/ruby',                  :to => 'ruby'\n      styleguide.get '/styleguide/ruby/:reference',       :to => 'ruby'\n      styleguide.get '/styleguide/words',                 :to => 'words'\n      styleguide.get '/styleguide/icons',                 :to => 'icons'\n      styleguide.get '/styleguide/mobile',                :to => 'mobile'\n      styleguide.get '/styleguide/mobile/:reference',     :to => 'mobile'\n      styleguide.get '/styleguide',                       :to => 'index'\n    end\n  end\n\n  ##\n  # Addons\n  map.with_options :path_prefix => '/addons', :controller => 'addons' do |addons|\n    addons.get '/overview', :to => 'overview', :as => 'addons_overview'\n    addons.get '/yours',    :to => 'yours',    :as => 'your_addons'\n    addons.get '/about',    :to => 'about',    :as => 'about_addons'\n  end\n  map.with_options :path_prefix => '/addons', :controller => 'addon_installations' do |installations|\n    installations.get '/installed', :to => \"index\", :as => 'installed_addons'\n  end\n  map.resources :addons, :controller => 'addons'\n  map.resources :addon_installations, :controller => 'addon_installations'\n\n  if GitHub.raw_domain?\n    ##\n    # Raw Blobs\n    map.with_options :conditions => { :subdomain => 'raw' } do |raw|\n      raw.get '/gist/:gist_id/:sha/*name', :to => 'gists#raw',\n        :gist_id => /[a-z0-9]{20}|\\d+/, :sha => /[a-f0-9]{40}?/, :raw => true\n\n      raw.get '/gist/:gist_id/*name', :to => 'gists#raw',\n        :gist_id => /[a-z0-9]{20}|\\d+/, :raw => true\n\n      raw.get '/wiki/:user_id/:repository/:name', :to => 'wiki#show',\n        :repository => RepoRegexp, :raw => true, :name => /.+/, :version => nil, :as => 'raw_host_wiki'\n\n      raw.get '/:user_id/:repository/:name/*path', :to => 'blob#raw',\n       :repository => RepoRegexp, :name => /.+/, :raw => true, :as => 'raw_host_blob'\n\n      raw.get '/*path', :to => 'application#redirect_to_main_domain'\n    end\n  end\n\n  if GitHub.identicons_enabled?\n    map.with_options :conditions => { :method => :get }, :controller => 'identicons', :action => 'show' do |id|\n      id.identicon       '/identicons/:id.png', :id => /[a-z0-9]{32}/\n      id.user_identicon  '/identicons/:user_login.png'\n    end\n  end\n\n  #orgs-next\n\n  map.with_options :path_prefix => \"/teams\" do |teams|\n    teams.get     \"/:org\",          :to => \"orgs/teams#index\"\n    teams.post    \"/:org\",          :to => \"orgs/teams#create\"\n    teams.get     \"/:org/:team_id\", :to => \"orgs/teams#show\"\n    teams.put     \"/:org/:team_id\", :to => \"orgs/teams#update\"\n    teams.delete  \"/:org/:team_id\", :to => \"orgs/teams#destroy\"\n    teams.post    \"/:org/:team_id/restore\", :to => \"orgs/teams#restore\", :as => :restore_team\n\n    teams.post    \"/:org/:team_id/join\", :to => \"orgs/teams#join\"\n  end\n\n  map.with_options :path_prefix => \"/teams/:org/:team_id\" do |team|\n    team.post   \"/members\",             :to => \"orgs/teams/members#create\"\n    team.get    \"/members/suggestions\", :to => \"orgs/teams/members#suggestions\"\n    team.with_options :controller => 'orgs/teams/members', :member => /.*/ do |team_members|\n      team_members.connect '/members/:member', :action => 'update',  :conditions => { :method => :put }\n      team_members.connect '/members/:member', :action => 'destroy', :conditions => { :method => :delete }\n    end\n  end\n\n  map.with_options :path_prefix => \"/orgs/:org\" do |org|\n    org.get \"/\", :to => \"orgs#show\"\n\n    org.get    \"/people\",             :to => \"orgs/people#index\"\n    org.get    \"/members\",            :to => \"orgs/people#index\"\n    org.get    \"/guests\",             :to => \"orgs/people#index\"\n    org.get    \"/admins\",             :to => \"orgs/people#index\"\n    org.post   \"/people\",             :to => \"orgs/people#create\"\n    org.get    \"/people/new\",         :to => \"orgs/people#new\"\n    org.get    \"/people/suggestions\", :to => \"orgs/people#suggestions\"\n    org.get    \"/people/:login\",      :to => \"orgs/people#show\"\n    org.get    \"/guests/:login\",      :to => \"orgs/people#show\"\n    org.put    \"/people/:login\",      :to => \"orgs/people#update\"\n    org.delete \"/people/:login\",      :to => \"orgs/people#destroy\"\n\n    org.get    \"/repositories\",        :to => \"orgs/repositories#index\"\n    org.get    \"/repositories/search\", :to => \"orgs/repositories#search\"\n\n    org.post   \"/notes\",                         :to => \"orgs/notes#create\"\n    org.get    \"/notes/suggestions\",             :to => \"orgs/notes#suggestions\"\n    org.delete \"/notes/:id\",                     :to => \"orgs/notes#destroy\"\n    org.post   \"/notes/:note_id/star\",           :to => \"orgs/notes#star\"\n    org.post   \"/notes/:note_id/unstar\",         :to => \"orgs/notes#unstar\"\n    org.post   \"/notes/:note_id/comments\",       :to => \"orgs/note_comments#create\"\n    org.delete \"/notes/:note_id/comments/:id\",   :to => \"orgs/note_comments#destroy\"\n\n    org.get    \"/teams\", :to => \"orgs/teams#index\"\n    org.post   \"/teams\", :to => \"orgs/teams#create\"\n    org.get    \"/teams/new\", :to => \"orgs/teams#new\"\n\n    org.post   \"/invite\",     :to => \"orgs/invitations#create\"\n    org.delete \"/invite/:id\", :to => \"orgs/invitations#destroy\"\n\n    org.resources :billing_managers, :controller => \"orgs/billing_managers\"\n  end\n\n  ##\n  # Gists\n  gist_options =\n    if GitHub.gist_domain?\n      { :conditions => { :subdomain => 'gist' } }\n    else\n      { :path_prefix  => '/gist' }\n    end\n\n  map.with_options gist_options do |gist|\n    gist.preview  '/preview', :controller => 'site', :action => 'preview'\n\n    gist.resources :gists,\n      :member     => { :download => :get },\n      :collection => { :search => :get }\n\n    if GitHub.gist_domain?\n      gist.login    '/login',     :controller => 'sessions', :action => 'new'\n      gist.logout   '/logout',    :controller => 'sessions', :action => 'destroy'\n      gist.resource :session\n      gist.connect '/login/remote/:login/:stamp/:nonce', :controller => 'sessions', :action => 'remote_login'\n      gist.connect '/logout/remote',                     :controller => 'sessions', :action => 'remote_logout'\n    end\n\n    gist.get  '/', :to => 'gists#new', :as => :gist_home\n    gist.post '/', :to => 'gists#new'\n\n    gist.with_options :controller => 'gists', :gist_id => /[a-z0-9]{20}|\\d+/ do |raw|\n      raw.get '/raw/:gist_id/:sha/*name', :sha => /[a-f0-9]{40}?/, :to => 'raw', :as => :raw_file\n      raw.get '/raw/:gist_id/*name', :to => 'raw'\n    end\n\n    gist.prev_gist '/:gist_id/:version_sha',   :controller => 'gists', :action => 'private_show',\n                                               :gist_id => /[a-z0-9]{20}|\\d+/,\n                                               :version_sha => /[a-f0-9]{40}?/,\n                                               :conditions => { :method => :get }\n\n    gist.get '/mine',    :to => 'gists#mine', :as => :my_gists\n    gist.get '/starred', :to => 'gists#starred', :as => :starred_gists\n\n    gist.post   '/fork/:gist_id',   :to => 'gists#fork',   :gist_id => /[a-z0-9]{20}|\\d+/, :as => :fork_gist\n    gist.delete '/delete/:gist_id', :to => 'gists#delete', :gist_id => /[a-z0-9]{20}|\\d+/, :as => :delete_gist\n    gist.post   '/star/:gist_id',   :to => 'gists#star',   :gist_id => /[a-z0-9]{20}|\\d+/, :as => :star_gist\n    gist.post   '/unstar/:gist_id', :to => 'gists#unstar',   :gist_id => /[a-z0-9]{20}|\\d+/, :as => :unstar_gist\n\n    {:public => /\\d+?/, :private => /[a-z0-9]{20}?/}.each do |access, gist_id_regex|\n      gist.with_options(:controller => 'gists', :gist_id => gist_id_regex, :conditions => {:method => :get}) do |access_gist|\n        # private_gist / public_gist\n        access_gist.send(\"#{access}_gist\", \"/:gist_id\", :action => \"#{access}_show\")\n        # embed\n        access_gist.connect \"/:gist_id.js\",   :action => \"#{access}_embed\"\n        access_gist.connect \"/:gist_id.pibb\", :action => \"#{access}_embed\", :pibb => true\n        access_gist.connect \"/:gist_id.json\", :action => \"#{access}_embed\", :json => true\n      end\n    end\n\n    gist.get '/:gist_id.txt', :gist_id => /[a-z0-9]{20}|\\d+/, :to => 'gists#raw', :as => :gist_text\n    gist.get '/:name', :to => 'gists#public_list', :as => :user_gists\n    gist.get '/:name.:format', :to => 'gists#public_list'\n\n    ##\n    # Gist Comments\n    gist.post   '/:gist_id/comment',     :to => 'gist_comments#create',  :as => :create_gist_comment\n    gist.delete '/:gist_id/comment/:id', :to => 'gist_comments#destroy', :as => :destroy_gist_comment\n    gist.put    '/:gist_id/comment/:id', :to => 'gist_comments#update',  :as => :update_gist_comment\n    gist.get    '/admin/fake_login/:id', :to => 'admin#fake_login'\n  end\n\n\n  ##\n  # User Public Keys\n  map.resources :public_keys, :path_prefix  => '/account', :only => [:edit, :create, :update, :destroy]\n  map.resources :deploy_keys, :path_prefix  => '/:user_id/:repository',\n                              :controller   => 'public_keys',\n                              :requirements => { :repository => RepoRegexp }\n  # Delete after sudo_filter_enabled? goes away\n  map.confirm_public_key '/account/public_keys/create', :controller => 'public_keys', :action => 'create_after_confirmation'\n  # Delete after sudo_filter_enabled? goes away\n  map.confirm_deploy_key '/:user_id/:repository/public_keys/create', :controller => 'public_keys', :action => 'create_after_confirmation', :repository => RepoRegexp\n  map.verify_public_key '/account/public_keys/:id/verify', :controller => 'public_keys', :action => 'verify'\n  map.verify_deploy_key '/:user_id/:repository/deploy_keys/:id/verify', :controller => 'public_keys', :action => 'verify', :repository => RepoRegexp\n\n  ##\n  # Coupons\n  map.resources     :coupons, :path_prefix => 'admin', :controller => 'admin/coupons',\n                    :collection => { :groups => :get, :revoke => :delete }\n  map.coupon        '/redeem/:code',           :controller => 'billing', :action => 'coupon'\n  map.connect       '/coupon/:code',           :controller => 'billing', :action => 'coupon'\n  map.connect       '/coupons/:code',          :controller => 'billing', :action => 'coupon'\n  map.connect       '/$/:code',                :controller => 'billing', :action => 'coupon'\n  map.redeem_coupon '/billing/coupons/redeem', :controller => 'billing',\n                                               :action     => 'redeem_coupon'\n\n  map.post '/billing/extra', :to => 'billing#extra_update',\n    :as => 'billing_extra_update'\n\n  ##\n  # Hunts and Hounds\n  map.resources :hunts, :path_prefix => 'admin',\n                :controller => 'admin/hunts',\n                :member => {:requeue => :put, :recall => :put}\n\n  map.connect '/admin/hounds/list_available_tasks',\n              :controller => 'admin/hounds', :action => 'list_available_tasks',\n              :hound_klass => /.+/,\n              :conditions => { :method => :get }\n\n  map.resources :hounds, :path_prefix => 'admin',\n                :controller => 'admin/hounds',\n                :only => [:show, :destroy]\n\n  map.resources :interaction, :path_prefix => 'admin',\n                :controller => 'admin/interaction',\n                :only => [:index],\n                :collection => {\n                  :active_signups => :get,\n                  :paying_customers => :get,\n                  :global_activity => :get\n                }\n\n  map.resources :growth, :path_prefix => 'admin',\n              :controller => 'admin/growth',\n              :only => [:index],\n              :collection => {\n                :new_business => :get,\n                :upgrades => :get,\n                :lost_business => :get,\n                :new_users => :get,\n                :lost_users => :get\n              }\n\n  ##\n  # Admin\n  map.with_options :controller => 'admin' do |admin|\n\n    admin.get        '/admin',                        :to => 'index'\n    admin.get        '/admin/api_whitelist',          :to => 'api_whitelist'\n    admin.get        '/admin/jobs',                   :to => 'jobs'\n    admin.get        '/admin/fake_login/:id',         :to => 'fake_login'\n    admin.post       '/admin/fake_login/:id',         :to => 'fake_login'\n    admin.get        '/admin/back_to_the_login',      :to => 'back_to_the_login'\n    admin.get        '/admin/proxystat',              :to => 'proxystat'\n    admin.get        '/admin/repo_ajax_search',       :to => 'repo_ajax_search'\n    admin.get        '/admin/repos',                  :to => 'repos'\n    admin.get        '/admin/repositories',           :to => 'repositories'\n    admin.get        '/admin/search_users',           :to => 'search_users'\n    admin.get        '/admin/site_event',             :to => 'site_event'\n    admin.get        '/admin/transfers',              :to => 'transfers'\n    admin.get        '/admin/users',                  :to => 'users'\n    admin.post       '/admin/unlock_user',            :to => 'unlock_user'\n    admin.post       '/admin/disable_two_factor',     :to => 'disable_two_factor'\n    admin.put        '/admin/receive_payment/:id',    :to => 'receive_payment'\n    admin.put        '/admin/record_payment/:id',     :to => 'record_payment'\n    admin.put        '/admin/spam_user/:id',          :to => 'spam_user'\n    admin.put        '/admin/unspam_user/:id',        :to => 'unspam_user'\n    admin.put        '/admin/whitelist_user/:id',     :to => 'whitelist_user'\n    admin.delete     '/admin/spam_users',             :to => 'spam_users'\n\n  end\n\n  map.with_options :controller => 'admin/backscatter' do |backscatter|\n    backscatter.get        '/admin/backscatter',             :to => 'index'\n    backscatter.delete     '/admin/backscatter/destroy',     :to => 'destroy'\n  end\n\n  ##\n  # Stafftools: The Next Generation\n  map.connect \"/stafftoolsTNG/*args\", :controller => 'stafftools/site',\n              :action => 'redirect'\n  map.with_options :path_prefix => \"/stafftools\" do |stafftools|\n    stafftools.with_options :controller => 'stafftools' do |root|\n      root.get \"/\", :to => 'index', :as => 'stafftools'\n    end\n\n    if GitHub.reports_enabled?\n      stafftools.with_options :controller => 'stafftools/reports' do |reports|\n        reports.get '/reports', :to => 'index', :as => 'stafftools_reports'\n        reports.get '/reports/dormant_users.:format', :to => 'dormant_users', :as => 'stafftools_dormant_users_reports'\n        reports.get '/reports/active_users.:format', :to => 'active_users', :as => 'stafftools_active_users_reports'\n        reports.get '/reports/suspended_users.:format', :to => 'suspended_users', :as => 'stafftools_suspended_users_reports'\n        reports.get '/reports/all_users.:format', :to => 'all_users', :as => 'stafftools_all_users_reports'\n        reports.get '/reports/all_organizations.:format', :to => 'all_organizations', :as => 'stafftools_all_organizations_reports'\n        reports.get '/reports/all_repositories.:format', :to => 'all_repositories', :as => 'stafftools_all_repositories_reports'\n      end\n    end\n\n    stafftools.with_options :controller => 'stafftools/site' do |site|\n      site.post '/ssh_audit', :to => 'ssh_audit', :as => :stafftools_ssh_audit\n    end\n\n    stafftools.with_options :controller => 'stafftools/search' do |search|\n      search.get '/search', :to => 'search', :as => :stafftools_search\n      search.get '/audit_log', :to => 'audit_log', :as => :stafftools_audit_log\n      search.get '/cname', :to => 'cname', :as => :stafftools_search_cname\n    end\n\n    stafftools.with_options :controller => 'stafftools/purgatory' do |purg|\n      purg.get  '/restore/:id', :to => 'status', :as => :stafftools_restore_repo\n      purg.post '/restore/:id', :to => 'restore'\n    end\n\n    stafftools.with_options :controller => 'stafftools/repositories' do |str|\n      str.get \"/repositories\", :to => 'index', :as => \"stafftools_repositories\"\n    end\n\n    stafftools.with_options :controller => 'stafftools/indexing' do |indexing|\n      indexing.get  '/indexing', :to => 'index', :as => :stafftools_indexing\n\n      indexing.post '/indexing/toggle_code_search',\n          :to => 'toggle_code_search', :as => :stafftools_indexing_toggle_code_search\n      indexing.post '/indexing/toggle_code_search_indexing',\n          :to => 'toggle_code_search_indexing', :as => :stafftools_indexing_toggle_code_search_indexing\n\n      indexing.post '/indexing/toggle_backfill',\n          :to => 'toggle_backfill', :as => :stafftools_indexing_toggle_backfill\n      indexing.post '/indexing/start_backfill_worker',\n          :to => 'start_backfill_worker', :as => :stafftools_indexing_start_backfill_worker\n      indexing.post '/indexing/reset_backfill',\n          :to => 'reset_backfill', :as => :stafftools_indexing_reset_backfill\n\n      indexing.post '/indexing/toggle_issues_repair',\n          :to => 'toggle_issues_repair', :as => :stafftools_indexing_toggle_issues_repair\n      indexing.post '/indexing/start_issues_repair_worker',\n          :to => 'start_issues_repair_worker', :as => :stafftools_indexing_start_issues_repair_worker\n      indexing.post '/indexing/reset_issues_repair',\n          :to => 'reset_issues_repair', :as => :stafftools_indexing_reset_issues_repair\n    end\n\n    stafftools.with_options :controller => \"stafftools/accounting\" do |accounting|\n      accounting.get  \"/accounting\",\n          :to => \"index\", :as => :stafftools_accounting\n      accounting.post \"/accounting/orange_transactions\",\n          :to => \"orange_transactions\", :as => :stafftools_accounting_orange_transactions\n      accounting.post \"/accounting/plan_changes\",\n          :to => \"plan_changes\", :as => :stafftools_accounting_plan_changes\n    end\n\n    stafftools.with_options :controller => 'stafftools/users/capabilities' do |user_capabilities|\n      user_capabilities.get \"/:user/capabilities\", :to => \"index\", :as => \"stafftools_user_capabilities\"\n      user_capabilities.post \"/:user/rebuild_capabilities\", :to => \"rebuild_capabilities\", :as => \"stafftools_user_rebuild_capabilities\"\n      user_capabilities.delete \"/capabilities/revoke\", :to => \"destroy\", :as => \"stafftools_user_destroy_capability\"\n    end\n\n    stafftools.with_options :controller => 'stafftools/teams/capabilities' do |team_capabilities|\n      team_capabilities.delete '/:user/teams/:team/capabilities/revoke', :to => 'destroy', :as => 'stafftools_team_destroy_capability'\n    end\n\n    stafftools.with_options :controller => 'stafftools/users' do |users|\n      users.get \"/users\", :to => 'index', :section => 'users',\n                :as => \"stafftools_users\"\n\n      users.get \"/organizations\", :to => 'organizations',\n                :as => \"stafftools_organizations\"\n\n      users.get \"/organizations/paid\", :to => 'paid_organizations',\n                :as => \"stafftools_paid_organizations\"\n\n      indexes = %w(paid spam gift teacher site_admin suspended dormant deleted)\n      indexes.each do |val|\n        users.get \"/users/#{val}\", :to => val, :section => 'users',\n                  :as => \"stafftools_#{val}_users\"\n      end\n\n      users.stafftools_invite_user         \"/invite\",                      :action => 'invite'\n      users.stafftools_dismiss_license_notice \"/dismiss_license_notice\",      :action => 'dismiss_license_notice'\n      users.stafftools_destroy_user        \"/:user\",                         :action => 'destroy', :conditions => { :method => :delete }\n\n      users.post \"/users/restore\", :to => 'restore', :as => \"stafftools_restore_user\"\n\n      users.get \"/:user\", :to => 'show', :as => :stafftools_user\n      users.get \"/:user/team/:team_id\", :to => 'team', :as => :stafftools_user_team\n\n      gets = %w(admin billing history emails keys orgs security_history log\n                search database purgatory teams show_card watching\n                repositories public_repos collab_repos starred_repos\n                contributing_repos comments issue_comments reindex\n                user_interactions)\n      gets.each do |val|\n        users.get \"/:user/#{val}\", :to => val, :as => \"stafftools_user_#{val}\"\n      end\n\n      users.with_options :controller => 'stafftools/applications' do |apps|\n        apps.get  \"/:user/applications\", :to => 'index',\n                  :as => :stafftools_user_applications\n        apps.get  \"/:user/applications/:id\", :to => 'show',\n                  :as => :stafftools_user_application\n\n        apps.post \"/:user/applications/:id\", :to => 'update',\n                  :as => :stafftools_user_application_update\n        posts = %w(suspend enable)\n        posts.each do |action|\n          apps.post \"/:user/applications/:id/#{action}\", :to => action,\n            :as => \"stafftools_user_application_#{action}\"\n        end\n      end\n\n      users.resources :addons,\n        :controller => 'stafftools/addons',\n        :path_prefix => '/stafftools/:user',\n        :name_prefix => 'stafftools_user_'\n\n      posts = %w(set_staff charge lock_billing apply_coupon unlock_billing\n                 rename refund_transaction reset_cc_throttle refund_all\n                 rebuild_commit_contributions block_user unblock_user\n                 unfollow_user)\n      posts.each do |val|\n        users.post \"/:user/#{val}\", :to => val, :as => \"stafftools_user_#{val}\"\n      end\n\n      users.post \"/users/suspend_dormant\", :to => \"suspend_dormant\", :as => \"stafftools_users_suspend_dormant\"\n\n      users.put \"/:user/remove_watch/:repo_id\", :to => 'remove_watch',\n                :as => :stafftools_user_remove_watch\n\n      puts = %w(change_plan set_email add_email edu reset_password\n                add_note flag_spam flag_all_spam despamify toggle_suspension\n                request_verification disable_email_notifications)\n      puts.each do |val|\n        users.put \"/:user/#{val}\", :to => val, :as => \"stafftools_user_#{val}\"\n      end\n\n      deletes = %w(remove_email clear_activity clear_staff)\n      deletes.each do |val|\n        users.delete \"/:user/#{val}\", :to => val, :as => \"stafftools_user_#{val}\"\n      end\n\n      users.with_options :controller => 'stafftools/ldap' do |ldap|\n        ldap.get  '/users/ldap', :to => 'search', :as => 'stafftools_search_ldap_users'\n        ldap.post '/users/ldap', :to => 'create', :as => 'stafftools_create_ldap_users'\n      end\n    end\n\n    stafftools.with_options :controller => 'stafftools/repositories/capabilities', :repository => RepoRegexp do |repo_capabilities|\n      repo_capabilities.get '/:user_id/:repository/capabilities', :to => 'index', :as => 'stafftools_repo_capabilities'\n      # TODO: Rip this route out when we're fully on caps\n      repo_capabilities.get \"/:user_id/:repository/members\", :to => 'index'\n      repo_capabilities.post '/:user_id/:repository/rebuild_capabilities', :to => 'rebuild_capabilities', :as => 'stafftools_repo_rebuild_capabilities'\n      repo_capabilities.delete '/:user_id/:repository/capabilities/revoke', :to => 'destroy', :as => 'stafftools_repo_revoke_capability'\n      repo_capabilities.get '/:user_id/:repository/entry', :to => 'entry', :as => 'stafftools_repo_capability_entry'\n    end\n\n    stafftools.with_options :controller => 'stafftools/repositories', :repository => RepoRegexp do |repos|\n      repos.get \"/:user_id/:repository\", :to => 'show',\n        :as => :stafftools_repo\n\n      gets = %w(admin network disk pages uploads search languages events\n                security database pushlog notifications reindex reindex_code\n                reindex_issues reindex_discussions fsck health hooks redirects\n                discussions)\n      gets.each do |val|\n        repos.get \"/:user_id/:repository/#{val}\", :to => val,\n                  :as => \"stafftools_repo_#{val}\"\n      end\n\n      repos.get \"/:user_id/:repository/commit_contribution_status/:sha\", :to => 'commit_contribution_status',\n        :as => 'stafftools_repo_commit_contribution_status'\n\n      posts = %w(change_root detach extract reparent force_public analyze_language\n                 mirror dmca size_disable tos_disable admin_disable rebuild_network_graph\n                 rebuild_ref_cache toggle_allow_force_push rebuild_pages\n                 toggle_bitmaps transfer rebuild_commit_contributions\n                 toggle_permission toggle_allow_git_graph enable_discussions)\n\n      posts.each do |val|\n        repos.post \"/:user_id/:repository/#{val}\", :to => val,\n                     :as => \"stafftools_repo_#{val}\"\n      end\n\n      repos.post \"/:user_id/:repository/discussions/:id\", :to => \"publish_discussion\", :as => :stafftools_repo_publish_discussion\n      repos.post \"/:user_id/:repository/redirects\", :to => \"create_redirect\"\n\n      repos.delete \"/:user_id/:repository\",               :to => 'destroy'\n      repos.delete \"/:user_id/:repository/dmca\",          :to => 'remove_dmca'\n      repos.delete \"/:user_id/:repository/disable\",       :to => 'remove_disable', :as => :stafftools_repo_disable\n      repos.delete \"/:user_id/:repository/transfer\",      :to => 'abort_transfer'\n      repos.delete \"/:user_id/:repository/purge_events\",  :to => 'purge_events', :as => :stafftools_repo_purge_events\n      repos.delete \"/:user_id/:repository/redirects/:id\", :to => 'delete_redirect'\n      repos.delete \"/:user_id/:repository/discussions/:id\", :to => 'delete_discussion', :as => :stafftools_repo_delete_discussion\n    end\n\n    stafftools.with_options :controller => 'stafftools/pull_requests', :repository => RepoRegexp do |pulls|\n      pulls.get  \"/:user_id/:repository/pulls\",          :to => 'index', :as => :stafftools_repo_pulls\n\n      pulls.post \"/:user_id/:repository/pull/:id/close\", :to => 'close', :as => :stafftools_repo_pull_close\n      pulls.post \"/:user_id/:repository/pull/:id/merge\", :to => 'merge', :as => :stafftools_repo_pull_merge\n      pulls.post \"/:user_id/:repository/pull/:id/open\",  :to => 'open',  :as => :stafftools_repo_pull_open\n      pulls.post \"/:user_id/:repository/pull/:id/sync\",  :to => 'sync',  :as => :stafftools_repo_pull_sync\n    end\n  end\n\n  ##\n  # Support archive\n  # http://support.github.com/discussions/sales/658-interest-in-githubfi\n  map.connect '/discussions/:category/:thread', :controller => 'site', :action => 'support_bounce'\n  map.connect '/discussions/:category',         :controller => 'site', :action => 'support_bounce'\n\n  map.with_options :requirements => { :repository => RepoRegexp } do |repo|\n    repo.with_options :controller => 'wiki' do |wiki|\n      ##\n      # My Precious\n      # using 'gollum' in route names so it doesn't clash with 'wiki'.  Rename when old school wikis are removed.\n      pfx = '/:user_id/:repository/wiki'\n      wiki.connect   \"#{pfx}/_preview\",   :action => 'preview', :conditions => { :method => [:put, :post] }\n\n      page_id = /[^ \\/\\<\\>]+/\n      wiki.connect \"#{pfx}\",     :action => 'create',  :conditions => {:method => :post}\n      wiki.connect \"#{pfx}/:id\", :action => 'update',  :conditions => {:method => :put},    :id => page_id\n      wiki.connect \"#{pfx}/:id\", :action => 'destroy', :conditions => {:method => :delete}, :id => page_id\n\n      wiki.wikis          \"#{pfx}\",              :action => 'index'\n      wiki.connect        \"#{pfx}.:format\",      :action => 'index'\n      wiki.connect        \"#{pfx}/_history\",     :action => 'history'\n      wiki.connect        \"#{pfx}/_compare\",     :action => 'compare'\n      wiki.connect        \"#{pfx}/_compare/:version_list\", :action => 'compare', :version_list => /.*/\n      wiki.wiki_pages     \"#{pfx}/_pages\",       :action => 'pages'\n      wiki.new_wiki       \"#{pfx}/_new\",         :action => 'new'\n      wiki.connect        \"#{pfx}/_revert/:older/:newer\", :action => 'revert', :older => nil, :newer => nil\n      wiki.connect        \"#{pfx}/:id/_edit\",    :action => 'edit',    :id => page_id\n      wiki.current        \"#{pfx}/:id/_current\", :action => 'current', :id => page_id\n      wiki.connect        \"#{pfx}/:id/_history\", :action => 'history', :id => page_id\n      wiki.connect        \"#{pfx}/:id/_compare\", :action => 'compare', :id => page_id\n      wiki.connect        \"#{pfx}/:id/_compare/:version_list\", :action => 'compare', :version_list => /.*/, :id => page_id\n      wiki.connect        \"#{pfx}/:id/_revert/:older/:newer\",  :action => 'revert', :older => nil, :newer => nil, :id => page_id\n      wiki.wiki           \"#{pfx}/:id\",                        :action => 'show', :id => page_id, :conditions => { :method => :get }\n      wiki.connect        \"#{pfx}/:id/:version/*path\",         :action => 'show', :id => page_id, :conditions => { :method => :get }\n      wiki.connect        \"#{pfx}s/*args\", :action => 'redirect'\n    end\n  end\n\n  # Wiki Help\n  map.with_options :controller => 'wiki' do |wiki|\n    wiki.connect '/wiki', :action => 'help_redirect'\n    wiki.connect '/wiki/help', :action => 'dismiss_help', :conditions => {:method => :delete}\n  end\n\n  map.with_options :requirements => {:repository => RepoRegexp } do |m|\n    # Discussions\n    m.discussions '/:user_id/:repository/discussions', :controller => 'unified_discussions', :action => 'index', :conditions => {:method => :get}\n    m.discussions_old '/:user_id/:repository/discussions-old', :controller => 'discussions', :action => 'index', :conditions => {:method => :get}\n    m.resources :discussions, :path_prefix => '/:user_id/:repository' do |discussion|\n      discussion.resources :discussion_messages, :requirements => { :repository => RepoRegexp },\n        :member => { :versions => :get, :revert => :put, :admin => :put }\n    end\n    m.discussion_message '/:user_id/:repository/discussions/:discussion_id/discussion_messages/:id', :controller => 'discussion_messages', :action => 'show', :conditions => { :method => :get}\n    m.discussion_messages '/:user_id/:repository/discussions/:discussion_id/discussion_messages', :controller => 'discussion_messages', :action => 'index', :conditions => { :method => :get}\n    m.discussion_message_admin '/:user_id/:repository/discussions/:discussion_id/discussion_messages/:id/admin/:event', :controller => 'discussion_messages', :action => 'admin', :conditions => { :method => :put}\n    m.discussion_message_raw '/:user_id/:repository/discussions/:discussion_id/:message_id.txt', :controller => 'discussions', :action => 'message_raw'\n\n    m.user_content_versions '/:user_id/:repository/versions/:id', :controller => \"user_content_versions\", :action => \"index\"\n  end\n\n  # Issues-next\n  map.resources :milestones, :path_prefix => '/:user_id/:repository/issues', :requirements => { :repository => RepoRegexp }, :member => { :toggle => :put }\n\n  map.issues_created_by    '/:user_id/:repository/issues/created_by/:creator',  :repository => RepoRegexp, :controller => 'issues', :action => 'index'\n  map.issues_assigned      '/:user_id/:repository/issues/assigned/:assignee',   :repository => RepoRegexp, :controller => 'issues', :action => 'index'\n  map.issues_mentioned     '/:user_id/:repository/issues/mentioned/:mentioned', :repository => RepoRegexp, :controller => 'issues', :action => 'index'\n  map.issues_close         '/:user_id/:repository/issues/close',                :repository => RepoRegexp, :controller => 'issues', :action => 'close',         :conditions => {:method => :put}\n  map.issues_reopen        '/:user_id/:repository/issues/reopen',               :repository => RepoRegexp, :controller => 'issues', :action => 'reopen',        :conditions => {:method => :put}\n  map.issues_set_milestone '/:user_id/:repository/issues/milestone',            :repository => RepoRegexp, :controller => 'issues', :action => 'set_milestone', :conditions => {:method => :put}\n  map.issues_set_assignee  '/:user_id/:repository/issues/assign',               :repository => RepoRegexp, :controller => 'issues', :action => 'set_assignee',  :conditions => {:method => :put}\n\n  ##\n  # Issues\n  map.resources :issues, :path_prefix  => '/:user_id/:repository',\n                         :requirements => { :repository => RepoRegexp },\n                         :member       => { :subscribe => :post, :unsubscribe => :post, :close => :post, :open => :post, :poll => :get, :show_partial => :get },\n                         :collection   => { :search => :get }\n\n  map.resources :drafts, :path_prefix  => '/:user_id/:repository',\n                         :requirements => { :repository => RepoRegexp },\n                         :only         => [:create, :update]\n\n  map.resources :issue_comments, :path_prefix  => '/:user_id/:repository',\n                                 :requirements => { :repository => RepoRegexp }\n\n  map.modify_label_assignment '/:user_id/:repository/issues/labels/modify_assignment', :repository => RepoRegexp, :controller => 'labels', :action => 'append',   :conditions => { :method => :put }\n  map.modify_label_assignment '/:user_id/:repository/issues/labels/modify_assignment', :repository => RepoRegexp, :controller => 'labels', :action => 'unappend', :conditions => { :method => :delete }\n\n  map.resources :labels, :path_prefix  => '/:user_id/:repository/issues',\n                         :requirements => { :repository => RepoRegexp, :id => /.+/ }\n\n  map.connect '/upload/policies/:model', :controller => :upload_policies,\n    :action => :create, :conditions => {:method => :post}\n  map.connect '/upload/:model/:id', :controller => :uploads, :action => :update,\n    :conditions => {:method => :put}\n  map.connect '/upload/:model/:id', :controller => :uploads, :action => :create,\n    :conditions => {:method => :post}\n\n  # Issue permalinks\n  # XXX: Legacy - this will 301 to /:user_id/:repository/issues/:id in the controller\n  map.connect '/:user_id/:repository/issues/issue/:id',\n    :controller => 'issues', :action => 'show', :repository => RepoRegexp, :legacy => true,\n    :conditions => { :method => :get }\n\n  ##\n  # New repository\n  map.get \"/new\",    :to => \"repositories#new\"\n  map.get \"/new/tr\", :to => \"repositories#create_braintree\"\n\n  ##\n  # Downloads\n  map.connect '/:user_id/:repository/downloads/refresh', :controller => 'downloads', :action => 'refresh', :repository => RepoRegexp\n  map.resources :downloads, :path_prefix  => '/:user_id/:repository', :requirements => { :repository => RepoRegexp }\n  map.qr_code '/:user_id/:repository/:file/qr_code',\n    :controller => 'downloads', :action => 'qr_code', :repository => RepoRegexp, :file => /.+/\n  map.connect '/downloads/:user_id/:repository/:name',\n    :controller => 'downloads', :action => 'show', :repository => RepoRegexp, :name => /.+/,\n    :conditions => { :method => :get }\n\n  ##\n  # Ajax\n  map.get '/users/ajax_repo_search', :to => 'users#ajax_repo_search'\n  map.post '/users/follow',          :to => 'users#follow'\n  map.post '/users/unfollow',        :to => 'users#unfollow'\n  map.userbox '/users/box/:id',      :controller => 'users', :action => 'box'\n  map.post '/users/set_protocol',    :to => 'users#set_protocol', :as => :user_set_protocol\n\n  # Autocomplete\n  map.connect '/autocomplete/users',    :controller => 'autocomplete', :action => 'users'\n\n  ##\n  # Languages\n  map.language  '/languages/:language', :controller => 'languages', :action => 'show', :conditions => { :method => :get }\n  map.connect   '/languages/:language/:action', :controller => 'languages', :conditions => { :method => :get }\n  map.languages '/languages',           :controller => 'languages', :action => 'index'\n\n  ##\n  # Code Search\n  map.code_search             '/search',          :controller => 'codesearch', :action => 'index'\n  map.advanced_code_search    '/search/advanced', :controller => 'codesearch', :action => 'advanced_search'\n  map.code_search_count       '/search/count',    :controller => 'codesearch', :action => 'count'\n  map.search                  '/search',          :controller => 'codesearch', :action => 'index'\n\n  ##\n  # Inbox\n  map.resources :messages, :as => 'inbox', :collection => {\n    :notifications => :get, :read_all_notifications => :post, :read_all => :post\n  }\n\n  ##\n  # Notifications\n  map.post '/notifications/mark', :to => 'notifications#mark', :as => :mark_notifications\n  map.with_options :controller => 'notifications' do |n|\n    n.all_notifications '/notifications/all', :action => 'index', :all => true\n    n.participating_notifications '/notifications/participating', :action => 'index', :filter => 'participating'\n    n.save_notification_settings '/notifications/settings', :action => 'save_handlers'\n    n.notifications_subscribe '/notifications/subscribe', :action => 'subscribe'\n    n.notifications_thread_subscribe '/notifications/thread', :action => 'thread_subscribe'\n    n.get '/notifications/thread_subscription', :to => 'thread_subscription', :as => 'notifications_thread_subscription'\n    n.save_notification_emails '/notifications/emails', :action => 'save_email_settings'\n    n.notification_beacon '/notifications/beacon/:data.gif', :action => 'beacon'\n    n.subscriptions '/watching', :action => 'subscriptions'\n    n.unsubscribe '/watching/unsubscribe', :action => 'unsubscribe', :method => :post\n    n.auto_subscriptions '/watching/auto', :action => 'toggle_auto'\n    n.email_mute '/notifications/unsubscribe/:data', :action => 'email_mute'\n    n.notifications '/notifications/:action'\n  end\n\n  #orgs-next\n\n  map.with_options :path_prefix => \"/teams\" do |teams|\n    teams.get     \"/:org\",                  :to => \"orgs/teams#index\"\n    teams.post    \"/:org\",                  :to => \"orgs/teams#create\"\n    teams.get     \"/:org/:team_id.:format\", :to => \"orgs/teams#show\"\n    teams.put     \"/:org/:team_id\",         :to => \"orgs/teams#update\"\n    teams.delete  \"/:org/:team_id\",         :to => \"orgs/teams#destroy\"\n\n    teams.post    \"/:org/:team_id/join\", :to => \"orgs/teams#join\"\n  end\n\n  map.with_options :path_prefix => \"/teams/:org/:team_id\" do |team|\n    team.post   \"/members\",             :to => \"orgs/teams/members#create\"\n    team.get    \"/members/suggestions\", :to => \"orgs/teams/members#suggestions\"\n    team.with_options :controller => 'orgs/teams/members', :member => /.*/ do |team_members|\n      team_members.connect '/members/:member', :action => 'update',  :conditions => { :method => :put }\n      team_members.connect '/members/:member', :action => 'destroy', :conditions => { :method => :delete }\n    end\n  end\n\n  ##\n  # Organizations\n  map.resources :organizations, :has_many => :repositories, :collection => {\n    :transform      => :post,\n    :transforming   => :get\n  }, :member => {\n    :ajax_your_repos  => :get,\n    :invite           => :get,\n    :billing_email    => :put,\n    :gravatar_email   => :put,\n    :ignore_upgrade   => :get\n  }\n\n  org_options = {\n    :controller  => 'organizations',\n    :path_prefix => '/organizations/:organization_id'\n  }\n  map.with_options org_options do |orgs|\n    orgs.connect      '/autocomplete/repos', :action => 'autocomplete_repos'\n    orgs.connect      '/',                   :action => 'show', :conditions => { :method => :get }\n    orgs.org_settings '/settings',           :action => 'edit'\n\n    orgs.org_receipts      '/billing/receipts',       :controller => 'billing', :action => 'receipts',      :target => \"organization\"\n    orgs.org_receipt       '/billing/receipt/:id',    :controller => 'billing', :action => 'receipt',       :target => \"organization\"\n    orgs.org_cc_update     '/billing/cc_update',      :controller => 'billing', :action => 'cc_update',     :target => \"organization\", :conditions => { :method => :post }\n    orgs.org_show_card     '/billing/show_card',      :controller => 'billing', :action => 'show_card',     :target => \"organization\"\n    orgs.org_redeem_coupon '/billing/coupons/redeem', :controller => 'billing', :action => 'redeem_coupon', :target => \"organization\"\n    orgs.org_extra_update  '/billing/extra',          :controller => 'billing', :action => 'extra_update',  :target => \"organization\", :conditions => { :method => :post }\n\n    orgs.leave_org        '/leave',             :action => 'leave',            :conditions => { :method => :post }\n    orgs.connect          '/member/:member',    :action => 'remove_member',    :conditions => { :method => :delete }\n    orgs.post   '/publicize/:member', :to => 'publicize_member', :as => :publicize_member\n    orgs.delete '/conceal/:member',   :to => 'conceal_member',   :as => :conceal_member\n\n    orgs.get '/rename_box', :to => 'rename_box', :as => :org_rename_box\n    orgs.put '/rename',     :to => 'rename',     :as => :org_rename\n\n    orgs.private_org_feed '/:user_id.private.:format', :action => 'private_feed'\n  end\n  map.with_options :controller => 'organizations' do |orgs|\n    orgs.new_organization '/account/organizations/new',         :action => 'new'\n    orgs.connect          '/account/organizations/new/:coupon', :action => 'new'\n  end\n\n  ##\n  # Teams\n  team_options = {\n    :controller  => 'teams',\n    :path_prefix => '/organizations/:organization_id/teams'\n  }\n  map.with_options team_options do |teams|\n    teams.connect '/', :action  => 'index'\n\n    teams.with_options :path_prefix => team_options[:path_prefix] + '/:team_id', :team_id => /\\d+/ do |team|\n      team.connect '/',                 :action => 'delete',       :conditions => { :method => :delete }\n      team.connect '/',                 :action => 'update',       :conditions => { :method => :put }\n      team.connect '/',                 :action => 'show',         :conditions => { :method => :get }\n      team.connect '/member/:member',   :action => 'add_member',    :conditions => { :method => :post },   :member => /.+/\n      team.connect '/member/:member',   :action => 'remove_member', :conditions => { :method => :delete }, :member => /.+/\n      team.connect '/repo/:user/:repo', :action => 'add_repo',      :conditions => { :method => :post },   :repo   => RepoRegexp\n      team.connect '/repo/:user/:repo', :action => 'remove_repo',   :conditions => { :method => :delete }, :repo   => RepoRegexp\n      team.connect '/repo/:repo',       :action => 'add_repo',      :conditions => { :method => :post },   :repo   => RepoRegexp\n      team.connect '/repo/:repo',       :action => 'remove_repo',   :conditions => { :method => :delete }, :repo   => RepoRegexp\n\n      team.post   '/create',  :to => 'create'\n      team.put    '/update',  :to => 'update'\n      team.delete '/delete',  :to => 'delete'\n\n      team.connect '/:action'\n    end\n\n    teams.connect '/:action'\n  end\n\n  ##\n  # Security Dashboard\n  map.security_dashboard '/organizations/:organization_id/security', :controller => 'security', :action => 'index'\n\n  ##\n  # Pull Requests Dashboard\n  map.my_pull_requests       '/dashboard/pulls',                           :controller => 'dashboard/pull_requests', :action => 'index'\n  map.owned_pull_requests    '/dashboard/pulls/owned',                     :controller => 'dashboard/pull_requests', :action => 'owned'\n  map.public_pull_requests   '/dashboard/pulls/public',                    :controller => 'dashboard/pull_requests', :action => 'public'\n  map.private_pull_requests  '/dashboard/pulls/private',                   :controller => 'dashboard/pull_requests', :action => 'private'\n  map.for_repo_pull_requests '/dashboard/pulls/for/:user_id/:repository',  :controller => 'dashboard/pull_requests', :action => 'for_repo', :requirements => {:repository => RepoRegexp}\n  map.dismiss_bootcamp       '/dashboard/dismiss_bootcamp',                :controller => 'dashboard', :action => 'dismiss_bootcamp'\n\n  map.with_options :path_prefix => '/organizations/:organization_id' do |org|\n    org.org_pull_requests '/dashboard/pulls',         :controller => 'dashboard/pull_requests', :action => 'index'\n    org.connect           '/dashboard/pulls/public',  :controller => 'dashboard/pull_requests', :action => 'public'\n    org.connect           '/dashboard/pulls/private', :controller => 'dashboard/pull_requests', :action => 'private'\n\n    ##\n    # Org Issues Dashboard\n    org.org_issues            '/dashboard/issues',            :controller => 'dashboard/issues', :action => 'index'\n    org.org_issues_assigned   '/dashboard/issues/assigned',   :controller => 'dashboard/issues', :action => 'index', :assigned => true\n    org.org_issues_created_by '/dashboard/issues/created_by', :controller => 'dashboard/issues', :action => 'index', :created_by => true\n    org.org_issues_repos      '/dashboard/issues/repos',      :controller => 'dashboard/issues', :action => 'index', :repos => true\n\n    ##\n    # Org Status Dashboard\n    org.org_status            '/dashboard/status',            :controller => 'dashboard/status', :action => 'index'\n\n    org.org_repo_pull_requests '/dashboard/pulls/for/:user_id/:repository',  :controller => 'dashboard/pull_requests', :action => 'for_repo', :requirements => {:repository => RepoRegexp}\n  end\n\n  ##\n  # Issues Dashboard\n  map.issues_dashboard '/dashboard/issues', :controller => 'dashboard/issues', :action => 'index'\n  map.issues_dashboard_assigned   '/dashboard/issues/assigned',   :controller => 'dashboard/issues', :action => 'index', :assigned => true\n  map.issues_dashboard_created_by '/dashboard/issues/created_by', :controller => 'dashboard/issues', :action => 'index', :created_by => true\n  map.issues_dashboard_repos      '/dashboard/issues/repos',      :controller => 'dashboard/issues', :action => 'index', :repos => true\n\n  ##\n  # Status Dashboard\n  map.status_dashboard '/dashboard/status', :controller => 'dashboard/status', :action => 'index'\n\n  ##\n  # Dashboard\n  map.dashboard '/dashboard',               :controller => 'dashboard', :action => 'index'\n  map.connect   '/dashboard/:action',       :controller => 'dashboard'\n  map.connect   '/dashboard/:action/:page', :controller => 'dashboard'\n\n  map.oauth_authorize      '/login/oauth/authorize',         :controller => 'oauth',           :action => 'authorize'\n  map.oauth_access_token   '/login/oauth/access_token',      :controller => 'oauth',           :action => 'access_token'\n  map.oauth_success        '/login/oauth/success',           :controller => 'oauth',           :action => 'success'\n  map.oauth_client_twitter '/login/oauth/callbacks/twitter', :controller => 'oauth_callbacks', :action => 'twitter_callback',\n      :conditions => { :method => :get }\n\n  map.stars         '/stars',              :controller => 'stars', :action => 'index'\n  map.users_stars   '/stars/:user',        :controller => 'stars', :action => 'user_stars'\n\n  ##\n  # Remote Login\n  map.connect '/login/remote/:login/:stamp/:nonce', :controller => 'sessions', :action => 'remote_login'\n  map.connect '/logout/remote',                     :controller => 'sessions', :action => 'remote_logout'\n  map.connect '/login/:login/:nonce',               :controller => 'sessions', :action => 'new_password'\n\n  ##\n  # Two-factor auth\n  map.two_factor                '/sessions/two_factor',               :controller => 'sessions', :action => 'two_factor',                   :conditions => {:method => :post}\n  map.two_factor_recover_prompt '/sessions/two_factor_recover_prompt',:controller => 'sessions', :action => 'two_factor_recover_prompt'\n  map.two_factor_recover        '/sessions/two_factor_recover',       :controller => 'sessions', :action => 'two_factor_recover',           :conditions => {:method => :post}\n  map.two_factor_resend         '/sessions/two_factor/resend',        :controller => 'sessions', :action => 'resend_two_factor_sms',        :conditions => {:method => :post}\n  map.two_factor_send_fallback  '/sessions/two_factor/send_fallback', :controller => 'sessions', :action => 'send_two_factor_fallback_sms', :conditions => {:method => :post}\n\n  ##\n  # Sudo endpoint\n  map.sudo         '/sessions/sudo',               :controller => 'sessions',     :action => 'sudo',        :conditions => {:method => :post}\n  map.in_sudo      '/sessions/in_sudo.json',       :controller => 'sessions',     :action => 'in_sudo'\n  map.kill_sudo    '/sessions/kill_sudo',           :controller => 'sessions',     :action => 'kill_sudo'\n\n  ##\n  # UserSession endpoints\n  map.user_sessions_revoke '/sessions/:user_session_id/revoke', :controller => 'user_sessions', :action => 'revoke', :conditions => {:method => :delete}\n\n  ##\n  # Explore\n  map.explore_suggest  '/suggestion',        :controller => 'explore', :action => 'suggest'\n  map.explore_pjax     '/explore/pjax_data', :controller => 'explore', :action => 'pjax_data'\n  map.explore          '/explore',           :controller => 'explore', :action => 'index'\n\n  map.resources :showcases, :except => [:index]\n\n  ##\n  # Trending\n  map.trending_index        '/trending',             :controller => 'popularity', :action => 'index'\n  map.trending_developers   '/trending/developers',  :controller => 'popularity', :action => 'developers'\n\n  ##\n  # Site\n  map.confirm_password '/session/confirm',         :controller => 'sessions',     :action => 'confirm'\n  map.forgot_password '/sessions/forgot_password', :controller => 'sessions',     :action => 'forgot_password'\n  map.password_sent   '/sessions/password_sent',   :controller => 'sessions',     :action => 'password_sent'\n\n  map.about    '/about',      :controller => 'site', :action => 'about', :section => 'about'\n  map.about    '/humans.txt', :controller => 'site', :action => 'about', :section => 'about', :format => 'txt'\n\n  # Adds any external authentication routes (like OmniAuth).\n  GitHub.auth.add_routes(map)\n\n  unless GitHub.enterprise?\n    map.pricing   '/plans',     :controller => 'billing',   :action => 'plans'\n    map.tour      '/tour',      :controller => 'site',      :action => 'tour'\n    map.edu       '/edu',       :controller => 'site',      :action => 'edu'\n    map.nonprofit '/nonprofit', :controller => 'site',      :action => 'nonprofit'\n    map.training  '/training',  :controller => 'site',      :action => 'training'\n  end\n\n  # Dat contact us form\n  map.with_options :controller => 'site' do |site|\n    unless GitHub.enterprise?\n      site.get  '/c',       :to => 'contact'\n      site.get  '/C',       :to => 'contact'\n    end\n    site.get  '/contact', :to => 'contact', :as => 'contact'\n    site.put  '/contact', :to => 'send_contact'\n    site.post '/contact', :to => 'send_contact'\n    site.get  '/CONTACT', :to => 'contact'\n    site.get  '/support', :to => 'contact'\n  end\n\n  map.login     '/login',     :controller => 'sessions',  :action => 'new'\n  map.login_404 '/sessions/login_404', :controller => 'sessions',  :action => 'login_404'\n  map.logout    '/logout',    :controller => 'sessions',  :action => 'destroy'\n  map.timeline  '/timeline',  :controller => 'events',    :action => 'index'\n  map.site      '/site',      :controller => 'site',      :action => 'index' if Rails.env == 'test'\n  map.tips      '/tips',      :controller => 'site',      :action => 'tips'\n  map.connect   '/home',      :controller => 'site',      :action => 'index'\n  map.home      '/',          :controller => 'dashboard', :action => 'index'\n  map.connect   '/site/archive/:user/:repo/:arc_type/:name', :controller => 'site', :action => 'archive_cmd',\n    :repo => RepoRegexp, :arc_type => /(legacy\\.)?(zip|tar\\.gz)/, :name => /.+/\n\n  map.androidapps  '/androidapps',            :controller => 'site', :action => 'androidapps'\n  map.androidatom  '/androidapps.:format',    :controller => 'site', :action => 'androidapps'\n\n  map.user_stats          '/users.json',             :controller => 'users',     :action => 'index', :format => 'json'\n  map.signup              '/signup',                 :controller => 'users',     :action => 'new'\n  map.connect             '/signup/:plan/:code',     :controller => 'users',     :action => 'new'\n  map.signup_plan         '/signup/:plan',           :controller => 'users',     :action => 'new'\n  map.username_check      '/signup_check/username',  :controller => 'users',     :action => 'username_check',  :conditions => {:method => :post}\n  map.email_check         '/signup_check/email',     :controller => 'users',     :action => 'email_check',     :conditions => {:method => :post}\n  map.password_check      '/signup_check/password',  :controller => 'users',     :action => 'password_check',  :conditions => {:method => :post}\n  map.connect             '/signup/:id/:coupon',     :controller => 'users',     :action => 'new'\n  map.receipts            '/account/receipts',       :controller => 'billing',   :action => 'receipts'\n  map.receipt             '/account/receipt/:id',    :controller => 'billing',   :action => 'receipt'\n  map.cc_update           '/account/cc_update',      :controller => 'billing',   :action => 'cc_update',       :conditions => { :method => :post }\n  map.show_card           '/account/show_card',      :controller => 'billing',   :action => 'show_card'\n  map.plan_change         '/account/plan_change',    :controller => 'users',     :action => 'plan_change'\n  map.plan_upgrade        '/account/upgrade',        :controller => 'users',     :action => 'billing',       :upgrade => 'plan'\n  map.user_organizations  '/account/organizations',  :controller => 'users',     :action => 'organizations'\n  map.ignore_upgrade      '/ignore_upgrade',         :controller => 'dashboard', :action => 'ignore_upgrade'\n  map.post '/account/ignore_user/:login',   :to => 'users#ignore_user',   :as => :ignore_user\n  map.post '/account/unignore_user/:login', :to => 'users#unignore_user', :as => :unignore_user\n\n  map.invitation '/invitation/:token', :controller => 'invitations', :action => 'accept'\n\n  map.braintree_update '/account/billing/braintree_update', :controller => 'billing',   :action => 'braintree_update'\n  map.braintree_create '/account/billing/braintree_create', :controller => 'billing',   :action => 'braintree_create'\n\n  map.timeline_feed '/timeline.:format', :controller => 'events',  :action => 'index', :format => 'atom'\n\n  map.preview  '/preview', :controller => 'site', :action => 'preview'\n\n  ##\n  # Account\n  map.with_options :controller => 'users', :action => 'edit', :conditions => { :method => :get } do |account|\n    account.account     '/account',      :tab => 'profile'\n    account.account_tab '/account/:tab', :requirements => { :tab => /admin|email|ssh|job|connections/ }\n    account.connect     '/account',      :action => 'update', :conditions => { :method => :put }\n  end\n  map.account_repositories     '/account/repositories',             :controller => 'account', :action => 'repositories'\n  map.connect                  '/account/leave_repo/:repo',         :controller => 'account', :action => 'leave_repo', :repo => /.+/\n  map.billing                  '/account/billing',                  :controller => 'users',   :action => 'billing'\n  map.connect                  '/account/billing/:coupon',          :controller => 'users',   :action => 'billing'\n  map.connect                  '/account/:action',                  :controller => 'account'\n  map.notification_center      '/account/notifications',            :controller => 'account', :action => 'notifications'\n  map.put '/account/read_broadcast/:id',       :to => 'account#read_broadcast',           :as => :read_broadcast\n\n  ##\n  # User Settings\n  map.settings_user_redirect '/settings', :controller => 'settings', :action => 'user_redirect'\n  map.settings_user_profile '/settings/profile', :controller => 'settings', :action => 'user_profile'\n  map.settings_user_admin '/settings/admin', :controller => 'settings', :action => 'user_admin'\n  map.settings_user_emails '/settings/emails', :controller => 'settings', :action => 'user_emails'\n  map.settings_user_notifications '/settings/notifications', :controller => 'settings', :action => 'user_notifications'\n  map.settings_user_billing '/settings/billing', :controller => 'settings', :action => 'user_billing'\n  map.settings_user_payments '/settings/payments', :controller => 'settings', :action => 'user_payments'\n  map.settings_user_ssh '/settings/ssh', :controller => 'settings', :action => 'user_ssh'\n  map.settings_user_renaming '/settings/renaming', :controller => 'settings', :action => 'renaming'\n  map.settings_user_unsubscribe_newsletter '/settings/unsubscribe/newsletter', :controller => 'settings', :action => 'user_unsubscribe_newsletter'\n\n  map.settings_user_two_factor_authentication_intro '/settings/two_factor_authentication/intro', :controller => 'settings', :action => 'two_factor_authentication_intro'\n  map.settings_user_two_factor_authentication_app '/settings/two_factor_authentication/app', :controller => 'settings', :action => 'user_two_factor_authentication_app', :conditions => { :method => :post }\n  map.settings_user_two_factor_authentication_sms '/settings/two_factor_authentication/sms', :controller => 'settings', :action => 'user_two_factor_authentication_sms', :conditions => { :method => :post }\n  map.settings_user_two_factor_sms '/settings/two_factor_authentication/send_sms', :controller => 'settings', :action => 'send_two_factor_sms', :conditions => { :method => :post }\n  map.settings_user_two_factor_authentication_enable '/settings/two_factor_authentication/enable', :controller => 'settings', :action => 'two_factor_authentication_enable', :conditions => { :method => :post }\n  map.settings_user_two_factor_authentication_configuration '/settings/two_factor_authentication/configure', :controller => 'settings', :action => 'two_factor_authentication'\n  map.settings_user_two_factor_authentication_disable '/settings/two_factor_authentication/disable', :controller => 'settings', :action => 'two_factor_authentication_disable', :conditions => { :method => :post }\n  map.settings_user_two_factor_authentication_add_backup '/settings/two_factor_authentication/backup_number', :controller => 'settings', :action => 'add_2fa_sms_backup', :conditions => { :method => :post }\n  map.settings_user_two_factor_recovery_codes '/settings/two_factor_authentication/recovery_codes', :controller => 'settings', :action => 'user_two_factor_authentication_recovery_codes'\n  map.settings_user_two_factor_recovery_codes_download '/settings/two_factor_authentication/recovery_codes.txt', :controller => 'settings', :action => 'user_two_factor_authentication_recovery_codes', :format => 'txt'\n\n  map.with_options :path_prefix => '/settings' do |acct|\n    acct.resources :connections, :only => :destroy\n    acct.resources :applications, :controller => :oauth_applications, :name_prefix => 'settings_user_', :member => {:transfer => :put, :reset_secret => :post}\n    acct.new_token '/tokens/new', :controller => :oauth_applications, :action => 'new_token', :name_prefix => 'settings_user_'\n    acct.generate_token '/tokens', :controller => :oauth_applications, :action => 'generate_token', :name_prefix => 'settings_user_', :conditions => { :method => :post }\n    acct.delete_token '/tokens/:token_id', :controller => :oauth_applications, :action => 'destroy_token', :name_prefix => 'settings_user_', :conditions => { :method => :delete }\n    acct.update_token '/tokens/:token_id', :controller => :oauth_applications, :action => 'update_token', :name_prefix => 'settings_user_', :conditions => { :method => :put }\n  end\n  map.settings_user_repositories '/settings/repositories', :controller => 'settings', :action => 'user_repositories'\n  map.settings_user_organizations '/settings/organizations', :controller => 'settings', :action => 'user_organizations'\n  map.settings_key_audit '/settings/ssh/audit', :controller => 'settings', :action => 'user_ssh_audit'\n  map.settings_key_audit_key '/settings/ssh/audit/:key', :controller => 'settings', :action => 'user_ssh_audit'\n  map.settings_user_security '/settings/security', :controller => 'settings', :action => 'user_security'\n\n  map.sms_message_receive_endpoint '/_sms_messages', :controller => 'sms_messages', :action => 'create', :conditions => { :method => :post }\n\n  ##\n  # Org Settings\n  map.settings_org_profile '/organizations/:organization_id/settings/profile', :controller => 'settings', :action => 'organization_profile'\n  map.settings_org_owners '/organizations/:organization_id/settings/owners', :controller => 'settings', :action => 'organization_owners'\n  map.settings_org_members '/organizations/:organization_id/settings/members', :controller => 'settings', :action => 'organization_members'\n  map.settings_org_billing '/organizations/:organization_id/settings/billing', :controller => 'settings', :action => 'organization_billing'\n  map.settings_org_payments '/organizations/:organization_id/settings/payments', :controller => 'settings', :action => 'organization_payments'\n  map.settings_org_security_history '/organizations/:organization_id/settings/security', :controller => 'settings', :action => 'organization_security_history'\n  map.with_options :path_prefix => '/organizations/:organization_id/settings' do |acct|\n    acct.resources :connections, :only => :destroy\n    acct.resources :applications, :controller => :oauth_applications, :name_prefix => 'settings_org_', :member => {:reset_secret => :post}\n  end\n\n  ##\n  # User stuff\n  map.followers '/:user_id/followers',         :controller => 'users', :action => 'followers'\n  map.following '/:user_id/following',         :controller => 'users', :action => 'following'\n  map.connect   '/:user_id/ajax_public_repos', :controller => 'users', :action => 'ajax_public_repos'\n  map.user_repositories '/:user_id/repositories', :controller => 'users', :action => 'repositories'\n\n  map.user_contributions_calendar_data '/users/:user_id/contributions_calendar_data', :controller => 'users', :action => 'contributions_calendar_data'\n  map.user_contributions_activity '/users/:user_id/contributions_activity', :controller => 'users', :action => 'contributions_activity'\n\n  map.api_oembed '/api/oembed', :controller => 'oembed', :action => 'index'\n\n  ##\n  # Command Bar\n  map.command_bar            '/command_bar/:action',                         :controller => 'command_bar'\n  map.command_bar_repos_for  '/command_bar/repos_for/:user',                 :controller => 'command_bar', :action => 'repos_for'\n  map.command_bar_repo       '/command_bar/:owner/:name/:action',            :controller => 'command_bar', :name => RepoRegexp\n  map.command_bar_repo_paths '/command_bar/:owner/:name/paths/:tree_name',   :controller => 'command_bar', :action => 'paths', :name => RepoRegexp, :tree_name => /.+/\n\n  ##\n  # Resourcey\n  map.resources :users, :member => { :rename => :post, :dismiss_notice => :delete, :hide_jobs => :post } do |user|\n    user.resources :emails, :controller => \"user_emails\",\n      :member => { :request_verification => :get, :set_default => :put },\n      :collection => { :toggle_visibility => :put }\n    user.confirm_verification_email '/emails/:id/confirm_verification/:t', :controller => \"user_emails\", :action => :confirm_verification\n    user.connect                    '/emails/:id/confirm_verification',    :controller => \"user_emails\", :action => :confirm_verification\n  end\n  map.broadcasts_feed '/blog/broadcasts.atom', :controller => 'posts', :action => 'broadcasts', :format => 'atom'\n  map.category_feed '/blog/:category.atom', :controller => 'posts', :action => 'index', :format => 'atom'\n  map.categorized_posts '/blog/category/:category', :controller => 'posts', :action => 'index'\n  map.resources :posts, :as => 'blog',\n    :collection => {:broadcasts => :get, :drafts => :get, :search => :get, :subscribe => :get}\n  map.resource  :session\n\n  ##\n  # Repositories\n  map.resources :repositories, :collection => {\n    :updated     => :get,\n    :recent      => :get\n  }\n  map.connect '/repositories/check-name', :controller => :repositories, :action => :check_name\n\n  ##\n  # Nginx-aided Caching\n  map.network_current     '/cache/network_current/:user_id/:repository',     :controller => 'network', :action => 'network_current', :repository => /.+/\n\n  ##\n  # Guides\n  map.with_options :controller => 'site', :action => 'bounce' do |bounce|\n    bounce.connect '/guides/pages',                                                   :to => 'http://pages.github.com'\n    bounce.connect '/guides/textile-formatting',                                      :to => 'http://textile.thresholdstate.com/'\n    bounce.connect '/guides/addressing-authentication-problems-with-ssh',             :to => 'http://help.github.com/troubleshooting-ssh'\n    bounce.connect '/guides/how-to-not-have-to-type-your-password-for-every-push',    :to => 'http://help.github.com/working-with-key-passphrases'\n    bounce.connect '/guides/local-github-config',                                     :to => 'http://help.github.com/git-email-settings/'\n    bounce.connect '/guides/the-github-api',                                          :to => 'http://help.github.com/api/'\n    bounce.connect '/guides/understanding-deploy-keys',                               :to => 'http://help.github.com/deploy-keys/'\n    bounce.connect '/guides/deploying-with-capistrano',                               :to => 'http://help.github.com/capistrano'\n    bounce.connect '/guides/issues-with-textmate-set-as-git-editor',                  :to => 'http://help.github.com/textmate/'\n    bounce.connect '/guides/managing-multiple-clients-and-their-repositories',        :to => 'http://help.github.com/managing-clients/'\n    bounce.connect '/guides/multiple-github-accounts',                                :to => 'http://help.github.com/managing-clients/'\n    bounce.connect '/guides/fork-a-project-and-submit-your-modifications',            :to => 'http://help.github.com/forking/'\n    bounce.connect '/guides/keeping-a-git-fork-in-sync-with-the-forked-repo',         :to => 'http://help.github.com/forking/'\n    bounce.connect '/guides/how-do-i-delete-a-repository',                            :to => 'http://help.github.com/deleting-a-repo/'\n    bounce.connect '/guides/change-author-details-in-commit-history',                 :to => 'http://help.github.com/changing-author-info/'\n    bounce.connect '/guides/completely-remove-a-file-from-all-revisions',             :to => 'http://help.github.com/removing-sensitive-data'\n    bounce.connect '/guides/changing-a-series-of-commits-or-patches',                 :to => 'http://help.github.com/rebase'\n    bounce.connect '/guides/remove-a-remote-branch',                                  :to => 'http://help.github.com/remotes'\n    bounce.connect '/guides/push-a-branch-to-github',                                 :to => 'http://help.github.com/remotes'\n    bounce.connect '/guides/copy-a-remote-branch',                                    :to => 'http://help.github.com/remotes'\n    bounce.connect '/guides/rename-a-remote-branch',                                  :to => 'http://help.github.com/remotes'\n    bounce.connect '/guides/ignore-for-git',                                          :to => 'http://help.github.com/git-ignore'\n    bounce.connect '/guides/push-tags-to-github',                                     :to => 'http://help.github.com/remotes/'\n    bounce.connect '/guides/dealing-with-errors-when-pushing',                        :to => 'http://help.github.com/remotes/'\n    bounce.connect '/guides/changing-your-origin',                                    :to => 'http://help.github.com/remotes/'\n    bounce.connect '/guides/import-an-existing-git-repo',                             :to => 'http://help.github.com/remotes/'\n    bounce.connect '/guides/disaster-faq-what-to-do-when-github-goes-bad',            :to => 'http://ozmm.org/posts/when_github_goes_down.html'\n    bounce.connect '/guides/providing-your-ssh-key',                                  :to => 'http://help.github.com/key-setup-redirect'\n    bounce.connect '/guides/git-screencasts',                                         :to => 'http://gist.github.com/423320'\n    bounce.connect '/guides/git-podcasts',                                            :to => 'http://gist.github.com/423320'\n    bounce.connect '/guides/feature-requests',                                        :to => 'http://github.com/contact'\n    bounce.connect '/guides/github-bugs',                                             :to => 'http://github.com/contact'\n    bounce.connect '/guides/setting-up-a-remote-repository-using-github-and-osx',     :to => 'http://help.github.com/'\n    bounce.connect '/guides/using-git-and-github-for-the-windows-for-newbies',        :to => 'http://help.github.com/'\n    bounce.connect '/guides/i-m-missing-my-gravatar-icon-on-my-commits',              :to => 'http://help.github.com/troubleshooting-common-issues/'\n    bounce.connect '/guides/get-git-on-mac',                                          :to => 'http://help.github.com/mac-git-installation'\n    bounce.connect '/guides/compiling-git-on-os-x-leopard',                           :to => 'http://help.github.com/mac-git-installation'\n    bounce.connect '/guides/compiling-and-installing-git-on-mac-os-x',                :to => 'http://help.github.com/mac-git-installation'\n    bounce.connect '/guides/rebase-howto',                                            :to => 'http://help.github.com/rebase/'\n    bounce.connect '/guides/syntax-highlighting-isn-t-working-for-my-language',       :to => 'http://help.github.com/troubleshooting-common-issues/'\n    bounce.connect '/guides/how-to-move-a-repo-to-another-account',                   :to => 'http://help.github.com/moving-a-repo'\n    bounce.connect '/guides/tell-git-your-user-name-and-email-address',               :to => 'http://help.github.com/git-email-settings'\n    bounce.connect '/guides/dealing-with-newlines-in-git',                            :to => 'http://help.github.com/dealing-with-lineendings'\n    bounce.connect '/guides/using-the-egit-eclipse-plugin-with-github',               :to => 'http://wiki.eclipse.org/EGit/User_Guide'\n    bounce.connect '/guides/how-to-clone-from-github-with-ssh-tunnels',               :to => 'http://help.github.com/firewalls-and-proxies/'\n    bounce.connect '/guides/dealing-with-firewalls-and-proxies',                      :to => 'http://help.github.com/firewalls-and-proxies/'\n    bounce.connect '/guides/how-to-transparently-clone-from-github-with-ssh-tunnels', :to => 'http://help.github.com/firewalls-and-proxies/'\n    bounce.connect '/guides/import-from-subversion',                                  :to => 'http://help.github.com/svn-importing'\n    bounce.connect '/guides/put-your-git-branch-name-in-your-shell-prompt',           :to => 'http://www.gitready.com/advanced/2009/01/23/bash-git-status.html'\n    bounce.connect '/guides/pull-requests',                                           :to => 'http://help.github.com/pull-requests'\n    bounce.connect '/guides/git-cheat-sheet',                                         :to => 'http://help.github.com/git-cheat-sheets'\n    bounce.connect '/guides/readme-formatting',                                       :to => 'http://github.com/github/markup#readme'\n    bounce.connect '/guides/developing-with-submodules',                              :to => 'http://help.github.com/submodules/'\n    bounce.connect '/guides',                                                         :to => 'http://help.github.com/'\n\n    # Old tender SSO login\n    bounce.connect '/login/multipass', :to => '/contact'\n\n    # Jobs\n    unless GitHub.enterprise?\n      bounce.connect '/jobs', :to => 'http://jobs.github.com/'\n    end\n\n    # Help\n    bounce.connect '/help', :to => 'https://help.github.com/'\n  end\n\n  #\n  # Everything in this block is prefixed with /LOGIN/REPO\n  #\n  map.with_options :repository => RepoRegexp, :path_prefix => '/:user_id/:repository' do |repo|\n    repo.connect      '/commits',                 :controller => 'commits', :action => 'show', :format => nil, :conditions => { :method => :get }\n    repo.commits_feed '/commits.:format',         :controller => 'commits', :action => 'show', :format => 'atom', :conditions => { :method => :get }\n    repo.connect      '/commits/:name.atom',      :controller => 'commits', :action => 'show', :format => 'atom', :name => /.+/, :conditions => { :method => :get }\n\n    # Deprecated.\n    map.connect '/feeds/:user_id/commits/:repository',       :controller => 'commits', :action => 'show', :format => 'atom', :conditions => { :method => :get }\n    map.connect '/feeds/:user_id/commits/:repository/:name', :controller => 'commits', :action => 'show', :format => 'atom', :name => /.+/, :conditions => { :method => :get }\n\n    ##\n    # Milestones\n    repo.get '/milestones/new', :to => 'milestones#new'\n    repo.get '/milestones/:slug', :to => 'milestones#show', :as => :milestone_next\n    repo.get '/milestones/:slug/edit', :to => 'milestones#edit', :as => :milestone_next_edit\n    repo.post '/milestones/:slug/assigned/:source_id', :to => 'milestones#assign'\n    repo.delete '/milestones/:slug/assigned/:source_id', :to => 'milestones#unassign'\n    repo.get '/milestones/:slug/description', :to => 'milestones#description', :as => :milestone_next_description\n    repo.get '/milestones/:slug/activity', :to => 'milestones#activity', :as => :milestone_next_activity\n    repo.get '/milestones/:slug/:tab', :to => 'milestones#show'\n    repo.get '/milestones/:slug/activity_stats.json', :to => 'milestones#activity_stats', :as => :milestone_activity_stats\n\n    ##\n    # Branches\n    repo.pre_mergeable '/branches/pre_mergeable/:shaish', :controller  => 'branches', :action => 'pre_mergeable', :shaish => /.+/\n    repo.post          '/branches',                 :to => 'branches#create', :as => :create_branch\n    repo.delete        '/branches/:name',           :to => 'branches#destroy', :as => :destroy_branch, :name => /.+/\n    repo.view_branches '/branches',                 :controller => 'branches', :action => 'index'\n    repo.view_branches_with_base '/branches/:name', :controller => 'branches', :action => 'show',   :name => /.+/\n\n    ##\n    # Compare\n    repo.compare_diff  '/compare/:shaish.diff',  :controller => 'compare', :action => 'diff',  :shaish => /.+/\n    repo.compare_patch '/compare/:shaish.patch', :controller => 'compare', :action => 'patch', :shaish => /.+/\n    repo.compare       '/compare/:shaish',       :controller => 'compare', :action => 'show',  :shaish => /.+/, :method => [:get, :post]\n    repo.compare_start '/compare',               :controller => 'compare', :action => 'new'\n    repo.sample_compares '/comparison/samples',  :controller => 'compare', :action => 'sample_comparisons'\n\n    ##\n    # Statuses\n    repo.branch_status '/status/branch/:name', :controller => 'statuses', :action => 'branch', :name => /.+/\n\n    ##\n    # Commit Comments\n    repo.delete '/commit_comment/:id',    :to => 'commit_comments#destroy', :id => /\\d+/, :as => :destroy_commit_comment\n    repo.put    '/commit_comment/:id',    :to => 'commit_comments#update',  :id => /\\d+/, :as => :update_commit_comment\n    repo.post   '/commit_comment/create', :to => 'commit_comments#create',  :as => :create_commit_comment\n    repo.get    '/commit_comment/form',   :to => 'commit_comments#inline',  :as => :inline_commit_comments\n\n    ##\n    # Graphs\n    repo.get '/graphs',                     :to => 'graphs#index',               :as => :repo_graphs\n    repo.get '/graphs/commit-activity',     :to => 'graphs#commit_activity',     :as => :commit_activity\n    repo.get '/graphs/commit-activity-data',:to => 'graphs#commit_activity_data',:as => :commit_activity_data\n    repo.get '/graphs/code-frequency',      :to => 'graphs#code_frequency',      :as => :code_frequency\n    repo.get '/graphs/code-frequency-data', :to => 'graphs#code_frequency_data', :as => :code_frequency_data\n    repo.get '/graphs/languages',           :to => 'graphs#languages',           :as => :repository_languages\n    repo.get '/graphs/punch-card',          :to => 'graphs#punch_card',          :as => :punch_card\n    repo.get '/graphs/punch-card-data',     :to => 'graphs#punch_card_data',     :as => :punch_card_data\n    repo.get '/graphs/traffic',             :to => 'graphs#traffic',             :as => :traffic\n    repo.get '/graphs/traffic-data',        :to => 'graphs#traffic_data',        :as => :traffic_data\n    repo.get '/graphs/contributors',        :to => 'graphs#contributors',        :as => :contributors_graph\n    repo.get '/graphs/contributors-data',   :to => 'graphs#contributors_data',   :as => :contributors_graph_data\n    repo.get '/graphs/clones',              :to => 'graphs#clones',              :as => :clones\n    repo.get '/graphs/clones-data',         :to => 'graphs#clones_data',         :as => :clones_next_data\n    repo.get '/graphs/owner_participation', :to => 'graphs#participation',       :as => :owner_participation\n    repo.get '/graphs/participation',       :to => 'graphs#participation',       :as => :participation\n\n    ##\n    # Docs\n    repo.docs_download        '/docs/versions/:version/download/:format', :controller => 'docs', :action => 'download'\n    repo.docs_version         '/docs/versions/:version',                  :controller => 'docs', :action => 'show', :conditions => { :method => :get }\n    repo.docs_version_page    '/docs/versions/:version/:page',            :controller => 'docs', :action => 'show', :conditions => { :method => :get }\n    repo.docs                 '/docs',                                    :controller => 'docs', :action => 'show', :conditions => { :method => :get }\n    repo.docs_page            '/docs/:page',                              :controller => 'docs', :action => 'show', :conditions => { :method => :get }\n\n    ##\n    # Edit Repositories\n    repo.edit_repository      '/settings',                              :controller => 'edit_repositories', :action => 'options'\n    repo.edit_repository_tab  '/settings/:action',                      :controller => 'edit_repositories', :requirements => { :action => /options|collaboration|keys|hooks|tabs|health/ }\n    repo.update_repository    '/update',                                :controller => 'edit_repositories', :action => 'update'\n    repo.edit_hooks           '/settings/hooks',                        :controller => 'edit_repositories', :action => 'hooks'\n    repo.service              '/settings/service',                      :controller => 'edit_repositories', :action => 'service'\n    repo.twitter_oauth        '/settings/service/twitter',              :controller => 'edit_repositories', :action => 'twitter_oauth'\n    repo.postreceive_urls     '/settings/postreceive_urls',             :controller => 'edit_repositories', :action => 'postreceive_urls'\n    repo.repo_rename          '/settings/rename',                       :controller => 'edit_repositories', :action => 'rename'\n    repo.repo_transfer        '/settings/transfer',                     :controller => 'edit_repositories', :action => 'transfer'\n    repo.repo_abort_transfer  '/settings/abort_transfer',               :controller => 'edit_repositories', :action => 'abort_transfer'\n    repo.update_repo_meta     '/settings/update_meta',                  :controller => 'edit_repositories', :action => 'update_meta', :conditions => { :method => :put }\n    repo.connect              '/settings/:action',                      :controller => 'edit_repositories'\n    repo.connect              '/admin/:path',                           :controller => 'edit_repositories', :action => 'redirect_to_settings'\n    repo.connect              '/admin',                                 :controller => 'edit_repositories', :action => 'redirect_to_settings'\n    repo.connect              '/edit/:path',                            :controller => 'edit_repositories', :action => 'redirect_to_settings'\n    repo.connect              '/edit',                                  :controller => 'edit_repositories', :action => 'redirect_to_settings'\n\n    ##\n    # Repository Members\n    repo.connect              '/members',                               :controller => 'repository_members', :action => 'index',   :conditions => { :method => :get }\n    repo.connect              '/members',                               :controller => 'repository_members', :action => 'create',  :conditions => { :method => :post }\n    repo.connect              '/members/suggestions',                   :controller => 'repository_members', :action => 'suggestions', :conditions => { :method => :get }\n    repo.connect              '/members/:member',                       :controller => 'repository_members', :action => 'destroy', :conditions => { :method => :delete }, :member => /.+/\n    repo.connect              '/members/:member',                       :controller => 'repository_members', :action => 'update',  :conditions => { :method => :put }, :member => /.+/\n\n    ##\n    # Network\n    repo.network            '/network',                 :controller => 'network', :action => 'show', :conditions => { :method => :get }\n    repo.network_feed       '/network/feed',            :controller => 'network', :action => 'feed', :conditions => { :method => :get }\n    repo.network_feed_atom  '/network/feed.atom',       :controller => 'network', :action => 'feed', :format => 'atom', :conditions => { :method => :get }\n    repo.network_data       '/network_data',            :controller => 'network', :action => 'network_data', :conditions => { :method => :get }\n    repo.network_meta       '/network_meta',            :controller => 'network', :action => 'network_meta'\n    repo.network_data_chunk '/network_data_chunk',      :controller => 'network', :action => 'network_data_chunk'\n    repo.network_data_debug '/network_data_debug',      :controller => 'network', :action => 'network_data_debug'\n    repo.network_members    '/network/members',         :controller => 'network', :action => 'members'\n    repo.connect            '/network/members.:format', :controller => 'network', :action => 'members'\n\n    ##\n    # Notifications\n    repo.repository_subscription  '/subscription', :controller => 'notifications', :action => 'subscription'\n    repo.repository_unsubscribe_via_email '/unsubscribe_via_email/:data', :controller => 'notifications', :action => 'unsubscribe_via_email'\n    repo.repository_notifications '/notifications', :controller => 'notifications', :action => 'index'\n    repo.mark_repo_notifications '/notifications/mark', :controller => 'notifications', :action => 'mark', :method => :post\n\n    ##\n    # Pull Requests\n    repo.pull_requests        '/pulls',             :controller  => 'pull_requests', :action => 'index'\n    repo.user_pull_requests   '/pulls/:login',      :controller  => 'pull_requests', :action => 'by_user'\n    repo.new_pull_request     '/pull/new/:range',   :controller  => 'pull_requests', :action => 'new', :range => /.*/\n    repo.connect              '/pull/new',          :controller  => 'pull_requests', :action => 'new'\n    repo.post '/pull/create', :to => 'pull_requests#create', :as => :create_pull_request\n    repo.show_pull_request    '/pull/:id',          :controller  => 'pull_requests', :action => 'show', :conditions => { :method => :get }\n    repo.poll_pull_request    '/pull/:id/poll',     :controller  => 'pull_requests', :action => 'poll'\n    repo.show_partial_pull_request '/pull/:id/show_partial', :controller  => 'pull_requests', :action => 'show_partial'\n    repo.pull_request_commit '/pull/:id/commit/:sha', :controller  => 'pull_requests', :action => 'show_commit'\n    repo.post '/pull/:id/cleanup', :to => 'pull_requests#cleanup', :as => :cleanup_pull_request\n    repo.post '/pull/:id/undo_cleanup', :to => 'pull_requests#undo_cleanup', :as => :undo_cleanup_pull_request\n    repo.post '/pull/:id/merge', :to => 'pull_requests#merge', :as => :merge_pull_request\n    repo.merge_button         '/pull/:id/merge-button',:controller  => 'pull_requests', :action => 'merge_button'\n    repo.pull_request_diff    '/pull/:id.diff',     :controller  => 'pull_requests', :action => 'diff'\n    repo.pull_request_patch   '/pull/:id.patch',    :controller  => 'pull_requests', :action => 'patch'\n    repo.post '/pull/:id/comment', :to => 'pull_requests#comment', :as => :comment_pull_request\n    repo.pull_request_tab     '/pull/:id/:tab',     :controller  => 'pull_requests', :action => 'show', :conditions => { :method => :get }\n\n    ##\n    # Pull Request Review Comments\n    repo.delete '/pull/:pull_id/review_comment/:id', :to => 'pull_request_review_comments#destroy', :id => /\\d+/, :as => :destroy_review_comment\n    repo.put    '/pull/:pull_id/review_comment/:id', :to => 'pull_request_review_comments#update',  :id => /\\d+/, :as => :update_review_comment\n    repo.post   '/pull/:pull_id/review_comment/create', :to => 'pull_request_review_comments#create', :as => :create_review_comment\n    repo.get    '/pull/:pull_id/review_comment/form',   :to => 'pull_request_review_comments#inline', :as => :inline_review_comments\n\n    # Commit\n    repo.commit          '/commit/:name/*path',      :controller => 'commit',       :action => 'show', :conditions => { :method => :get }\n    repo.connect         '/commit/:name.:format',    :controller => 'commit',       :action => 'show', :conditions => { :method => :get }\n    repo.branch_commits  '/branch_commits/:name',    :controller => 'commit',       :action => 'branch_commits', :conditions => { :method => :get }\n\n    ##\n    # Releases / Tags\n    slug_regex = /[^\\/]+/\n    repo.get    '/releases/download/:name/*path', :as => :download_release, :to => 'releases#download', :name => /.+/\n    repo.get    '/releases/:name/:asset_id/:unused_name', :as => :download_release, :to => 'releases#download', :name => slug_regex, :unused_name => /.+/, :asset_id => /\\d+/\n    repo.get    '/releases/new', :as => :new_release, :to => 'releases#new'\n    repo.post   '/releases', :as => :create_release, :to => 'releases#create'\n\n    # new routes supporting tag names with /\n    repo.get    '/releases/edit/:name', :as => :edit_release, :to => 'releases#edit', :name => /.+/\n    repo.put    '/releases/tag/:name', :as => :update_release, :to => 'releases#update', :name => /.+/\n    repo.delete '/releases/tag/:name', :as => :destroy_release, :to => 'releases#destroy', :name => /.+/\n    repo.get    '/releases/tag/:name', :as => :show_release, :to => 'releases#show', :name => /.+/\n\n    # legacy routes supporting tag slugs\n    repo.get    '/releases/:name/edit', :as => :edit_release, :to => 'releases#edit', :name => slug_regex\n    repo.put    '/releases/:name', :as => :update_release, :to => 'releases#update', :name => slug_regex\n    repo.delete '/releases/:name', :as => :destroy_release, :to => 'releases#destroy', :name => slug_regex\n    repo.get    '/releases/:name', :as => :show_release, :to => 'releases#show', :name => slug_regex\n\n    repo.get    '/releases', :as => :releases, :to => 'releases#index'\n    repo.get    '/releases.atom', :as => :releases_feed, :to => 'releases#index', :format => 'atom'\n    repo.get    '/tags/check', :as => :check_tag, :to => 'releases#check_tag'\n    repo.post   '/tags', :as => :create_tag, :to => 'releases#create_tag'\n    repo.get    '/tags', :as => :tags, :to => 'releases#tag_history'\n    repo.get    '/tags.atom', :as => :tags_feed, :to => 'releases#tag_history', :format => 'atom'\n\n    ##\n    # Generated Pages\n    repo.connect                 '/generated_pages',         :controller => 'generated_pages', :action => 'show', :format => nil, :conditions => { :method => :get }\n    repo.generated_pages_create  '/generated_pages/create',  :controller => 'generated_pages', :action => 'create', :conditions => { :method => :post }\n    repo.generated_pages_new     '/generated_pages/new',     :controller => 'generated_pages', :action => 'new'\n    repo.generated_pages_preview '/generated_pages/preview', :controller => 'generated_pages', :action => 'preview'\n    repo.generated_pages_themes  '/generated_pages/themes',  :controller => 'generated_pages', :action => 'themes'\n\n    ##\n    # Repositories\n    repo.archives '/archives/*name', :controller => 'site',         :action => 'archive_redirect'\n    repo.zipball_legacy  '/zipball/:name',           :controller => 'tree',         :action => 'zipball',  :name => /.+/\n    repo.tarball_legacy  '/tarball/:name',           :controller => 'tree',         :action => 'tarball',  :name => /.+/\n    repo.tarball         '/archive/:name.tar.gz',    :controller => 'tree',         :action => 'archive',  :name => /.+/, :format => 'tar.gz'\n    repo.zipball         '/archive/:name.zip',       :controller => 'tree',         :action => 'archive',  :name => /.+/, :format => 'zip'\n    repo.preview_commit  '/commit_preview/:name',    :controller => 'commits',      :action => 'preview', :name => /.+/\n    repo.connect         '.git',                     :controller => 'tree',         :action => 'show', :raw => true, :repository => RepoRegexp\n    repo.http_tree       '.git/*path',               :controller => 'tree',         :action => 'show', :raw => true, :repository => RepoRegexp\n    repo.tree            '/tree/:name/*path',        :controller => 'tree',         :action => 'show', :name => /.+/, :conditions => { :method => :get }\n    repo.tree_commit     '/tree-commit/:name/*path', :controller => 'tree',         :action => 'tree_commit', :name => /.+/, :conditions => { :method => :get }\n    repo.tree_commits    '/tree-commits/:name/*path', :controller => 'tree',        :action => 'cached_commit_data', :name => /.+/, :conditions => { :method => :get }\n    repo.file_list       '/file-list/:name/*path',   :controller => 'files',        :action => 'file_list', :name => /.+/, :conditions => { :method => :get }\n    repo.tree_find       '/find/:name',              :controller => 'tree',         :action => 'find', :name => /.+/\n    repo.tree_list       '/tree-list/:name',         :controller => 'tree',         :action => 'list', :name => /.+/\n    repo.ctags_list      '/ctags-list/:name',        :controller => 'ctags',        :action => 'list', :name => /.+/\n    repo.ctags_lookup    '/ctags-lookup/:name/:tag', :controller => 'ctags',        :action => 'lookup', :name => /.+/, :tag => /.*/\n    repo.ctags_search    '/ctags-search/:name',      :controller => 'ctags',        :action => 'search', :name => /.+/\n    repo.check           '/check',                   :controller => 'tree',         :action => 'check'\n    repo.post '/dismiss-tree-finder-help', :to => 'tree#dismiss_tree_finder_help', :as => :dismiss_list_help\n    repo.blame           '/blame/:name/*path',       :controller => 'blob',         :action => 'blame', :name => /.+/\n    repo.file_save       '/tree-save/:name/*path',   :controller => 'blob',         :action => 'save',  :name => /.+/\n    repo.new_file      '/new/:name/*path', :controller => 'blob', :action => 'new', :name => /.+/\n    repo.create_file     '/create/:name/*path',      :controller => 'blob',         :action => 'create', :name => /.+/\n    repo.file_edit       '/edit/:name/*path',        :controller => 'blob',         :action => 'edit', :name => /.+/\n    repo.delete_file     '/delete/:name/*path',      :controller => 'blob',         :action => 'delete', :name => /.+/\n    repo.destroy_file    '/blob/:name/*path',     :controller => 'blob',         :action => 'destroy', :name => /.+/, :conditions => { :method => :delete }\n    repo.connect         '/file-edit/:name/*path',   :controller => 'blob',         :action => 'edit', :name => /.+/\n    repo.preview_edit    '/preview/:name/*path',     :controller => 'blob',         :action => 'preview', :name => /.+/\n    repo.diff_blob       '/diff_blob/:name/*path',   :controller => 'blob',         :action => 'diff_blob', :name => /.+/\n    repo.blob_excerpt    '/blob_excerpt/:name', :controller => 'blob',         :action => 'excerpt', :name => /.+/\n    repo.raw_blob        '/raw/:name/*path',         :controller => 'blob',         :action => 'raw',  :name => /.+/\n    repo.blob            '/blob/:name/*path',        :controller => 'blob',         :action => 'show', :name => /.+/, :conditions => { :method => :get }\n    repo.blob_contributors '/contributors/:name/*path', :controller => 'blob',         :action => 'contributors', :name => /.+/\n    repo.connect         '/:controller/:name',       :action => 'show',             :name => /.+/, :conditions => { :method => :get }\n    repo.post '/star',   :to => 'tree#star',   :as => :star\n    repo.post '/unstar', :to => 'tree#unstar', :as => :unstar\n    repo.post '/unlock_branch/:branch', :to => 'tree#unlock_branch'\n    repo.watchers        '/watchers',                :controller => 'repositories', :action => 'watchers'\n    repo.stargazers      '/stargazers',              :controller => 'repositories', :action => 'stargazers'\n    repo.contributors    '/contributors',            :controller => 'repositories', :action => 'contributors'\n    repo.post '/fork', :to => 'tree#fork', :as => :fork_repository\n    repo.repo_search        '/search',               :controller => 'repository_search', :action => 'index'\n    repo.repo_search_count  '/search/count',         :controller => 'repository_search', :action => 'count'\n    repo.show_partial_tree  '/show_partial',         :controller  => 'tree',             :action => 'show_partial'\n\n    repo.pulse                '/pulse/:period',                :controller => 'repositories', :action => 'pulse', :period => 'weekly'\n    repo.pulse_committer_data '/pulse_committer_data/:period', :controller => 'repositories', :action => 'pulse_committer_data', :period => 'weekly'\n\n    repo.suggestions '/suggestions/:subject_type/:subject_id',   :controller => 'suggestions',   :action => 'show'\n    repo.user_suggestions '/user_suggestions/:subject_type/:subject_id',   :controller => 'suggestions',   :action => 'show'\n\n    repo.fork_select     '/fork',                    :controller => 'tree',         :action => 'fork_select'\n\n    repo.no_content '/noooooope', :controller => 'repositories', :action => 'no_content'\n\n    repo.repository  '',             :controller => 'tree',  :action => 'show', :conditions => { :method => :get }\n    repo.connect     '/:controller', :action => 'show', :conditions => { :method => :get }\n  end\n\n  ##\n  # Launch page\n  map.launch '/launch', :controller => 'site', :action => 'launch'\n\n  ##\n  # User crap\n  map.private_feed        '/:user_id.private.:format',    :controller => 'dashboard', :action => 'private_feed'\n  map.private_actor_feed  '/:user_id.private.actor.atom', :controller => 'dashboard', :format => 'atom', :action => 'private_actor_feed'\n  map.user_feed           '/:user_id.:format',            :controller => 'users', :action => 'show', :conditions => { :method => :get }\n  map.user                '/:user_id',                    :controller => 'users', :action => 'show', :conditions => { :method => :get }\n\n  ##\n  # Legacy (rofl)\n  map.connect '/~*path', :controller => 'site', :action => 'tilde'\nend\n","markers":{"markers":{"1":{"id":1,"range":[[393,52],[393,52]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":52,"goalBufferRange":null,"autoscroll":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/github/github/config/routes.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"5eeaef643378d20950433c71e1ad8dc3f5dda8b2","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":52,"softTabs":true,"displayBuffer":{"id":53,"softWrap":false,"editorWidthInChars":131,"scrollTop":7514,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/github/github/config/routes.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/lildude/github/github/config/routes.rb","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"metrics":{"sessionLength":4327516},"find-and-replace":{"viewState":{"findHistory":["stafftools"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}},"fuzzy-finder":{"/Users/lildude/github/github/config/routes.rb":1399669070611},"keybinding-resolver":{"attached":false},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/lildude/github/github/config","hasFocus":true,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}