{"mode":"editor","version":1,"windowDimensions":{"x":21,"y":22,"width":1267,"height":829},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/lildude/Sites/habari/system","buffers":[{"text":"<?php\nif ( !defined( 'HABARI_PATH' ) ) { die( 'No direct access' ); }\nclass flickrAPI\n{\n\tfunction __construct()\n\t{\n\t\t$this->key = 'cd0ae46b1332aa2bd52ba3063f0db41c';\n\t\t$this->secret = '76cf747f70be9029';\n\t\t$this->endpoint = 'https://www.flickr.com/services/rest/?';\n\t\t$this->authendpoint = 'https://www.flickr.com/services/auth/?';\n\t\t$this->uploadendpoint = 'https://api.flickr.com/services/upload/?';\n\t\t$this->conntimeout = 20;\n\t}\n\n\tpublic function set_timeout( $timeout )\n\t{\n\t\t$this->conntimeout = $timeout;\n\t}\n\n\tpublic function sign( $args )\n\t{\n\t\tksort( $args );\n\t\tunset( $args['photo'] );\n\t\t$a = '';\n\t\tforeach( $args as $key => $value ){\n\t\t\t$a .= $key . $value;\n\t\t}\n\t\treturn md5( $this->secret . $a );\n\t}\n\n\tpublic function encode( $args )\n\t{\n\t\t$encoded = array();\n\t\tforeach ( $args as $key => $value ){\n\t\t\t$encoded[] = urlencode( $key ) . '=' . urlencode( $value );\n\t\t}\n\t\treturn $encoded;\n\t}\n\n\tfunction call( $method, $args = array () )\n\t{\n\t\t$args = array_merge( array ( 'method' => $method,\n\t\t\t\t'api_key' => $this->key ), $args );\n\n\t\tksort( $args );\n\n\t\t$args = array_merge( $args, array ( 'api_sig' => $this->sign( $args ) ) );\n\t\tksort( $args );\n\n\t\t$call = new RemoteRequest( $this->endpoint, 'POST' );\n\n\t\t$args['api_key'] = $this->key;\n\t\tif ( $method == 'upload' ){\n\t\t\t$call = new RemoteRequest( $this->uploadendpoint, 'POST' );\n\t\t\tif ( is_file( $args['photo'] ) ){\n\t\t\t\t// we have a valid file and filename\n\t\t\t\t$call->set_file( 'photo', $args['photo'] );\n\t\t\t\tunset( $args['photo'] );\n\t\t\t}\n\t\t}\n\n\t\t$call->set_timeout( $this->conntimeout );\n\t\t$call->set_postdata( $args );\n\n\t\ttry {\n\t\t\t$result = $call->execute();\n\t\t}\n\t\tcatch ( RemoteRequest_Timeout $t ) {\n\t\t\tSession::error( 'Currently unable to connect to Flickr.', 'flickr API' );\n\t\t\treturn false;\n\t\t}\n\t\tcatch ( Exception $e ) {\n\t\t\t// at the moment we're using the same error message, though this is more catastrophic\n\t\t\tSession::error( 'Currently unable to connect to Flickr.', 'flickr API' );\n\t\t\treturn false;\n\t\t}\n\n\t\t$response = $call->get_response_body();\n\t\ttry{\n\t\t\t$xml = new SimpleXMLElement( $response );\n\t\t\treturn $xml;\n\t\t}\n\t\tcatch( Exception $e ) {\n\t\t\tSession::error( 'Unable to process Flickr response.', 'flickr API' );\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\nclass Flickr extends flickrAPI\n{\n\tprivate $user_id;\n\n\tfunction __construct( $params = array() )\n\t{\n\t\tparent::__construct( $params );\n\t\t$this->user_id = ( isset( $params['user_id'] ) ) ? $params['user_id'] : User::identify()->id;\n\t}\n\n\t/**\n\t * get a URL for a photo\n\t * @param mixed $photo object, array, or integer\n\t *\tobject: a SimpleXMLElement as returned by photosGetInfo()\n\t *\tarray: the 'photo' element of the XML from photosGetInfo\n\t *\tint: a Flickr photo ID\n\t * @param string $size the size of the photo to fetch\n\t * @return string the URL of the requested photo\n\t*/\n\tfunction getPhotoURL( $photo, $size = '' )\n\t{\n\t\tif ( is_int( $photo ) ) {\n\t\t\t$photo = $this->photosGetInfo( $photo );\n\t\t}\n\t\tif ( $photo instanceof SimpleXMLElement ) {\n\t\t\t$p = (array) $photo->photo->attributes();\n\t\t\t$photo = $p['@attributes'];\n\t\t}\n\t\t$markup = '//farm';\n\t\t$markup .= $photo['farm'];\n\t\t$markup .= '.staticflickr.com/';\n\t\t$markup .= $photo['server'];\n\t\t$markup .= '/';\n\t\t$markup .= $photo['id'];\n\t\t$markup .= '_';\n\t\t$markup .= $photo['secret'];\n\t\t$markup .= $size;\n\t\t$markup .= '.jpg';\n\t\treturn $markup;\n\t}\n\n\t// authentication and approval\n\tpublic function getFrob()\n\t{\n\t\t$xml = $this->call( 'flickr.auth.getFrob', array() );\n\t\treturn $xml->frob;\n\t}\n\n\tpublic function authLink( $frob )\n\t{\n\t\t$params['api_key'] = $this->key;\n\t\t$params['frob'] = $frob;\n\t\t$params['perms'] = 'write';\n\t\t$params['api_sig'] = md5( $this->secret . 'api_key' . $params['api_key'] . 'frob' . $params['frob'] . 'permswrite' );\n\t\t$link = $this->authendpoint . implode( '&', $this->encode( $params ) );\n\t\treturn $link;\n\t}\n\n\tfunction getToken( $frob )\n\t{\n\t\t$xml = $this->call( 'flickr.auth.getToken', array( 'frob' => $frob ) );\n\t\treturn $xml;\n\t}\n\t// grab the token from our db.\n\tfunction cachedToken()\n\t{\n\t\t$token = Options::get( 'flickr_token_' . $this->user_id );\n\t\treturn $token;\n\t}\n\n\t// get photo sizes\n\tfunction getSizes( $photo_id )\n\t{\n\t\t$params = array( 'api_key' => $this->key,\n\t\t\t\t'photo_id' => $photo_id );\n\t\t$xml = $this->call( 'flickr.photos.getSizes', $params );\n\t\treturn $xml;\n\t}\n\n\t// get publicly available photos\n\tfunction getPublicPhotos( $nsid, $extras = '', $per_page = '', $page = '' )\n\t{\n\t\t$params = array( 'user_id' => $nsid );\n\t\tif ( $extras ){\n\t\t\t$params['extras'] = $extras;\n\t\t}\n\t\tif ( $per_page ){\n\t\t\t$params['per_page'] = $per_page;\n\t\t}\n\t\tif ( $page ){\n\t\t\t$params['page'] = $page;\n\t\t}\n\n\t\t$xml = $this->call( 'flickr.people.getPublicPhotos' , $params );\n\t\tforeach( $xml->photos->attributes() as $key => $value ){\n\t\t\t$pic[$key] = (string)$value;\n\t\t}\n\t\t$i = 0;\n\t\tforeach( $xml->photos->photo as $photo ){\n\t\t\tforeach( $photo->attributes() as $key => $value ){\n\t\t\t\t$pic['photos'][(string)$photo['id']][$key] = (string)$value;\n\t\t\t}\n\t\t\t$i++;\n\t\t}\n\t\treturn $pic;\n\t}\n\t// Photosets methods\n\tfunction photosetsGetList( $nsid = '' )\n\t{\n\t\t$params = array();\n\n\t\tif ( $nsid ){\n\t\t\t$params['user_id'] = $nsid;\n\t\t}\n\n\t\t$xml = $this->call( 'flickr.photosets.getList', $params );\n\t\tif ( Error::is_error( $xml ) ){\n\t\t\tthrow $xml;\n\t\t}\n\t\treturn $xml;\n\t}\n\n\tfunction photosetsGetInfo( $photoset_id )\n\t{\n\t\t$params = array( 'photoset_id' => $photoset_id );\n\t\t$xml = $this->call( 'flickr.photosets.getInfo', $params );\n\t\tif ( Error::is_error( $xml ) ){\n\t\t\tthrow $xml;\n\t\t}\n\t\treturn $xml;\n\t}\n\n\tfunction photosetGetPrimary( $p, $size = 'm', $ext = '.jpg' )\n\t{\n\t\treturn '//static.flickr.com/' . $p['server'] . '/' . $p['primary'] . '_' . $p['secret'] . '_' . $size . $ext;\n\t}\n\n\tfunction photosetsGetPhotos( $photoset_id )\n\t{\n\t\t$params = array( 'photoset_id' => $photoset_id );\n\t\t$xml = $this->call( 'flickr.photosets.getPhotos', $params );\n\t\tif ( Error::is_error( $xml ) ){\n\t\t\tthrow $xml;\n\t\t}\n\t\treturn $xml;\n\t}\n\n\tfunction photosetsAddPhoto( $photoset_id, $photo_id )\n\t{\n\t\t$params = array( 'photoset_id' => $photoset_id,\n\t\t\t\t'photo_id' => $photo_id );\n\t\treturn $this->call( 'flickr.photosets.addPhoto', $params );\n\t}\n\n\tfunction photosRecentlyUpdated()\n\t{\n\t\t$params = array();\n\t\tif ( $this->cachedToken() ){\n\t\t\t$params['auth_token'] = $this->cachedToken();\n\t\t}\n\n\t\t$params['secret'] = $this->secret;\n\t\t$params['min_date'] = time() - 31536000;  // Within the last year\n\t\t$params['per_page'] = 10;\n\n\t\t$xml = $this->call( 'flickr.photos.recentlyUpdated', $params );\n\n\t\tif ( Error::is_error( $xml ) ){\n\t\t\tthrow $xml;\n\t\t}\n\t\treturn $xml;\n\t}\n\n\tfunction mediaSearch( $params = array()  )\n\t{\n\t\tif ( $this->cachedToken() ){\n\t\t\t$params['auth_token'] = $this->cachedToken();\n\t\t}\n\n\t\t$params['secret'] = $this->secret;\n\t\t$params['user_id'] = 'me';\n\t\t$params['sort'] = 'date-posted-desc';\n\t\t$params['per_page'] = 20;\n\n\t\t$xml = $this->call( 'flickr.photos.search', $params );\n\n\t\tif ( Error::is_error( $xml ) ){\n\t\t\tthrow $xml;\n\t\t}\n\t\treturn $xml;\n\t}\n\n\tfunction photosSearch( $params = array()  )\n\t{\n\t\tif ( $this->cachedToken() ){\n\t\t\t$params['auth_token'] = $this->cachedToken();\n\t\t}\n\n\t\t$defaults = array(\n\t\t\t'secret' => $this->secret,\n\t\t\t'user_id' => 'me',\n\t\t\t'sort' => 'date-posted-desc',\n\t\t\t'per_page' => 20,\n\t\t\t'media' => 'photos',\n\t\t\t'extras' => 'original_format',\n\t\t);\n\n\t\t$params = array_merge( $defaults, $params );\n\n\t\t$xml = $this->call( 'flickr.photos.search', $params );\n\n\t\tif ( Error::is_error( $xml ) ){\n\t\t\tthrow $xml;\n\t\t}\n\t\treturn $xml;\n\t}\n\n\tfunction videoSearch( $params = array()  )\n\t{\n\t\tif ( $this->cachedToken() ){\n\t\t\t$params['auth_token'] = $this->cachedToken();\n\t\t}\n\n\t\t$params['secret'] = $this->secret;\n\t\t$params['user_id'] = 'me';\n\t\t$params['sort'] = 'date-posted-desc';\n\t\t$params['per_page'] = 20;\n\t\t$params['media'] = 'videos';\n\n\t\t$xml = $this->call( 'flickr.photos.search', $params );\n\n\t\tif ( Error::is_error( $xml ) ){\n\t\t\tthrow $xml;\n\t\t}\n\t\treturn $xml;\n\t}\n\n\tfunction tagsGetListUser( $userid = null )\n\t{\n\t\t$params = array();\n\t\tif ( isset( $userid ) ) {\n\t\t\t$params['user_id'] = $userid;\n\t\t}\n\t\t$xml = $this->call( 'flickr.tags.getListUser', $params );\n\t\treturn $xml;\n\t}\n\n\tfunction photosGetInfo( $photo_id )\n\t{\n\t\t$params = array();\n\t\tif ( $this->cachedToken() ){\n\t\t\t$params['auth_token'] = $this->cachedToken();\n\t\t}\n\n\t\t$params['photo_id'] = $photo_id;\n\t\t$params['secret'] = $this->secret;\n\n\t\t$xml = $this->call( 'flickr.photos.getInfo', $params );\n\n\t\tif ( Error::is_error( $xml ) ){\n\t\t\tthrow $xml;\n\t\t}\n\n\t\treturn $xml;\n\t}\n\n\t/**\n\t * upload an image to Flickr\n\t * @param mixed path to the file to upload, or the raw data itself\n\t * @param String title of the file\n\t * @param String description of the file\n\t * @param String a comma-separated list of tags\n\t * @param Array an array of permissions to apply\n\t * @param Boolean whether to perform an asynchronous upload or not\n\t * @return String a Flickr photo ID or a ticket ID\n\t**/\n\tfunction upload( $photo, $title = '', $description = '', $tags = '', $perms = '', $async = 1  )\n\t{\n\t\t$params = array( 'auth_token' => $this->cachedToken() );\n\t\t$params['photo'] = $photo;\n\n\t\tif ( $title ){\n\t\t\t$params['title'] = $title;\n\t\t} elseif( is_file( $photo ) ) {\n\t\t\t$params['title'] = basename( $photo );\n\t\t} else {\n\t\t\t$params['title'] = date( 'Y-m-d' );\n\t\t}\n\n\t\tif ( $description ){\n\t\t\t$params['description'] = $description;\n\t\t}\n\n\t\tif ( $tags ){\n\t\t\t$params['tags'] = $tags;\n\t\t}\n\n\t\tif ( $perms ){\n\t\t\tif ( isset( $perms['is_public'] ) ){\n\t\t\t\t$params['is_public'] = $perms['is_public'];\n\t\t\t}\n\t\t\tif ( isset( $perms['is_friend'] ) ){\n\t\t\t\t$params['is_friend'] = $perms['is_friend'];\n\t\t\t}\n\t\t\tif ( isset( $perms['is_family'] ) ){\n\t\t\t\t$params['is_family'] = $perms['is_family'];\n\t\t\t}\n\t\t}\n\n\t\tif ( $async ){\n\t\t\t$params['async'] = $async;\n\t\t}\n\t\t// call the upload method.\n\t\t$xml = $this->call( 'upload', $params );\n\n\t\tif ( Error::is_error( $xml ) ){\n\t\t\tthrow $xml;\n\t\t}\n\n\t\tif ( $async ){\n\t\t\treturn( (string)$xml->ticketid );\n\t\t}\n\t\telse{\n\t\t\treturn( (string)$xml->photoid );\n\t\t}\n\t}\n\n\tfunction photosUploadCheckTickets( $tickets )\n\t{\n\t\tif ( is_array( $tickets ) ){\n\t\t\tforeach( $tickets as $key => $value ){\n\t\t\t\tif ( $key ){\n\t\t\t\t\t$params['tickets'] .= ' ';\n\t\t\t\t}\n\t\t\t\t$params['tickets'] .= $value;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t$params['tickets'] = $tickets;\n\t\t}\n\n\t\t$xml = $this->call( 'flickr.photos.upload.checkTickets', $params );\n\t\tif ( Error::is_error( $xml ) ){\n\t\t\tthrow $xml;\n\t\t}\n\n\t\tforeach( $xml->uploader->ticket as $ticket ){\n\t\t\tforeach( $ticket->attributes() as $key => $value ){\n\t\t\t\t$uptick[(string)$ticket['id']][$key] = (string)$value;\n\t\t\t}\n\t\t}\n\t\treturn $uptick;\n\t}\n\n\tfunction reflectionGetMethods()\n\t{\n\t\t$params = array();\n\t\t$xml = $this->call( 'flickr.reflection.getMethods', $params );\n\t\tif ( !$xml ){\n\t\t\treturn false;\n\t\t}\n\t\t$ret = (array)$xml->methods->method;\n\t\treturn $ret;\n\t}\n}\n\n/**\n* Flickr Silo\n*/\n\nclass FlickrSilo extends Plugin implements MediaSilo\n{\n\tconst SILO_NAME = 'Flickr';\n\n\tstatic $cache = array();\n\tprivate $params;\n\n\t/**\n\t* Initialize some internal values when plugin initializes\n\t*/\n\tpublic function action_init()\n\t{\n\t\t$this->params = array();\n\t}\n\n\tpublic function set_user( $user_id )\n\t{\n\t\t$this->params['user_id'] = $user_id;\n\t}\n\n\t/**\n\t* Return basic information about this silo\n\t*     name- The name of the silo, used as the root directory for media in this silo\n\t*\t  icon- An icon to represent the silo\n\t*/\n\tpublic function silo_info()\n\t{\n\t\tif ( $this->is_auth() ) {\n\t\t\treturn array( 'name' => self::SILO_NAME, 'icon' => URL::get_from_filesystem(__FILE__) . '/icon.png' );\n\t\t}\n\t\telse {\n\t\t\treturn array();\n\t\t}\n\t}\n\n\t/**\n\t* Return directory contents for the silo path\n\t*\n\t* @param string $path The path to retrieve the contents of\n\t* @return array An array of MediaAssets describing the contents of the directory\n\t*/\n\tpublic function silo_dir( $path )\n\t{\n\t\t$flickr = new Flickr( $this->params );\n\t\t$results = array();\n\t\t$size = Options::get( 'flickrsilo__flickr_size' );\n\n\t\t$section = strtok( $path, '/' );\n\t\tswitch ( $section ) {\n\t\t\tcase 'attrib-sa':\n\t\t\t\t$xml = $flickr->photosSearch( array( 'user_id' => '', 'license' => '4,5', 'text'=>$_SESSION['flickrsearch'] ) );\n\t\t\t\tforeach( $xml->photos->photo as $photo ) {\n\n\t\t\t\t\t$props = array();\n\t\t\t\t\tforeach( $photo->attributes() as $name => $value ) {\n\t\t\t\t\t\t$props[$name] = (string)$value;\n\t\t\t\t\t}\n\t\t\t\t\t$props = array_merge( $props, self::element_props( $photo, \"http://www.flickr.com/photos/{$photo['owner']}/{$photo['id']}\", $size ) );\n\t\t\t\t\t$results[] = new MediaAsset(\n\t\t\t\t\t\tself::SILO_NAME . '/photos/' . $photo['id'],\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t$props\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'search':\n\t\t\t\t$xml = $flickr->photosSearch( array( 'text'=>$_SESSION['flickrsearch'] ) );\n\t\t\t\tforeach( $xml->photos->photo as $photo ) {\n\n\t\t\t\t\t$props = array();\n\t\t\t\t\tforeach( $photo->attributes() as $name => $value ) {\n\t\t\t\t\t\t$props[$name] = (string)$value;\n\t\t\t\t\t}\n\t\t\t\t\t$props = array_merge( $props, self::element_props( $photo, \"http://www.flickr.com/photos/{$_SESSION['nsid']}/{$photo['id']}\", $size ) );\n\t\t\t\t\t$results[] = new MediaAsset(\n\t\t\t\t\t\tself::SILO_NAME . '/photos/' . $photo['id'],\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t$props\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'photos':\n\t\t\t\t$xml = $flickr->photosSearch();\n\t\t\t\tforeach( $xml->photos->photo as $photo ) {\n\n\t\t\t\t\t$props = array();\n\t\t\t\t\tforeach( $photo->attributes() as $name => $value ) {\n\t\t\t\t\t\t$props[$name] = (string)$value;\n\t\t\t\t\t}\n\t\t\t\t\t$props = array_merge( $props, self::element_props( $photo, \"http://www.flickr.com/photos/{$_SESSION['nsid']}/{$photo['id']}\", $size ) );\n\t\t\t\t\t$results[] = new MediaAsset(\n\t\t\t\t\t\tself::SILO_NAME . '/photos/' . $photo['id'],\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t$props\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'videos':\n\t\t\t\t$xml = $flickr->videoSearch();\n\t\t\t\tforeach( $xml->photos->photo as $photo ) {\n\n\t\t\t\t\t$props = array();\n\t\t\t\t\tforeach( $photo->attributes() as $name => $value ) {\n\t\t\t\t\t\t$props[$name] = (string)$value;\n\t\t\t\t\t}\n\t\t\t\t\t$props = array_merge( $props, self::element_props( $photo, \"http://www.flickr.com/photos/{$_SESSION['nsid']}/{$photo['id']}\", $size ) );\n\t\t\t\t\t$props['filetype'] = 'flickrvideo';\n\t\t\t\t\t$results[] = new MediaAsset(\n\t\t\t\t\t\tself::SILO_NAME . '/photos/' . $photo['id'],\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t$props\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'tags':\n\t\t\t\t$selected_tag = strtok('/');\n\t\t\t\tif ( $selected_tag ) {\n\t\t\t\t\t$xml = $flickr->photosSearch( array( 'tags'=>$selected_tag ) );\n\t\t\t\t\tforeach( $xml->photos->photo as $photo ) {\n\n\t\t\t\t\t\t$props = array();\n\t\t\t\t\t\tforeach( $photo->attributes() as $name => $value ) {\n\t\t\t\t\t\t\t$props[$name] = (string)$value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$props = array_merge( $props, self::element_props( $photo, \"http://www.flickr.com/photos/{$_SESSION['nsid']}/{$photo['id']}\", $size ) );\n\t\t\t\t\t\t$results[] = new MediaAsset(\n\t\t\t\t\t\t\tself::SILO_NAME . '/photos/' . $photo['id'],\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t$props\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$xml = $flickr->tagsGetListUser( $_SESSION['nsid'] );\n\t\t\t\t\tforeach( $xml->who->tags->tag as $tag ) {\n\t\t\t\t\t\t$results[] = new MediaAsset(\n\t\t\t\t\t\t\tself::SILO_NAME . '/tags/' . (string)$tag,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tarray( 'title' => (string)$tag )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'sets':\n\t\t\t\t$selected_set = strtok('/');\n\t\t\t\tif ( $selected_set ) {\n\t\t\t\t\t$xml = $flickr->photosetsGetPhotos( $selected_set );\n\t\t\t\t\tforeach( $xml->photoset->photo as $photo ) {\n\n\t\t\t\t\t\t$props = array();\n\t\t\t\t\t\tforeach( $photo->attributes() as $name => $value ) {\n\t\t\t\t\t\t\t$props[$name] = (string)$value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$props = array_merge( $props, self::element_props( $photo, \"http://www.flickr.com/photos/{$_SESSION['nsid']}/{$photo['id']}\", $size ) );\n\t\t\t\t\t\t$results[] = new MediaAsset(\n\t\t\t\t\t\t\tself::SILO_NAME . '/photos/' . $photo['id'],\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t$props\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$xml = $flickr->photosetsGetList( $_SESSION['nsid'] );\n\t\t\t\t\tforeach( $xml->photosets->photoset as $set ) {\n\t\t\t\t\t\t$results[] = new MediaAsset(\n\t\t\t\t\t\t\tself::SILO_NAME . '/sets/' . (string)$set['id'],\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tarray( 'title' => (string)$set->title )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase '$search':\n\t\t\t\t$path = strtok( '/' );\n\t\t\t\t$dosearch = Utils::slugify( $path );\n\t\t\t\t$_SESSION['flickrsearch'] = $path;\n\t\t\t\t$section = $path;\n\n\t\t\tcase '':\n\t\t\t\tif ( isset( $_SESSION['flickrsearch'] ) ) {\n\t\t\t\t\t$results[] = new MediaAsset(\n\t\t\t\t\t\tself::SILO_NAME . '/search',\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tarray( 'title' => _t( 'Search' ) )\n\t\t\t\t\t);\n\t\t\t\t\t$results[] = new MediaAsset(\n\t\t\t\t\t\tself::SILO_NAME . '/attrib-sa',\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tarray( 'title' => _t( 'Search CC' ) )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t$results[] = new MediaAsset(\n\t\t\t\t\tself::SILO_NAME . '/photos',\n\t\t\t\t\ttrue,\n\t\t\t\t\tarray('title' => _t( 'Photos' ) )\n\t\t\t\t);\n\t\t\t\t$results[] = new MediaAsset(\n\t\t\t\t\tself::SILO_NAME . '/videos',\n\t\t\t\t\ttrue,\n\t\t\t\t\tarray('title' => _t( 'Videos' ) )\n\t\t\t\t);\n\t\t\t\t$results[] = new MediaAsset(\n\t\t\t\t\tself::SILO_NAME . '/tags',\n\t\t\t\t\ttrue,\n\t\t\t\t\tarray('title' => _t( 'Tags' ) )\n\t\t\t\t);\n\t\t\t\t$results[] = new MediaAsset(\n\t\t\t\t\tself::SILO_NAME . '/sets',\n\t\t\t\t\ttrue,\n\t\t\t\t\tarray('title' => _t( 'Sets' ) )\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\t\treturn $results;\n\t}\n\n\t/**\n\t * Function that populates the element properties for use in the silo.\n\t *\n\t * This is to reduce the amount of duplicate code.\n\t *\n\t * @param array $photo The photo element array\n\t * @param string $url The Flickr URL to link to\n\t * @param string $size The size of the image to display.\n\t * @return array\n\t */\n\tprivate static function element_props( $photo, $url, $size )\n\t{\n\t\t$props = array();\n\t\t$props['title'] = ( $photo['title'] != '' ) ? (string)$photo['title'] : (string)$photo['id'];\n\t\t$props['url'] = \"//farm{$photo['farm']}.static.flickr.com/{$photo['server']}/{$photo['id']}_{$photo['secret']}{$size}.jpg\";\n\t\t$props['thumbnail_url'] = \"//farm{$photo['farm']}.static.flickr.com/{$photo['server']}/{$photo['id']}_{$photo['secret']}_m.jpg\";\n\t\t$props['flickr_url'] = $url;\n\t\t$props['filetype'] = 'flickr';\n\t\treturn $props;\n\t}\n\n\t/**\n\t* Get the file from the specified path\n\t*\n\t* @param string $path The path of the file to retrieve\n\t* @param array $qualities Qualities that specify the version of the file to retrieve.\n\t* @return MediaAsset The requested asset\n\t*/\n\tpublic function silo_get( $path, $qualities = null )\n\t{\n\t\t$flickr = new Flickr(  $this->params );\n\t\t$results = array();\n\t\t$size = Options::get( 'flickrsilo__flickr_size' );\n\t\tlist($unused, $photoid) = explode( '/', $path );\n\n\t\t$xml = $flickr->photosGetInfo($photoid);\n\t\t$photo = $xml->photo;\n\n\t\t$props = array();\n\t\tforeach( $photo->attributes() as $name => $value ) {\n\t\t\t$props[$name] = (string)$value;\n\t\t}\n\t\t$props = array_merge( $props, self::element_props( $photo, (string) $xml->photo->urls[0]->url[0], $size ) );\n\t\t$asset = new MediaAsset(\n\t\t\tself::SILO_NAME . '/photos/' . $photo['id'],\n\t\t\tfalse,\n\t\t\t$props\n\t\t);\n\t\t// now get the actual image data\n\t\t$url = $flickr->getPhotoURL( $xml );\n\t\t$call = new RemoteRequest( $url );\n\t\ttry {\n\t\t\t$result = $call->execute();\n\t\t}\n\t\tcatch ( RemoteRequest_Timeout $t ) {\n\t\t\tSession::error( 'Currently unable to connect to Flickr.', 'flickr API' );\n\t\t\treturn false;\n\t\t}\n\t\tcatch ( Exception $e ) {\n\t\t\t// at the moment we're using the same error message, though this is more catastrophic\n\t\t\tSession::error( 'Currently unable to connect to Flickr.', 'flickr API' );\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( $result ) {\n\t\t\t$asset->content = $result;\n\t\t}\n\t\treturn $asset;\n\t}\n\n\t/**\n\t* Get the direct URL of the file of the specified path\n\t*\n\t* @param string $path The path of the file to retrieve\n\t* @param array $qualities Qualities that specify the version of the file to retrieve.\n\t* @return string The requested url\n\t*/\n\tpublic function silo_url( $path, $qualities = null )\n\t{\n\t\t$photo = false;\n\t\tif ( preg_match( '%^photos/(.+)$%', $path, $matches ) ) {\n\t\t\t$id = $matches[1];\n\t\t\t$photo = self::$cache[$id];\n\t\t}\n\n\t\t$size = '';\n\t\tif ( isset( $qualities['size'] ) && $qualities['size'] == 'thumbnail' ) {\n\t\t\t$size = '_m';\n\t\t}\n\t\t$url = \"//farm{$photo['farm']}.static.flickr.com/{$photo['server']}/{$photo['id']}_{$photo['secret']}{$size}.jpg\";\n\t\treturn $url;\n\t}\n\n\t/**\n\t* Create a new asset instance for the specified path\n\t*\n\t* @param string $path The path of the new file to create\n\t* @return MediaAsset The requested asset\n\t*/\n\tpublic function silo_new( $path )\n\t{\n\t}\n\n\t/**\n\t* Store the specified media at the specified path\n\t*\n\t* @param string $path The path of the file to upload\n\t* @param MediaAsset $filedata The asset to upload\n\t*/\n\tpublic function silo_put( $path, $filedata )\n\t{\n\t\t$flickr = new Flickr( $this->params );\n\t\treturn $flickr->upload( $path, $filedata['title'], $filedata['description'], $filedata['tags'], $filedata['perms'], 0 );\n\t}\n\n\t/**\n\t* Delete the file at the specified path\n\t*\n\t* @param string $path The path of the file to retrieve\n\t*/\n\tpublic function silo_delete( $path )\n\t{\n\t}\n\n\t/**\n\t* Retrieve a set of highlights from this silo\n\t* This would include things like recently uploaded assets, or top downloads\n\t*\n\t* @return array An array of MediaAssets to highlihgt from this silo\n\t*/\n\tpublic function silo_highlights()\n\t{\n\t}\n\n\t/**\n\t* Retrieve the permissions for the current user to access the specified path\n\t*\n\t* @param string $path The path to retrieve permissions for\n\t* @return array An array of permissions constants (MediaSilo::PERM_READ, MediaSilo::PERM_WRITE)\n\t*/\n\tpublic function silo_permissions( $path )\n\t{\n\t}\n\n\t/**\n\t* Return directory contents for the silo path\n\t*\n\t* @param string $path The path to retrieve the contents of\n\t* @return array An array of MediaAssets describing the contents of the directory\n\t*/\n\tpublic function silo_contents()\n\t{\n\t\t$flickr = new Flickr(  $this->params );\n\t\t$token = Options::get( 'flickr_token_' . User::identify()->id );\n\t\t$result = $flickr->call( 'flickr.auth.checkToken',\n\t\t\tarray( 'api_key' => $flickr->key,\n\t\t\t\t'auth_token' => $token ) );\n\t\t$photos = $flickr->GetPublicPhotos( $result->auth->user['nsid'], null, 5 );\n\t\tforeach( $photos['photos'] as $photo ){\n\t\t\t$url = $flickr->getPhotoURL( $photo );\n\t\t\techo '<img src=\"' . $url . '\" width=\"150px\" alt=\"' . ( isset( $photo['title'] ) ? $photo['title'] : _t('This photo has no title') ) . '\">';\n\t\t}\n\t}\n\n\t/**\n\t* Add actions to the plugin page for this plugin\n\t* The authorization should probably be done per-user.\n\t*\n\t* @param array $actions An array of actions that apply to this plugin\n\t* @param string $plugin_id The string id of a plugin, generated by the system\n\t* @return array The array of actions to attach to the specified $plugin_id\n\t*/\n\tpublic function filter_plugin_config( $actions, $plugin_id )\n\t{\n\t\t$flickr_ok = $this->is_auth();\n\n\t\tif ( $flickr_ok ){\n\t\t\t$actions['deauthorize'] = _t( 'De-Authorize' );\n\t\t}\n\t\telse{\n\t\t\t$actions['authorize'] = _t( 'Authorize' );\n\t\t}\n\t\t$actions['configure'] = _t( 'Configure' );\n\n\t\treturn $actions;\n\t}\n\n\t/**\n\t * Respond to the user selecting the authorize action on the plugin page\n\t *\n\t */\n\tpublic function action_plugin_ui_authorize()\n\t{\n\t\tif ( $this->is_auth() ){\n\t\t\t$deauth_url = URL::get( 'admin', array( 'page' => 'plugins', 'configure' => $this->plugin_id(), 'configaction' => 'deauthorize' ) ) . '#plugin_options';\n\t\t\techo '<p>' . _t( 'You have already successfully authorized Habari to access your Flickr account.') . '</p>';\n\t\t\techo '<p>' . _t( 'Do you want to <a href=\"%1$s\">revoke authorization</a>?', array( $deauth_url ) ) . '</p>';\n\t\t}\n\t\telse{\n\t\t\t$flickr = new Flickr(  $this->params );\n\t\t\t$_SESSION['flickr_frob'] = '' . $flickr->getFrob();\n\t\t\t$auth_url = $flickr->authLink( $_SESSION['flickr_frob'] );\n\t\t\t$confirm_url = URL::get( 'admin', array( 'page' => 'plugins', 'configure' => $this->plugin_id(), 'configaction' => 'confirm' ) ) . '#plugin_options';\n\t\t\techo '<p>' . _t( 'To use this plugin, you must <a href=\"%1$s\">authorized Habari to have access to your Flickr account</a>.', array( $auth_url ) ) . '</p>';\n\t\t\techo '<p>' . _t( 'When you have completed the authorization on Flickr, return here and <a href=\"%1$s\">confirm that the authorization was successful</a>.', array( $confirm_url ) ) . '</p>';\n\t\t}\n\t}\n\n\t/**\n\t * Respond to the user selecting the confirm action\n\t *\n\t */\n\tpublic function action_plugin_ui_confirm()\n\t{\n\n\t\t$flickr = new Flickr(  $this->params );\n\t\tif ( !isset( $_SESSION['flickr_frob'] ) ){\n\t\t\t$auth_url = URL::get( 'admin', array( 'page' => 'plugins', 'configure' => $this->plugin_id(), 'configaction' => 'authorize' ) ) . '#plugin_options';\n\t\t\techo '<p>' . _t( 'Either you have already authorized Habari to access your flickr account, or you have not yet done so.  Please <a href=\"%1$s\">try again</a>.', array( $auth_url ) ) . '</p>';\n\t\t}\n\t\telse{\n\t\t\t$token = $flickr->getToken( $_SESSION['flickr_frob'] );\n\t\t\tif ( isset( $token->auth->perms ) ){\n\t\t\t\tOptions::set( 'flickr_token_' . User::identify()->id, '' . $token->auth->token );\n\t\t\t\techo '<p>' . _t( 'Your authorization was set successfully.' ) . '</p>';\n\t\t\t}\n\t\t\telse{\n\t\t\t\techo '<p>' . _t( 'There was a problem with your authorization:' ) . '</p>';\n\t\t\t\techo Utils::htmlspecialchars( $token->asXML() );\n\t\t\t}\n\t\t\tunset( $_SESSION['flickr_frob'] );\n\t\t}\n\t}\n\n\t/**\n\t * Respond to the user selecting the deauthorize action\n\t *\n\t */\n\tpublic function action_plugin_ui_deauthorize()\n\t{\n\t\tOptions::set( 'flickr_token_' . User::identify()->id );\n\t\t$reauth_url = URL::get( 'admin', array( 'page' => 'plugins', 'configure' => $this->plugin_id(), 'configaction' => 'authorize' ) ) . '#plugin_options';\n\t\techo '<p>' . _t( 'The Flickr Silo Plugin authorization has been deleted.' ) . '<p>';\n\t\techo '<p>' . _t( 'Do you want to ' ) . \"<a href=\\\"{$reauth_url}\\\">\" . _t( 're-authorize this plugin' ) . \"</a>?<p>\";\n\t}\n\n\t/**\n\t * Respond to the user selecting the configure action\n\t *\n\t */\n\tpublic function action_plugin_ui_configure()\n\t{\n\t\t$ui = new FormUI( strtolower( get_class( $this ) ) );\n\t\t$ui->append( 'select', 'flickr_size','option:flickrsilo__flickr_size', _t( 'Default size for images in Posts:' ) );\n\t\t$ui->flickr_size->options = array( '_s' => _t( 'Square' ) . ' (75x75)', '_t' => _t( 'Thumbnail' ) . ' (100px)', '_m' => _t( 'Small' ) . ' (240px)', '' => _t( 'Medium' ) . ' (500px)', '_b' => _t( 'Large') . ' (1024px)', '_o' => _t( 'Original Size' ) );\n\t\t$ui->append('submit', 'save', _t( 'Save' ) );\n\t\t$ui->set_option('success_message', _t( 'Options saved' ) );\n\t\t$ui->out();\n\t}\n\n\tpublic function action_admin_footer( $theme )\n\t{\n\t\tif ( Controller::get_var( 'page' ) == 'publish' ) {\n\t\t\t$size = Options::get( 'flickrsilo__flickr_size' );\n\t\t\tswitch ( $size ) {\n\t\t\t\tcase '_s':\n\t\t\t\t\t$vsizex = 75;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '_t':\n\t\t\t\t\t$vsizex = 100;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '_m':\n\t\t\t\t\t$vsizex = 240;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '':\n\t\t\t\t\t$vsizex = 500;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '_b':\n\t\t\t\t\t$vsizex = 1024;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '_o':\n\t\t\t\t\t$vsizex = 400;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$vsizey = intval( $vsizex/4*3 );\n\n\t\t\t// Translation strings for used in embedding Javascript.  This is quite messy, but it leads to cleaner code than doing it inline.\n\t\t\t$embed_photo = _t( 'embed_photo' );\n\t\t\t$embed_video = _t( 'embed_video' );\n\t\t\t$thumbnail = _t( 'thumbnail' );\n\t\t\t$title = _t( 'Open in new window' );\n\n\t\t\techo <<< FLICKR\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\tif(habari.media.output.flickr === undefined) {\n\t\t\t\t\thabari.media.output.flickr = {};\n\t\t\t\t}\n\t\t\t\tif(habari.media.output.flickrvideo === undefined) {\n\t\t\t\t\thabari.media.output.flickrvideo = {};\n\t\t\t\t}\n\t\t\t\t$.extend(habari.media.output.flickr, {\n\t\t\t\t\t{$embed_photo}: function(fileindex, fileobj) {\n\t\t\t\t\t\thabari.editor.insertSelection('<figure><img alt=\"' + fileobj.title + '\" src=\"' + fileobj.url + '\"><figcaption><a href=\"' + fileobj.flickr_url + '\">' + fileobj.title + '</a></figcaption></figure>');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t$.extend(habari.media.output.flickrvideo, {\n\t\t\t\t\t{$embed_video}: function(fileindex, fileobj) {\n\t\t\t\t\t\thabari.editor.insertSelection('<object type=\"application/x-shockwave-flash\" width=\"{$vsizex}\" height=\"{$vsizey}\" data=\"//www.flickr.com/apps/video/stewart.swf?v=49235\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"> <param name=\"flashvars\" value=\"intl_lang=en-us&amp;photo_secret=' + fileobj.secret + '&amp;photo_id=' + fileobj.id + '&amp;show_info_box=true\"></param> <param name=\"movie\" value=\"//www.flickr.com/apps/video/stewart.swf?v=49235\"></param> <param name=\"bgcolor\" value=\"#000000\"></param> <param name=\"allowFullScreen\" value=\"true\"></param><embed type=\"application/x-shockwave-flash\" src=\"//www.flickr.com/apps/video/stewart.swf?v=49235\" bgcolor=\"#000000\" allowfullscreen=\"true\" flashvars=\"intl_lang=en-us&amp;photo_secret=' + fileobj.secret + '&amp;photo_id=' + fileobj.id + '&amp;flickr_show_info_box=true\" height=\"{$vsizey}\" width=\"{$vsizex}\"></embed></object>');\n\t\t\t\t\t},\n\t\t\t\t\t{$thumbnail}: function(fileindex, fileobj) {\n\t\t\t\t\t\thabari.editor.insertSelection('<a href=\"' + fileobj.flickr_url + '\"><img alt=\"' + fileobj.title + '\" src=\"' + fileobj.url + '\"></a>');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\thabari.media.preview.flickr = function(fileindex, fileobj) {\n\t\t\t\t\tvar stats = '';\n\t\t\t\t\treturn '<div class=\"mediatitle\"><a href=\"' + fileobj.flickr_url + '\" class=\"medialink\" onclick=\"$(this).attr(\\'target\\',\\'_blank\\');\" title=\"{$title}\">media</a>' + fileobj.title + '</div><div class=\"mediathumb\"><img src=\"' + fileobj.thumbnail_url + '\"></div><div class=\"mediastats\"> ' + stats + '</div>';\n\t\t\t\t}\n\t\t\t\thabari.media.preview.flickrvideo = function(fileindex, fileobj) {\n\t\t\t\t\tvar stats = '';\n\t\t\t\t\treturn '<div class=\"mediatitle\"><a href=\"' + fileobj.flickr_url + '\" class=\"medialink\" onclick=\"$(this).attr(\\'target\\',\\'_blank\\');\"title=\"{$title}\" >media</a>' + fileobj.title + '</div><div class=\"mediathumb\"><img src=\"' + fileobj.thumbnail_url + '\"></div><div class=\"mediastats\"> ' + stats + '</div>';\n\t\t\t\t}\n\t\t\t</script>\nFLICKR;\n\t\t}\n\t}\n\n\tprivate function is_auth()\n\t{\n\t\tstatic $flickr_ok = null;\n\t\tif ( isset( $flickr_ok ) ){\n\t\t\treturn $flickr_ok;\n\t\t}\n\n\t\t$flickr_ok = false;\n\t\t$token = Options::get( 'flickr_token_' . User::identify()->id );\n\t\tif ( $token != '' ){\n\t\t\t$flickr = new Flickr(  $this->params );\n\t\t\t$result = $flickr->call( 'flickr.auth.checkToken', array( 'api_key' => $flickr->key, 'auth_token' => $token ) );\n\t\t\tif ( isset( $result->auth->perms ) ){\n\t\t\t\t$flickr_ok = true;\n\t\t\t\t$_SESSION['nsid'] = (string)$result->auth->user['nsid'];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tOptions::set( 'flickr_token_' . User::identify()->id );\n\t\t\t\tunset( $_SESSION['flickr_token'] );\n\t\t\t}\n\t\t}\n\t\treturn $flickr_ok;\n\t}\n\n\t/**\n\t * Provide controls for the media control bar\n\t *\n\t * @param array $controls Incoming controls from other plugins\n\t * @param MediaSilo $silo An instance of a MediaSilo\n\t * @param string $path The path to get controls for\n\t * @param string $panelname The name of the requested panel, if none then emptystring\n\t * @return array The altered $controls array with new (or removed) controls\n\t *\n\t * @todo This should really use FormUI, but FormUI needs a way to submit forms via ajax\n\t */\n\tpublic function filter_media_controls( $controls, $silo, $path, $panelname )\n\t{\n\t\t$class = __CLASS__;\n\t\tif ( $silo instanceof $class ) {\n\t\t\tunset( $controls['root'] );\n\t\t\t$search_criteria = isset( $_SESSION['flickrsearch'] ) ? htmlentities( $_SESSION['flickrsearch'] ) : '';\n\t\t\t$controls['search']= '<label for=\"flickrsearch\" class=\"incontent\">' ._t( 'Search' ) . '</label><input type=\"search\" id=\"flickrsearch\" placeholder=\"'. _t( 'Search for photos' ) .'\" value=\"'.$search_criteria.'\">\n\t\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\t$(\\'#flickrsearch\\').keypress(function(e){\n\t\t\t\t\t\tif (e.which == 13){\n\t\t\t\t\t\t\thabari.media.fullReload();\n\t\t\t\t\t\t\thabari.media.showdir(\\''.FlickrSilo::SILO_NAME.'/$search/\\' + $(this).val());\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t</script>';\n\t\t}\n\t\treturn $controls;\n\t}\n\n\tpublic function filter_shortcode_flickr( $code_to_replace, $code_name, $attr_array, $code_contents, $post )\n\t{\n\t\t$id = $attr_array['id'];\n\t\t$size = ( isset( $attr_array['size'] ) ) ? '_' . $attr_array['size'] : Options::get('flickrsilo__flickr_size');\n\n\t\t$info = \"flickr$id\";\n\t\t$flickr = $post->info->$info;\n\t\t$f = new Flickr ( array( 'user_id' => $post->author->id ) );\n\t\tif ( ! $flickr ) {\n\t\t\t// this photo's details aren't cached on this post. Let's grab 'em\n\t\t\t$xml = $f->photosGetInfo( $id );\n\t\t\tif ( ! $xml->photo ) {\n\t\t\t\treturn $code_to_replace;\n\t\t\t}\n\t\t\t// get an array of the 'photo' element from the XML\n\t\t\t$p = (array) $xml->photo->attributes();\n\t\t\t$flickr = $p['@attributes'];\n\t\t\t// stuff in the URL to the photopage\n\t\t\t$flickr['photopage'] = (string) $xml->photo->urls[0]->url[0];\n\t\t\t// and if it's a video, we want its dimensions\n\t\t\tif ( 'video' == $flickr['media'] ) {\n\t\t\t\tif ( 0 == $xml->photo->video['ready'] ) {\n\t\t\t\t\treturn $code_to_replace;\n\t\t\t\t}\n\t\t\t\t$flickr['height'] = (string) $xml->photo->video->attributes()->height;\n\t\t\t\t$flickr['width'] = (string) $xml->photo->video->attributes()->width;\n\t\t\t}\n\t\t\t// cache this array on this post\n\t\t\t$post->info->$info = $flickr;\n\t\t\t$post->update();\n\t\t}\n\t\tif ( 'photo' == $flickr['media'] ) {\n\t\t\t$markup = '<a href=\"' . $flickr['photopage'] . '\">';\n\t\t\t$markup .= '<img src=\"';\n\t\t\t$markup .= $f->getPhotoURL( $flickr, $size );\n\t\t\t$markup .= '\"';\n\t\t\tif ( isset( $attr_array['class'] ) ) {\n\t\t\t\t$markup .= ' class=\"' . $attr_array['class'] . '\"';\n\t\t\t}\n\t\t\t$markup .= '></a>';\n\t\t} else {\n\t\t\t$photo_id = $flickr['id'];\n\t\t\t$secret = $flickr['secret'];\n\t\t\t$height = $flickr['height'];\n\t\t\t$width = $flickr['width'];\n\t\t\t$markup = <<<EOF\n<object type=\"application/x-shockwave-flash\" width=\"$width\" height=\"$height\" data=\"//www.flickr.com/apps/video/stewart.swf?v=109786\"  classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"> <param name=\"flashvars\" value=\"intl_lang=en-us&photo_secret=$secret&photo_id=$id&flickr_show_info_box=true&hd_default=false\"></param> <param name=\"movie\" value=\"//www.flickr.com/apps/video/stewart.swf?v=109786\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"allowFullScreen\" value=\"true\"></param><embed type=\"application/x-shockwave-flash\" src=\"//www.flickr.com/apps/video/stewart.swf?v=109786\" bgcolor=\"#000000\" allowfullscreen=\"true\" flashvars=\"intl_lang=en-us&photo_secret=$secret&photo_id=$id&flickr_show_info_box=true&hd_default=false\" height=\"$height\" width=\"$width\"></embed></object>\nEOF;\n\t\t}\n\t\treturn $markup;\n\t}\n}\n\n?>\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":540},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/Sites/habari/system/plugins/flickrsilo/flickrsilo.plugin.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"99b78b99f37d10a2a261c20215b144652a5593d7","deserializer":"TextBuffer"},{"text":"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<pluggable type=\"plugin\">\n\t<name>Flickr Media Silo</name>\n\t<license url=\"http://www.apache.org/licenses/LICENSE-2.0.html\">Apache Software License 2.0</license>\n\n\t<author url=\"http://habariproject.org/\">The Habari Community</author>\n\n\t<version>1.1</version>\n\t<url>http://habariproject.org/</url>\n\t<description><![CDATA[Implements basic Flickr integration.]]></description>\n\n\t<copyright>2009</copyright>\n\t<provides>\n\t\t<feature>flickr</feature>\n\t</provides>\n</pluggable>\n","markers":{"markers":{"1":{"id":1,"range":[[7,13],[7,13]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":544,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[7,13],[7,13]]},"newParams":{"reversed":true,"range":[[7,12],[7,13]]},"deserializer":"MarkerPatch"},{"oldRange":[[7,12],[7,13]],"newRange":[[7,12],[7,12]],"oldText":"0","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[7,12],[7,12]],"newRange":[[7,12],[7,13]],"oldText":"","newText":"1","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[6,0],[6,1]],"newRange":[[6,0],[6,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[4,0],[4,1]],"newRange":[[4,0],[4,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/Sites/habari/system/plugins/flickrsilo/flickrsilo.plugin.xml","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2aa73ae420a66bce7abdb5643e1da2289c87f11b","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":540,"softTabs":false,"displayBuffer":{"id":541,"softWrap":false,"editorWidthInChars":131,"scrollTop":2769,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Sites/habari/system/plugins/flickrsilo/flickrsilo.plugin.php","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":544,"softTabs":false,"displayBuffer":{"id":545,"softWrap":false,"editorWidthInChars":131,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Sites/habari/system/plugins/flickrsilo/flickrsilo.plugin.xml","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/lildude/Sites/habari/system/plugins/flickrsilo/flickrsilo.plugin.php","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"metrics":{"sessionLength":131819},"find-and-replace":{"viewState":{"findHistory":["http","://","figure","url","flickr_url","element_props","http:","////","element_props","http:","_props","http:","button","status","type","function type"],"replaceHistory":["https","//"],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}},"fuzzy-finder":{"/Users/lildude/Sites/habari/system/plugins/flickrsilo/flickrsilo.plugin.php":1403960766549,"/Users/lildude/Sites/habari/system/plugins/flickrsilo/flickrsilo.plugin.xml":1403960757731},"keybinding-resolver":{"attached":false},"tree-view":{"directoryExpansionStates":{"plugins":{"flickrsilo":{}}},"selectedPath":"/Users/lildude/Sites/habari/system/plugins/flickrsilo/flickrsilo.plugin.php","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}