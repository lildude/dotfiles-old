{"mode":"editor","version":1,"windowDimensions":{"x":34,"y":22,"width":1380,"height":829},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/lildude/Dropbox/tmp","buffers":[{"text":"// ==UserScript==\n// Version         0.1 - 11 Dec 2010\n// @name           Cahoot Bank Statement to OFX/CSV\n// @description    Exports Cahoot statement to OFX/CSV formats\n// @namespace      colinseymour\n// @include        https://securebank.cahoot.com/servlet/com.aquariussecurity.accounts.servlet.CurrentAccountStatusEntryServlet?origin=print*\n// @include        https://securebank.cahoot.com/servlet/com.aquariussecurity.accounts.servlet.CreditAccountStatusEntryServlet?origin=print\n// @include        https://securebank.cahoot.com/servlet/com.aquariussecurity.accounts.servlet.CreditAccountStatementEntryServlet?print=yes\n// @include        https://securebank.cahoot.com/servlet/com.aquariussecurity.accounts.servlet.CurrentAccountStatementEntryServlet?print=yes*\n// @include        *CU-Current-Trans.html*\n// @include        *CC-Statement.html*\n// ==/UserScript==\n\n/* History\n\n\t- 31 Mar 2012\tUpdated to cater for new simplified transaction listing. Finally Cahoot don't waste space spelling out Direct Debit\n\n*/\n//alert('Loading...');\n\nvar statement;\nvar busy = false;\nvar initialised = false;\n\nfunction init() {\n\tif (initialised) return;\n\tinitialised = true;\n//\talert(\"Initialising...\");\n\tcreateControls();\n}\n\n\nfunction createControls() {\n\t/* CNS: I only use QIF\n\tcreateButton('To OFX', function(e) { writeStatement(msStatementBuilder, ofxStatementFormatter); });\n\tcreateButton('To CSV', function(e) { writeStatement(msStatementBuilder, csvStatementFormatter); });\n\t*/\n\tcreateButton('To QIF', function(e) { writeStatement(msStatementBuilder, qifStatementFormatter); });\n}\n\nfunction createButton(title, listener) {\n\t//alert(\"Creating button: \" + title);\n\tvar buttonList = document.getElementById('content').getElementsByTagName('tr')[12].getElementsByTagName('td')[2];\n\tvar button = document.createElement('div');\n\tbutton.className = 'floatRight';\n\tvar wrapper = document.createElement('div');\n\tvar link = document.createElement('a');\n\tlink.title = title;\n\tlink.href = '#';\n\tlink.addEventListener('click', listener, false);\n\tlink.innerHTML = title;\n\tbutton.appendChild(link);\n\tbuttonList.appendChild(button);\n}\n\nfunction writeStatement(builder, formatter) {\n\t//alert('Click');\n\tif (busy == true) return;\n\tbusy = true;\n\tif (statement == null) {\n\t\t//alert('Building statement');\n\t\tbuilder();\n\t}\n\t//\talert('Formatting OFX');\n\tvar text = formatter();\n\tOpenWindow=window.open(\"\", \"newwin\", \"height=700, width=500,resizable=yes,scrollbars=yes,toolbar=no,menubar=yes\");\n\tOpenWindow.document.open(\"text/plain\", \"replace\");\n\tOpenWindow.document.write(text)\n\tOpenWindow.document.close();\n\tbusy = false;\n}\n\n\nvar msStatementBuilder = function() {\n\tstatement = new Object();\n\tvar mainForm = document.getElementById('content').getElementsByTagName('tbody')[0];\n\tif ( mainForm.getElementsByTagName('tr')[8].getElementsByTagName('td')[1].getElementsByTagName('font')[1] ) {\n\t\tstatement.accountId = mainForm.getElementsByTagName('tr')[8].getElementsByTagName('td')[1].getElementsByTagName('font')[1].textContent.match(  (/\\d{8,16}/ ) )[0];\n\t} else {\n\t\tstatement.accountId = mainForm.getElementsByTagName('tr')[9].getElementsByTagName('td')[1].getElementsByTagName('font')[1].textContent.match(  (/\\d{8,16}/ ) )[0];\n\t}\n\t\n\tstatement.currency = 'GBP';\n\t/* CNS: Commenting out as not needed for QIF \n\tstatement.period = mainForm.getElementsByTagName('tr')[12].getElementsByTagName('td')[1].getElementsByTagName('font')[1].textContent.split(\" - \");\n\tstatement.DateSplt = statement.period[0].split('/'); \n\tstatement.startDate = new Date('20'+statement.DateSplt[2], statement.DateSplt[1]-1, statement.DateSplt[0]);\n\tstatement.DateSplt = statement.period[1].split('/');\n\tstatement.endDate = new Date('20'+statement.DateSplt[2], statement.DateSplt[1]-1, statement.DateSplt[0]);\n\t*/\n\t\n\tstatement.transactions = new Array();\n\tvar dataTable = mainForm.getElementsByClassName('dataTable')[0];\n\tfor (i = 1; i < dataTable.tBodies[0].rows.length; i++) {\n\t\trow = dataTable.tBodies[0].rows[i];\n//\t\talert('Processing row: ' + i);\n\t\tif (row.cells.length < 4) {\n\t\t\tcontinue;\n\t\t}\n\t\tvar t = new Object();\n\t\tvar dateString = trimString(row.cells[0].textContent);\n//\t\talert('Date string: ' + dateString);\n\t\tif (dateString != null && dateString != '') {\n\t\t\tt.date = new Date(dateString);\n\t\t} else {\n\t\t\tt.date = statement.endDate;\n\t\t}\n//\t\talert('Date: ' + t.date);\n\t\tt.description = row.cells[3].textContent.replace(/\\s{1,}/g, ' ');;\n\t\tt.credit = parseAmount(row.cells[5]);\n\t\tt.debit = parseAmount(row.cells[4]);\n//\t\tt.balance = parseAmount(row.cells[4]);\t// CNS: Not needed for QIF\n\t\tt.amount = t.credit - t.debit;\n//\t\tif (t.amount == 0 && t.description.match('FOREIGN CURRENCY')) {\n//\t\t\tt = statement.transactions[statement.transactions.length - 1];\n//\t\t\tt.memo = row.cells[1].textContent;\n//\t\t\tt.origcurrency = new Object();\n//\t\t\talert('Memo: ' + t.memo);\n//\t\t\tvar fxParts = t.memo.split(/\\s+/);\n//\t\t\talert('FX parts: ' + fxParts);\n//\t\t\tt.origcurrency.symbol = fxParts[3];\n//\t\t\tt.origcurrency.amount = parseFloat(fxParts[2]);\n//\t\t\tt.origcurrency.rate = Math.abs(t.origcurrency.amount / t.amount);\n//\t\t} else { \n\t\t\tt.reference = 'MS' + formatDateForOFX(t.date)  + (1000 + i);\n\t//\t\talert('Processing ' + prettyPrint(t));\n\t\t\tstatement.transactions.push(t);\n//\t\t}\n\t}\n}\n\n\nvar ofxStatementFormatter = function() {\n\tvar OFX = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\\n';\n\tOFX += '<?OFX OFXHEADER=\"200\" VERSION=\"211\" SECURITY=\"NONE\" OLDFILEUID=\"NONE\" NEWFILEUID=\"NONE\"?>\\n';\n\tOFX += '<OFX>\\n';\n\tOFX += '<SIGNONMSGSRSV1><SONRS>'\n\t\t+ '<STATUS><CODE>0</CODE><SEVERITY>INFO</SEVERITY></STATUS>'\n\t\t+ '<DTSERVER>' + formatDateForOFX(new Date()) + '</DTSERVER>'\n\t\t+ '<LANGUAGE>ENG</LANGUAGE></SONRS></SIGNONMSGSRSV1>\\n';\n\tOFX += '<STMTTRNRS><TRNUID>0</TRNUID>'\n\t\t+ '<STATUS><CODE>0</CODE><SEVERITY>INFO</SEVERITY></STATUS>'\n\t\t+ '<STMTRS>'\n\t\t+ '<CURDEF>' + statement.currency + '</CURDEF>'\n\t\t+ '<BANKACCTFROM><ACCTID>' + statement.accountId + '</ACCTID><ACCTTYPE>CHECKING</ACCTTYPE></BANKACCTFROM>'\n\t\t+ '<BANKTRANLIST>'\n\t\t+ '<DTSTART>' + formatDateForOFX(statement.startDate) + '</DTSTART>'\n\t\t+ '<DTEND>' + formatDateForOFX(statement.endDate) + '</DTEND>\\n';\n\n\tfor (i = 0; i < statement.transactions.length; i++) {\n\t\tvar t = statement.transactions[i];\n\t\tOFX += ofxTransactionFormatter(t);\n\t}\n\tOFX += '</BANKTRANLIST></STMTRS></STMTTRNRS>';\n\tOFX += '</OFX>';\n\treturn OFX;\n}\n\nvar ofxTransactionFormatter = function(t) {\n\tif ( t.description.match('CASH WITHDRAWAL') ) {\n\t\tt.type = 'CASH';\n\t} else if ( t.description.match( ( 'DIRECT DEBIT' ) ) ) {\n\t\tt.type = 'DIRECTDEBIT';\n\t} else if ( t.description.match( ( 'INTEREST' ) ) ) {\n\t\tt.type = 'INT';\n\t} else if ( t.description.match( ( 'CARD PAYMENT' ) ) ) {\n\t\tt.type = 'PAYMENT';\n\t} else if ( t.description.match( ( 'STANDING ORDER' ) ) ) {\n\t\tt.type = 'REPEATPMT';\n\t} else {\n\t\tt.amount > 0 ? t.type = 'CREDIT' : t.type = 'DEBIT';\n\t}\n\tvar result = \n\t\ttag('STMTTRN',\n\t\t\t  tag('TRNTYPE', t.type )\n\t\t\t+ tag('DTPOSTED', formatDateForOFX(t.date))\n\t\t\t+ tag('TRNAMT', t.amount)\n\t\t\t+ tag('FITID', t.reference)\n\t\t\t+ tag('NAME', t.description)\n\t\t\t+ (t.memo ? tag('MEMO', t.memo) : '')\n\t\t\t+ (t.origcurrency ? tag('ORIGCURRENCY', tag('CURRATE', t.origcurrency.rate) + tag('CURSYM', t.origcurrency.symbol)) : '')\n\t\t) + '\\n';\n\treturn result;\n}\n\nvar csvStatementFormatter = function() {\n\tvar CSV = \"Date,Transactions,Debits,Credits,Balance\\n\";\n\tfor (i = 0; i < statement.transactions.length; i++) {\n\t\tvar t = statement.transactions[i];\n\t\tCSV += formatDateForCSV(t.date) + ',\"' + t.description + '\",' + ( t.debit > 0 ? t.debit : '' ) + ',' + ( t.credit > 0 ? t.credit : '' ) + ',' + t.balance;\n\t\tCSV += '\\n';\n\t}\n\treturn CSV;\n}\n\nvar qifStatementFormatter = function() {\n\tif ( statement.accountId.length == 8 ) {\n\t\tvar accName = 'Current';\n\t\tvar accType = 'Bank';\n\t} else {\n\t\tvar accName = 'Cahoot';\n\t\tvar accType = 'CCard';\n\t\t\n\t}\n\tvar QIF = \"!Account\\nN\" + accName + \"\\nT\" + accType + \"\\n^\\n!Type:\" + accType + \"\\n\\n\" \n\tfor (i = 0; i < statement.transactions.length; i++) {\n\t\tvar t = statement.transactions[i];\n\t\tQIF += qifTransactionFormatter(t);\n\t}\n\t//QIF += '</pre>';\n\treturn QIF;\n}\n\nvar qifTransactionFormatter = function(t) {\n\tif ( t.description.match( 'ATM WDL' ) ) {\n\t\tt.payee = 'Cash';\n\t\tt.category = 'Expenses:Cash Withdrawal';\n\t} else if ( t.description.match( 'DD TO MBNA E B' ) ) {\n\t\tt.payee = 'MBNA Europe / Virgin';\n\t\tt.category = '[Virgin]';\n\t} else if ( t.description.match( 'DD TO SPECSAVE' ) ) {\n\t\tt.payee = 'SpecSavers';\n\t\tt.category = 'Expenses:Bills:Contact Lenses';\n\t} else if ( t.description.match( 'DD TO LV LIFE' ) ) {\n\t\tt.payee = 'Liverpool Victoria';\n\t\tt.category = 'Expenses:Insurance:Life';\n\t} else if ( t.description.match( 'DD TO VIRGIN MOBILE' ) ) {\n\t\tt.payee = 'Virgin Mobile';\n\t\tt.category = 'Expenses:Bills:Mobile Phone';\n\t} else if ( t.description.match( 'CREDIT FROM ORACLE CORPO' ) ) {\n\t\tt.payee = 'Oracle Corporation';\n\t\tt.category = 'Income:Salary';\n\t} else if ( t.description.match( 'STANDING ORDER TO Mr C N' ) ) {\n\t\tt.payee = 'Joint Account';\n\t\tt.category = 'Expenses:Miscellaneous:Joint Account';\n\t} else if ( t.description.match( 'DD TO PAYMENT' ) ) {\n\t\tt.payee = 'Egg Credit Card';\n\t\tt.category = '[Egg]'\n\t} else if ( t.description.match( 'CP TO ITUNES-G' ) ) {\n\t\tt.payee = 'iTunes';\n\t\tt.category = 'Expenses:Luxuries:Music & Video';\n\t} else if ( t.description.match( 'CREDIT FROM CITIBANK IRE' ) ) {\n\t\tt.payee = 'Citibank Ire Fin S';\n\t\tt.category = 'Income:Internet Advertising';\n\t\tt.description = \"Google Adsense - \" + t.description;\n\t} else if ( t.description.match( 'INTEREST PAID AFTER TAX' ) ) {\n\t\tt.payee = 'Interest Received';\n\t\tt.category = 'Income:Interest Received (Current Account)';\n\t} else if ( t.description.match( 'CP TO ASDA STORES' ) ) {\n\t\tt.payee = 'ASDA Petrol';\n\t\tt.category = 'Expenses:Car:Petrol';\n\t} else if ( t.description.match( 'CP TO AMAZON' ) ) {\n\t\tt.payee = 'Amazon.co.uk';\n\t\tt.category = 'Expenses:Luxuries:Misc';\n\t} else if ( t.description.match( 'CP TO MARKS &' ) ) {\n\t\tt.payee = 'Marks & Spencer';\n\t\tt.category = 'Expenses:Luxuries:Clothing';\n\t} else if ( t.description.match( 'INTERNATIONAL USE' ) ) {\n\t\tt.payee = 'International Use';\n\t\tt.category = 'Expenses:Banking:Service Charges';\n\t} else if (t.description.match( 'CP TO BAXTER STOR' ) ) {\n\t\tt.payee = 'Baxter Storey';\n\t\tt.category = 'Expenses:Luxuries:Dining Out';\n\t\tt.description = t.description + \" Girovent Topup\";\n\t} else if (t.description.match( 'DD TO DAVID LLOYD' ) ) {\n\t\tt.payee = 'David Lloyd';\n\t\tt.category = 'Expenses:Bills:Gym Membership';\n\t} else if (t.description.match( 'STANDING ORDER TO CSeymo') ) {\n\t\tswitch(t.amount) {\n\t\t\tcase -15:\n\t\t\t\tt.payee = 'AMF: Car Tax';\n\t\t\t\tbreak;\n\t\t\tcase -25:\n\t\t\t\tt.payee = 'AMF: Car Service';\n\t\t\t\tbreak;\n\t\t\tcase -20:\n\t\t\t\tt.payee = 'AMF: Car Tyres';\n\t\t\t\tbreak;\n\t\t\tcase -35:\n\t\t\t\tt.payee = 'AMF: Car Insurance';\n\t\t\t\tbreak;\n\t\t\tcase -50:\n\t\t\t\tt.payee = 'AMF: Gadgets';\n\t\t\t\tbreak;\n\t\t\tcase -600:\n\t\t\t\tt.payee = 'AMF: ISAs';\n\t\t\t\tbreak;\n\t\t}\n\t\tt.category = '[Egg Savings]';\n\t} else if (t.description.match( 'CP TO WAITROSE' ) ) {\n\t\tt.payee = 'Waitrose';\n\t\tt.category = 'Expenses:Luxuries:Misc';\n\t} else if (t.description.match( 'CREDIT FROM EGG BANKING' ) ) {\n\t\tt.payee = 'Egg Savings';\n\t\tt.category = '[Egg Savings]';\n\t} else if (t.description.match( 'DD TO CAHOOT B' ) ) {\n\t\tt.payee = 'Cahoot Credit Card';\n\t\tt.category = '[Cahoot]';\n\t} else {\n\t\tt.payee = t.description;\n\t\tt.category = '';\n\t}\n\tvar r = \"D\" + formatDateForCSV(t.date) + \"\\n\";\n\t\tr += \"T\" + t.amount + \"\\n\";\n\t\tr += \"Cc\\n\";\n\t\tr += \"P\" + t.payee + \"\\n\";\n\t\tr += \"L\" + t.category + \"\\n\";\n\t\tr += \"M\" + t.description + \"\\n\";\n\t\tr += \"^\\n\";\n\treturn r;\n}\n\nfunction tag(name, body) {\n\treturn '<' + name + '>' + body + '</' + name + '>';\n}\n\n\n\n\n// trim whitespace at the beginning, end and multiple occurences in the middle\nfunction trimString(str) \n{\n\tstr = str.replace(new RegExp(/^\\s+/),\"\"); // START WHITESPACES\n\tstr = str.replace(new RegExp(/\\s+$/),\"\"); // END WHITESPACES\n\tstr = str.replace(new RegExp(/\\s+\\s+/g),\" \"); // MIDDLE MULTIPLE WHITESPACES\n\treturn str;\n}\n\nfunction prettyPrint(t) {\n\tvar result = 'Transaction[';\n\tfor (var prop in t) {\n\t\tresult += prop + ': ' + t[prop] + ', ';\n\t}\n\tresult += ']';\n\treturn result;\n}\n\nfunction formatDateForCSV(d) {\n\tvar result = d.toLocaleFormat('%d/%m/%y');\n\treturn result;\n}\n\nfunction formatDateForOFX(d) {\n\tif (d == null) return null;\n\tvar result = d.toLocaleFormat('%Y%m%d%H%M%S');\n\treturn result;\n}\n\nfunction parseAmount(element) {\n\tvar text = element.textContent;\n\tif (text == null) return null;\n\tvar matches = text.match(new RegExp(/\\d*\\.\\d*/));\n\tif (matches == null) return null;\n\ttext = matches[0];\n\tvar value = parseFloat(text);\n\tvalue = value ? value : 0;\n\treturn value.toFixed(2);\n}\n\ninit();","markers":{"markers":{"1":{"id":1,"range":[[313,52],[313,52]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":60,"goalBufferRange":null},"deserializer":"Marker"},"2":{"id":2,"range":[[158,0],[183,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{"class":"fold","displayBufferId":61},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/Dropbox/tmp/cahoot_bank_statement_to.user.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"1a0160e2cc46026d94023683346f7f9bc72b0b6f","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":60,"softTabs":false,"displayBuffer":{"id":61,"softWrap":false,"editorWidthInChars":null,"scrollTop":5559,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Dropbox/tmp/cahoot_bank_statement_to.user.js","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/lildude/Dropbox/tmp/cahoot_bank_statement_to.user.js","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"metrics":{"sessionLength":85003},"fuzzy-finder":{"/Users/lildude/Dropbox/tmp/cahoot_bank_statement_to.user.js":1407680301504},"keybinding-resolver":{"attached":false},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/lildude/Dropbox/tmp/cahoot_bank_statement_to.user.js","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}