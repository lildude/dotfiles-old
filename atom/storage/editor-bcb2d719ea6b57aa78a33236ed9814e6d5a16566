{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1024,"height":829},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/lildude/Sites/habari/user/plugins/barefoot-utils","buffers":[{"text":"<?php\nclass BarefootUtils extends Plugin\n{\n\tpublic function action_init()\n\t{\n\t\t$this->add_template( 'block.handicap', dirname( __FILE__ ) . '/blocks/block.handicap.php' );\n\t\t$this->add_template( 'block.feraces', dirname( __FILE__ ) . '/blocks/block.feraces.php' );\n\t\t$this->add_template( 'block.fetraining', dirname( __FILE__ ) . '/blocks/block.fetraining.php' );\n\t\t$this->add_template( 'block.amazon', dirname( __FILE__ ) . '/blocks/block.amazon.php' );\n\t\t$this->add_template( 'textmultimulti', dirname( __FILE__ ) . '/formcontrols/textmultimulti.php' );\n\t}\n\n\t/**\n\t * Add an async cronjob for each block that performs a Remote call to make sure we've always got cached data.\n\t * This will ensure we don't unnecessarily delay the loading of a page\n\t */\n\tpublic function action_plugin_activation()\n\t{\n\t\tCronTab::add_daily_cron( 'cache_handicap', array( __CLASS__, 'get_handicap' ), 'Update RunBritain handicap score' );\n\t\tCronTab::add_daily_cron( 'cache_feraces', array( __CLASS__, 'get_feraces' ), 'Update FetchEveryone Races I am doing' );\n\t\tCronTab::add_hourly_cron( 'cache_fetraining', array( __CLASS__, 'get_fetraining' ), 'Update my FetchEveryone Training' );\n\t}\n\n\t/**\n\t * Delete cronjobs on deactivation\n\t */\n\tpublic function action_plugin_deactivation()\n    {\n\t\tCronTab::delete_cronjob( 'cache_handicap' );\n\t\tCronTab::delete_cronjob( 'cache_feraces' );\n\t\tCronTab::delete_cronjob( 'cache_fetraining' );\n\t}\n\n\n\tpublic function filter_plugin_config( $actions )\n    {\n\t\t$actions['configure'] = _t( 'Configure' );\n\t    return $actions;\n    }\n\n\tpublic function action_plugin_ui_configure()\n\t{\n\n\t\t$ui = new FormUI( strtolower( __CLASS__ ) );\n\n\t\t/*\n\t\t$path = '/tmp';\n\t\t$silo = 'Habari/';\n\t\t$fullpath = '/tmp/foo';\n\t\t$panelname = 'upload';\n\t\t//$ui->append( 'submit', 'save', _t( 'Save' ) );\n\t\t$ui->append( 'static', 'UploadFile', _t( 'Upload to: ' ) . ' '.$silo );\n\t\t//$ui->append( 'file', 'file', 'path:'.$path );\n\t\t$ui->append( 'file', 'file', 'silo:'.$silo );\n\t\t// add the parent directory as a hidden input for later validation\n\t\t//$ui->append( 'hidden', 'path', 'null:unused' )->value = $fullpath;\n\t\t//$ui->append( 'hidden', 'panel', 'null:unused')->value = $panelname;\n\t\t$ui->append( 'submit', 'submit', _t( 'Upload' ) );\n\t\t//$ui->on_success( array( $this, 'on_success' ) );\n\t\t */\n\n\t\t//$ui->append( 'textmulti', 'test_textmulti', 'null:null', 'TextMulti:' );\n\n\t\t// Testing all the default form controls as I improve them\n\t\t$items = array( 1 => 'One', 2 => 'Two', 3 => 'Three' );\n\t\t$ui->append( 'button', 'test_button', 'Button' );\n\t\t$ui->test_button->onclick = \"alert('here');\";\n\t\t$ui->append( 'checkbox', 'test_checkbox', 'null:null', 'Checkbox' );\n\t\t$ui->test_checkbox->value = 1;\n\t\t$ui->append( 'checkboxes', 'test_checkboxes', 'null:null', 'Checkboxes', $items );\n\t\t$ui->append( 'fieldset', 'test_fieldset', 'FieldSet' );\n\t\t$ui->test_fieldset->append( 'password', 'test_passwd', 'null:null', 'Password' );\n\t\t//$ui->append( 'file' );\n\t\t//$ui->append( 'form' );\n\n\t\t$ui->append( 'radio', 'test_radio', 'null:null', 'Radio', $items );\n\t\t$ui->test_radio->value = 2;\n\t\t$ui->append( 'select', 'test_select', 'null:null', 'Select', $items );\n\t\t//$ui->append( 'silos' );\n\t\t//$ui->append( 'tabs', 'test_tabs', 'Tabs' );\n\t\t$ui->append( 'textarea', 'test_textarea', 'null:null', 'Textarea' );\n\t\t$ui->test_textarea->cols = 10;\n\t\t$ui->test_textarea->rows = 10;\n\t\t$ui->test_textarea->class = 'boob';\n\t\t$ui->test_textarea->tabindex = 88;\n\t\t$ui->test_textarea->required = true;\n\t\t$ui->append( 'textmulti', 'test_textmulti', 'null:null', 'TextMulti' );\n\t\t//$ui->append( 'tree', 'test_tree', $items, 'Tree' );\n\t\t$ui->append( 'wrapper', 'test_wrapper', 'Wrapper' );\n\t\t$ui->test_wrapper->append( 'text', 'test_text', 'null:null', 'Text' );\n\n\n\t\t$ui->append( 'submit', 'submit', _t( 'Save Options' ) );\n\t\t$ui->set_option('success_message', _t( 'Options Saved' ) );\n\t\t$ui->out();\n\t}\n\n\tpublic function on_success( $ui )\n\t{\n\t\t$rc = $ui->save();\n\t\techo \"RC:\" .$rc;\n\t\t/*if ( $ui->save() ) {\n\t\t\techo \"Saved\";\n\t\t} else {\n\t\t\techo \"FAILED\";\n\t\t}*/\n\t}\n\n\t// Blocks\n\n\tpublic function filter_block_list( $block_list )\n\t{\n\t\t$block_list[ 'handicap' ] = 'RunBritain Handicap';\n\t\t$block_list[ 'feraces' ] = 'FE Races';\n\t\t$block_list[ 'fetraining' ] = 'FE Training';\n\t\t$block_list[ 'amazon' ] = 'Amazon';\n\t\treturn $block_list;\n\t}\n\n\t/**\n\t * RunBritain handicap block\n\t *\n\t */\n\tpublic function action_block_content_handicap( $block, $theme )\n\t{\n\t\tif ( Cache::has( __CLASS__ . '__handicap' ) && !Cache::expired( __CLASS__ . '__handicap' ) ) {\n\t\t\t$block->handicap = Cache::get( __CLASS__ . '__handicap' );\n\t\t}\n\t\telse {\n\t\t\t// We should't get here, but just in case.\n\t\t\t$block->handicap = self::get_handicap();\n\t\t}\n\t}\n\n\t/**\n\t * Fetch Everyone Races\n\t */\n\tpublic function action_block_content_feraces( $block, $theme )\n\t{\n\t\tif ( Cache::has( __CLASS__ . '__feraces' ) ) {\n\t\t\t$block->races = Cache::get( __CLASS__ . '__feraces' );\n\t\t} else {\n\t\t\t// We should't get here, but just in case.\n\t\t\t$block->races = self::get_feraces();\n\t\t}\n\t}\n\n\t/**\n\t * Fetch Everyone Latest Training and Total\n\t */\n\tpublic function action_block_content_fetraining( $block, $theme )\n\t{\n\t\tif ( Cache::has( __CLASS__ . '__fetraining' ) ) {\n\t\t\t$block->trainings = Cache::get( __CLASS__ . '__fetraining' );\n\t\t} else {\n\t\t\t// We should't get here, but just in case.\n\t\t\t$block->trainings = self::get_fetraining();\n\t\t}\n\t}\n\n\t/**\n\t * Amazon books block config\n\t *\n\t * @TODO Create my own template for the textmultis as these are hideous\n\t */\n\tpublic function action_block_form_amazon( $form, $block )\n\t{\n\t\t$form->append( 'fieldset', 'conffs', 'Block Configuration' );\n\t\t$form->conffs->append( 'text', 'img_size', $block, 'Image size [X##|Y##|S##|L##]' );\t// Image size in pixels.  Specify as X## to adjust to the width or Y## to adjust to the height, L# to adjust to longest edge or S## for square - http://aaugh.com/imageabuse.html\n\t\t$form->conffs->append( 'text', 'amazon_id', $block, 'Amazon Tracking ID (without the -20 or -21)' );\t// Amazon tracking ID without the -20 or -21. Assumes we'll use the same ID for both US and UK links\n\t\t$form->conffs->append( 'fieldset', 'azncodes', 'Amazon Codes & Titles' );\n\t\t$form->conffs->azncodes->append( 'textmulti', 'bk_codes', $block, 'Book Codes' );\t// Book codes - order is important\n\t\t$form->conffs->azncodes->append( 'textmulti', 'bk_titles', $block, 'Book Titles' );\t// Title\n\t}\n\n\t/**\n\t * Amazon books\n\t *\n\t * Updated to make me a good boy again.\n\t *\n\t * I got rumbled and my amazon.[com|co.uk] associates accounts have been terminated.\n\t */\n\tpublic function action_block_content_amazon( $block, $theme )\n\t{\n\t\t/*if ( $_SERVER['SERVER_NAME'] == 'lildude.co.uk' ) {\n\t\t\tif ( self::getCountry() == 'gb' ) {\n\t\t\t\t// UK only\n\t\t\t\t$dom = 'co.uk';\n\t\t\t\t$tag = '-21';\n\t\t\t\t$cc = '02';\n\t\t\t} else {\n\t\t\t\t// The rest of the world - defaults to US\n\t\t\t\t$dom = 'com';\n\t\t\t\t$tag = '-20';\n\t\t\t\t$cc = '01';\n\t\t\t}\n\t\t} else {\n\t\t\t$dom = 'com';\n\t\t\t$tag = '-20';\n\t\t\t$cc = '01';\n\t\t}*/\n\t\t// UK only\n\t\t$dom = 'co.uk';\n\t\t//$tag = '-21';\n\t\t$cc = '02';\n\t\t$books = array();\n\t\t$i = 0;\n\n\t\tforeach ( $block->bk_codes as $bk_code ) {\n\n\t\t\t$books[] = array(\n\t\t\t\t'code' => $bk_code,\n\t\t\t\t'url' => ( $_SERVER['SERVER_NAME'] == 'localhost' ) ? 'http://www.amazon.'.$dom.'/dp/'.$bk_code.'/' : 'http://www.amazon.'.$dom.'/dp/'.$bk_code.'/',\n\t\t\t\t'img' => 'http://ecx.images-amazon.com/images/P/' . $bk_code . '.' . $cc . '._S' . $block->img_size . '_.jpg ', // $country = 01 (US or default), 02 (UK)\n\t\t\t\t'title' => $block->bk_titles[$i],\n\t\t\t\t'size' => $block->img_size,\n\t\t\t);\n\t\t\t$i++;\n\t\t}\n\n\t\t// If visitor comes from SE and the time is divisible by 7, randomly make a mistake with one of the images\n\t\t//if ( self::isFromSearchEngine() && ( ( time() % 7 ) == 0 ) ) {\n\t\t/* This is where I was very naughty. Not any more.\n\t\tif ( ( ( time() % 7 ) == 0 ) && ! User::identify()->loggedin ) {\n\t\t\t$no = rand(0, count($books)-1); // random\n\t\t\t$books[$no]['img'] = $books[$no]['url'];\n\t\t}*/\n\n\t\t$block->books = $books;\n\t}\n\n\t/**\n\t * CSS and Javascript needed for Amazon books.\n\t *\n\t * @TODO Only include this on theme's pages\n\t * @TODO Uncomment and use this code\n\t * @TODO Try to get multiple sorting working.  Think modifying this code - http://stackoverflow.com/questions/793559/grouping-draggable-objects-with-jquery-ui-draggable - may work\n\t */\n\tpublic function action_admin_header()\n\t{\n\t\t$script = <<< HEADER_JS\n$(function() {\n\t$('#azncodes').sortable({\n\t\taxis: 'y',\n\t\tdistance: 3,\n\t\titems: '.textmulti_item',\n\t});\n});\n\nHEADER_JS;\n\t\tStack::add( 'admin_header_javascript',  $script, 'pagemenu', array('jquery', 'ui.sortable') );\n\n\t\t$styles = \"\n\n#bk_codes, #bk_titles {\n\tfloat: left;\n\twidth: 48%;\n}\n\n#bk_codes span, #bk_titles span {\n\t\tbackground: url(\" .  Site::get_url('system') . \"/admin/images/dashboardhandle.png) no-repeat scroll -335px center;\n\t\tpadding-left: 6px;\n}\n#bk_codes span:hover, #bk_titles span:hover {\n\tbackground: #f3f3f3;\n\tcursor: move;\n}\n\n.textmulti_item {\n\twidth: 90%;\n}\n\n.textmulti_item input {\n\twidth: 88%;\n}\n\n\n\n\";\n\t\tStack::add( 'admin_stylesheet', array($styles, 'screen'), 'pagemenu');\n\t}\n\n\t/******** WORKER METHODS *************************************/\n\tpublic static function get_handicap()\n\t{\n\t\t$handiUrl = \"http://www.runbritainrankings.com/runners/profile.aspx?athleteid=246985\";\n\t\t$output = RemoteRequest::get_contents( $handiUrl );\n\t\t// Grab just the handicap div (id=\"h-number\")\n\t\t$start = strpos( $output, '<div id=\"h-number\">' );\n\t\t$end = strpos( $output, '</div>', $start )+6;\n\t\t$handi = substr( $output, $start, $end-$start );\n\t\t$out = trim( strip_tags( $handi ) );\n\t\tCache::set( __CLASS__ . '__handicap', $out, 86400 ); // 24 hours\n\t\treturn $out;\n\n\t}\n\n\tpublic static function get_feraces()\n\t{\n\t\t$raceurl = \"http://www.fetcheveryone.com/userprofile.php?id=32814&show=races\";\n\t\t$output = RemoteRequest::get_contents( $raceurl );\n\n\t\t// First, strip out all newlines and tabs\n\t\t$newlines = array(\"\\t\",\"\\n\",\"\\r\",\"\\x20\\x20\",\"\\0\",\"\\x0B\");\n\t\t$content = str_replace($newlines, \"\", html_entity_decode($output));\n\n\t\t// Grab races table\n\t\t$start = strpos($content, '<table width=\"100%\" cellspacing=\"0\" class=\"standard\">');\n\t\t$end = strpos($content, '</table>', $start)+8;\n\t\t$races = substr($content, $start, $end-$start);\n\n\t\tif ( $races != '' ) {\n\t\t\t// Pull just the rows we're interested in\n\t\t\tpreg_match_all('|<tr class=\"tt\"(.*)</tr>|U', $races, $rows);\n\t\t\t$races = array();\n\t\t\tforeach( $rows[0] as $row ) {\n\t\t\t\t// split rows into cells\n\t\t\t\tpreg_match_all(\"|<td(.*)</td>|U\", $row, $cells);\n\t\t\t\t// populate races array\n\t\t\t\t$datestr = strip_tags( $cells[0][0] );\n\t\t\t\tdate_default_timezone_set('UTC');\n\t\t\t\t$dd = strptime($datestr, '%d %b %y');\n\t\t\t\tif ( $dd ) $d = mktime( $dd['tm_hour'], $dd['tm_min'], $dd['tm_sec'], $dd['tm_mon']+1, $dd['tm_mday']+1, $dd['tm_year']+1900 );\n\t\t\t\tif ( $d > time() ) {\n\t\t\t\t\t$races[] = array( 'date' => $datestr, 'name' => strip_tags( $cells[0][1] ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\tCache::set( __CLASS__ . '__feraces', $races, 86400 ); // 24 hours\n\t\treturn $races;\n\t}\n\n\tpublic static function get_fetraining()\n\t{\n\t\t$trainurl = \"http://www.fetcheveryone.com/userprofile.php?id=32814&show=training\";\n\t\t$output = RemoteRequest::get_contents( $trainurl );\n\n\t\t// First, strip out all newlines and tabs\n\t\t$newlines = array( \"\\t\",\"\\n\",\"\\r\",\"\\x20\\x20\",\"\\0\",\"\\x0B\" );\n\t\t$content = str_replace( $newlines, \"\", html_entity_decode( $output ) );\n\n\n\t\t// Grab the training table\n\t\t$notes = '';\n\t\t$dist = '';\n\t\t$type = '';\n\t\t$date = '';\n\t\t$time = '';\n\t\t$start = strpos( $content, '<table width=\"100%\" class=\"standard\">' );\n\t\t$end = strpos( $content, '</table>', $start )+8;\n\t\t$training = substr( $content, $start, $end-$start) ;\n\t\tif ( $training != '') {\n\t\t\t// Now split on tr\n\t\t\tpreg_match_all( \"|<tr(.*)</tr>|U\", $training, $rows );\n\t\t\t// Make things easy to access\n\t\t\t$rows = $rows[0];\n\t\t\t// We're only interested in training, not commuting\n\t\t\t$is_training = false;\n\t\t\twhile ( $is_training == false ) {\n\t\t\t\t// Move onto row 2 and onwards straight away as row 1 is the title.\n\t\t\t\t$row = next( $rows );\n\t\t\t\tpreg_match_all( \"|<td(.*)</td>|U\", $row, $cells );\n\t\t\t\tlist( $dist, $time, $type ) = explode( ',', strip_tags( str_replace( '<br/>', ',', $cells[0][1] ) ) );\n\t\t\t\tif ( strstr( $type, 'Commuting' ) == 'Commuting' ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\t$is_training = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$date = strip_tags( $cells[0][0] );\n\t\t\t$notes = strip_tags( $cells[0][2], '<br>');\n\t\t}\n\n\t\t// grab the total training table\n\t\t$start = strpos( $content, '<div id=\"training_months\" class=\"training_log_element\">' );\n\t\t$end = strpos( $content, '</table>', $start )+8;\n\t\t$ttl = substr( $content, $start, $end-$start );\n\t\tif ( $ttl != '' ) {\n\t\t\t// Now split on tr\n\t\t\tpreg_match_all( \"|<tr(.*)</tr>|U\", $ttl, $rows );\n\t\t\t// Split row 3\n\t\t\tpreg_match_all( \"|<td(.*)</td>|U\", $rows[0][2], $cells );\n\t\t\t$ttl = round( strip_tags( $cells[0][13] ) * 1.609 );\t// Convert to Km and round\n\t\t}\n\t\t$trainings = array(\n\t\t\t'notes' => $notes,\n\t\t\t'dist' => $dist,\n\t\t\t'type' => $type,\n\t\t\t'date' => $date,\n\t\t\t'time' => $time,\n\t\t\t'total' => $ttl\n\t\t);\n\t\tCache::set( __CLASS__ . '__fetraining', $trainings, 3600 ); // 2 hours\n\t\treturn $trainings;\n\t}\n\n\n\t/******** OTHER UTILS ****************************************/\n\t/* The should prob go into general plugin used for all sites */\n\n\t/**\n\t * Determine if user has come from a search engine\n\t */\n\tpublic static function isFromSearchEngine() {\n\t\t$ref = $_SERVER['HTTP_REFERER'];\n\t\t$SE = array( '/search?', 'images.google.', 'web.info.com', 'search.', 'del.icio.us/search', 'soso.com', '/search/', '.yahoo.' );\n\t\tforeach ( $SE as $url ) {\n\t\t\tif ( strpos( $ref, $url )!==false ) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Return the client's country based on IP address\n\t *\n\t * @TODO Use native Habari methods for this so I don't need to include my username and password here\n\t */\n\tpublic static function getCountry()\n\t{\n\t\t$server   = 'localhost'; // MySQL hostname\n\t\t$username = 'lildude'; // MySQL username\n\t\t$password = 'lm1nUbc!'; // MySQL password\n\t\t$dbname   = 'misc'; // MySQL db name\n\n\t\t$db = mysql_connect( $server, $username, $password ) or die( mysql_error() );\n\t\t\t  mysql_select_db( $dbname ) or die( mysql_error() );\n\n\t\t$sql = 'SELECT country FROM ip2nation WHERE ip < INET_ATON(\"'.$_SERVER['REMOTE_ADDR'].'\") ORDER BY ip DESC LIMIT 0,1';\n\t\tlist( $country ) = mysql_fetch_row( mysql_query( $sql ) );\n\t\treturn $country;\n\t}\n\n\n\n}\n?>\n","markers":{"markers":{"1":{"id":1,"range":[[375,85],[375,85]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":11,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[375,30],[375,83]]},"newParams":{"tailed":false,"range":[[375,83],[375,83]]},"deserializer":"MarkerPatch"},{"oldRange":[[375,30],[375,83]],"newRange":[[375,30],[375,85]],"oldText":"<table class=\"standard\" width=\"100%\" cellspacing=\"0\">","newText":"<div id=\"training_months\" class=\"training_log_element\">","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[433,0],[433,1]],"newRange":[[433,0],[433,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[432,0],[432,1]],"newRange":[[432,0],[432,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[418,36],[418,37]],"newRange":[[418,36],[418,36]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[415,3],[415,4]],"newRange":[[415,3],[415,3]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[412,0],[412,1]],"newRange":[[412,0],[412,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[400,0],[400,1]],"newRange":[[400,0],[400,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[397,0],[397,1]],"newRange":[[397,0],[397,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[396,0],[396,1]],"newRange":[[396,0],[396,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[333,40],[333,41]],"newRange":[[333,40],[333,40]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[332,0],[332,1]],"newRange":[[332,0],[332,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[296,0],[296,1]],"newRange":[[296,0],[296,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[294,0],[294,2]],"newRange":[[294,0],[294,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[290,50],[290,51]],"newRange":[[290,50],[290,50]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[283,38],[283,39]],"newRange":[[283,38],[283,38]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[281,0],[281,1]],"newRange":[[281,0],[281,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[251,0],[251,2]],"newRange":[[251,0],[251,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[248,0],[248,3]],"newRange":[[248,0],[248,0]],"oldText":"   ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[236,180],[236,181]],"newRange":[[236,180],[236,180]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[233,3],[233,4]],"newRange":[[233,3],[233,3]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[230,0],[230,1]],"newRange":[[230,0],[230,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[227,0],[227,2]],"newRange":[[227,0],[227,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[219,0],[219,2]],"newRange":[[219,0],[219,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[209,0],[209,3]],"newRange":[[209,0],[209,0]],"oldText":"\t\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[183,2],[183,7]],"newRange":[[183,2],[183,2]],"oldText":"\t\t\t\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[182,62],[182,63]],"newRange":[[182,62],[182,62]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[174,0],[174,1]],"newRange":[[174,0],[174,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[162,3],[162,4]],"newRange":[[162,3],[162,3]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[146,0],[146,1]],"newRange":[[146,0],[146,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[133,0],[133,1]],"newRange":[[133,0],[133,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[127,3],[127,4]],"newRange":[[127,3],[127,3]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[121,3],[121,4]],"newRange":[[121,3],[121,3]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[118,0],[118,1]],"newRange":[[118,0],[118,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[109,0],[109,1]],"newRange":[[109,0],[109,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[107,0],[107,1]],"newRange":[[107,0],[107,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[96,0],[96,1]],"newRange":[[96,0],[96,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[91,0],[91,2]],"newRange":[[91,0],[91,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[74,0],[74,2]],"newRange":[[74,0],[74,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[62,0],[62,2]],"newRange":[[62,0],[62,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[60,0],[60,2]],"newRange":[[60,0],[60,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[44,0],[44,2]],"newRange":[[44,0],[44,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[42,0],[42,2]],"newRange":[[42,0],[42,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[39,0],[39,1]],"newRange":[[39,0],[39,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,0],[33,1]],"newRange":[[33,0],[33,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[22,0],[22,1]],"newRange":[[22,0],[22,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[16,43],[16,44]],"newRange":[[16,43],[16,43]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[13,110],[13,112]],"newRange":[[13,110],[13,110]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[11,0],[11,1]],"newRange":[[11,0],[11,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[436,2],[436,2]],"newRange":[[436,2],[437,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/Sites/habari/user/plugins/barefoot-utils/barefoot-utils.plugin.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"331c6986cae9ce34af178863194da921e41356f3","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":11,"softTabs":false,"displayBuffer":{"id":12,"softWrap":false,"editorWidthInChars":101,"scrollTop":7162,"scrollLeft":12,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Sites/habari/user/plugins/barefoot-utils/barefoot-utils.plugin.php","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/lildude/Sites/habari/user/plugins/barefoot-utils/barefoot-utils.plugin.php","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"metrics":{"sessionLength":9186450},"fuzzy-finder":{"/Users/lildude/Sites/habari/user/plugins/barefoot-utils/barefoot-utils.plugin.php":1400155250923},"keybinding-resolver":{"attached":false},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/lildude/Sites/habari/user/plugins/barefoot-utils/barefoot-utils.plugin.php","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}