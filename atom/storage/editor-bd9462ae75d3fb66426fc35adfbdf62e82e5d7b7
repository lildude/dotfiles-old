{"mode":"editor","version":1,"windowDimensions":{"x":2,"y":22,"width":1267,"height":829,"maximized":false},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/lildude/github/github/vendor/gems/current/rubycas-server-1.1.2/lib/casserver","buffers":[{"text":"require 'uri'\nrequire 'net/https'\n\nrequire 'casserver/model'\n\n# Encapsulates CAS functionality. This module is meant to be included in\n# the CASServer::Controllers module.\nmodule CASServer::CAS\n\n  include CASServer::Model\n\n  def generate_login_ticket\n    # 3.5 (login ticket)\n    lt = LoginTicket.new\n    lt.ticket = \"LT-\" + CASServer::Utils.random_string\n\n    lt.client_hostname = @env['HTTP_X_FORWARDED_FOR'] || @env['REMOTE_HOST'] || @env['REMOTE_ADDR']\n    lt.save!\n    $LOG.debug(\"Generated login ticket '#{lt.ticket}' for client\" +\n      \" at '#{lt.client_hostname}'\")\n    lt\n  end\n\n  # Creates a TicketGrantingTicket for the given username. This is done when the user logs in\n  # for the first time to establish their SSO session (after their credentials have been validated).\n  #\n  # The optional 'extra_attributes' parameter takes a hash of additional attributes\n  # that will be sent along with the username in the CAS response to subsequent\n  # validation requests from clients.\n  def generate_ticket_granting_ticket(username, extra_attributes = {})\n    # 3.6 (ticket granting cookie/ticket)\n    tgt = TicketGrantingTicket.new\n    tgt.ticket = \"TGC-\" + CASServer::Utils.random_string\n    tgt.username = username\n    tgt.extra_attributes = extra_attributes\n    tgt.client_hostname = @env['HTTP_X_FORWARDED_FOR'] || @env['REMOTE_HOST'] || @env['REMOTE_ADDR']\n    tgt.save!\n    $LOG.debug(\"Generated ticket granting ticket '#{tgt.ticket}' for user\" +\n      \" '#{tgt.username}' at '#{tgt.client_hostname}'\" +\n      (extra_attributes.blank? ? \"\" : \" with extra attributes #{extra_attributes.inspect}\"))\n    tgt\n  end\n\n  def generate_service_ticket(service, username, tgt)\n    # 3.1 (service ticket)\n    st = ServiceTicket.new\n    st.ticket = \"ST-\" + CASServer::Utils.random_string\n    st.service = service\n    st.username = username\n    st.granted_by_tgt_id = tgt.id\n    st.client_hostname = @env['HTTP_X_FORWARDED_FOR'] || @env['REMOTE_HOST'] || @env['REMOTE_ADDR']\n    st.save!\n    $LOG.debug(\"Generated service ticket '#{st.ticket}' for service '#{st.service}'\" +\n      \" for user '#{st.username}' at '#{st.client_hostname}'\")\n    st\n  end\n\n  def generate_proxy_ticket(target_service, pgt)\n    # 3.2 (proxy ticket)\n    pt = ProxyTicket.new\n    pt.ticket = \"PT-\" + CASServer::Utils.random_string\n    pt.service = target_service\n    pt.username = pgt.service_ticket.username\n    pt.granted_by_pgt_id = pgt.id\n    pt.granted_by_tgt_id = pgt.service_ticket.granted_by_tgt.id\n    pt.client_hostname = @env['HTTP_X_FORWARDED_FOR'] || @env['REMOTE_HOST'] || @env['REMOTE_ADDR']\n    pt.save!\n    $LOG.debug(\"Generated proxy ticket '#{pt.ticket}' for target service '#{pt.service}'\" +\n      \" for user '#{pt.username}' at '#{pt.client_hostname}' using proxy-granting\" +\n      \" ticket '#{pgt.ticket}'\")\n    pt\n  end\n\n  def generate_proxy_granting_ticket(pgt_url, st)\n    uri = URI.parse(pgt_url)\n    https = Net::HTTP.new(uri.host,uri.port)\n    https.use_ssl = true\n\n    # Here's what's going on here:\n    #\n    #   1. We generate a ProxyGrantingTicket (but don't store it in the database just yet)\n    #   2. Deposit the PGT and it's associated IOU at the proxy callback URL.\n    #   3. If the proxy callback URL responds with HTTP code 200, store the PGT and return it;\n    #      otherwise don't save it and return nothing.\n    #\n    https.start do |conn|\n      path = uri.path.empty? ? '/' : uri.path\n      path += '?' + uri.query unless (uri.query.nil? || uri.query.empty?)\n\n      pgt = ProxyGrantingTicket.new\n      pgt.ticket = \"PGT-\" + CASServer::Utils.random_string(60)\n      pgt.iou = \"PGTIOU-\" + CASServer::Utils.random_string(57)\n      pgt.service_ticket_id = st.id\n      pgt.client_hostname = @env['HTTP_X_FORWARDED_FOR'] || @env['REMOTE_HOST'] || @env['REMOTE_ADDR']\n\n      # FIXME: The CAS protocol spec says to use 'pgt' as the parameter, but in practice\n      #         the JA-SIG and Yale server implementations use pgtId. We'll go with the\n      #         in-practice standard.\n      path += (uri.query.nil? || uri.query.empty? ? '?' : '&') + \"pgtId=#{pgt.ticket}&pgtIou=#{pgt.iou}\"\n\n      response = conn.request_get(path)\n      # TODO: follow redirects... 2.5.4 says that redirects MAY be followed\n      # NOTE: The following response codes are valid according to the JA-SIG implementation even without following redirects\n\n      if %w(200 202 301 302 304).include?(response.code)\n        # 3.4 (proxy-granting ticket IOU)\n        pgt.save!\n        $LOG.debug \"PGT generated for pgt_url '#{pgt_url}': #{pgt.inspect}\"\n        pgt\n      else\n        $LOG.warn \"PGT callback server responded with a bad result code '#{response.code}'. PGT will not be stored.\"\n        nil\n      end\n    end\n  end\n\n  def validate_login_ticket(ticket)\n    $LOG.debug(\"Validating login ticket '#{ticket}'\")\n\n    success = false\n    if ticket.nil?\n      error = t.error.no_login_ticket\n      $LOG.warn \"Missing login ticket.\"\n    elsif lt = LoginTicket.find_by_ticket(ticket)\n      if lt.consumed?\n        error = t.error.login_ticket_already_used\n        $LOG.warn \"Login ticket '#{ticket}' previously used up\"\n      elsif Time.now - lt.created_on < settings.config[:maximum_unused_login_ticket_lifetime]\n        $LOG.info \"Login ticket '#{ticket}' successfully validated\"\n      else\n        error = t.error.login_timeout\n        $LOG.warn \"Expired login ticket '#{ticket}'\"\n      end\n    else\n      error = t.error.invalid_login_ticket\n      $LOG.warn \"Invalid login ticket '#{ticket}'\"\n    end\n\n    lt.consume! if lt\n\n    error\n  end\n\n  def validate_ticket_granting_ticket(ticket)\n    $LOG.debug(\"Validating ticket granting ticket '#{ticket}'\")\n\n    if ticket.nil?\n      error = \"No ticket granting ticket given.\"\n      $LOG.debug error\n    elsif tgt = TicketGrantingTicket.find_by_ticket(ticket)\n      if settings.config[:maximum_session_lifetime] && Time.now - tgt.created_on > settings.config[:maximum_session_lifetime]\n\ttgt.destroy\n        error = \"Your session has expired. Please log in again.\"\n        $LOG.info \"Ticket granting ticket '#{ticket}' for user '#{tgt.username}' expired.\"\n      else\n        $LOG.info \"Ticket granting ticket '#{ticket}' for user '#{tgt.username}' successfully validated.\"\n      end\n    else\n      error = \"Invalid ticket granting ticket '#{ticket}' (no matching ticket found in the database).\"\n      $LOG.warn(error)\n    end\n\n    [tgt, error]\n  end\n\n  def validate_service_ticket(service, ticket, allow_proxy_tickets = false)\n    $LOG.debug \"Validating service/proxy ticket '#{ticket}' for service '#{service}'\"\n\n    if service.nil? or ticket.nil?\n      error = Error.new(:INVALID_REQUEST, \"Ticket or service parameter was missing in the request.\")\n      $LOG.warn \"#{error.code} - #{error.message}\"\n    elsif st = ServiceTicket.find_by_ticket(ticket)\n      if st.consumed?\n        error = Error.new(:INVALID_TICKET, \"Ticket '#{ticket}' has already been used up.\")\n        $LOG.warn \"#{error.code} - #{error.message}\"\n      elsif st.kind_of?(CASServer::Model::ProxyTicket) && !allow_proxy_tickets\n        error = Error.new(:INVALID_TICKET, \"Ticket '#{ticket}' is a proxy ticket, but only service tickets are allowed here.\")\n        $LOG.warn \"#{error.code} - #{error.message}\"\n      elsif Time.now - st.created_on > settings.config[:maximum_unused_service_ticket_lifetime]\n        error = Error.new(:INVALID_TICKET, \"Ticket '#{ticket}' has expired.\")\n        $LOG.warn \"Ticket '#{ticket}' has expired.\"\n      elsif !st.matches_service? service\n        error = Error.new(:INVALID_SERVICE, \"The ticket '#{ticket}' belonging to user '#{st.username}' is valid,\"+\n          \" but the requested service '#{service}' does not match the service '#{st.service}' associated with this ticket.\")\n        $LOG.warn \"#{error.code} - #{error.message}\"\n      else\n        $LOG.info(\"Ticket '#{ticket}' for service '#{service}' for user '#{st.username}' successfully validated.\")\n      end\n    else\n      error = Error.new(:INVALID_TICKET, \"Ticket '#{ticket}' not recognized.\")\n      $LOG.warn(\"#{error.code} - #{error.message}\")\n    end\n\n    if st\n      st.consume!\n    end\n\n\n    [st, error]\n  end\n\n  def validate_proxy_ticket(service, ticket)\n    pt, error = validate_service_ticket(service, ticket, true)\n\n    if pt.kind_of?(CASServer::Model::ProxyTicket) && !error\n      if not pt.granted_by_pgt\n        error = Error.new(:INTERNAL_ERROR, \"Proxy ticket '#{pt}' belonging to user '#{pt.username}' is not associated with a proxy granting ticket.\")\n      elsif not pt.granted_by_pgt.service_ticket\n        error = Error.new(:INTERNAL_ERROR, \"Proxy granting ticket '#{pt.granted_by_pgt}'\"+\n          \" (associated with proxy ticket '#{pt}' and belonging to user '#{pt.username}' is not associated with a service ticket.\")\n      end\n    end\n\n    [pt, error]\n  end\n\n  def validate_proxy_granting_ticket(ticket)\n    if ticket.nil?\n      error = Error.new(:INVALID_REQUEST, \"pgt parameter was missing in the request.\")\n      $LOG.warn(\"#{error.code} - #{error.message}\")\n    elsif pgt = ProxyGrantingTicket.find_by_ticket(ticket)\n      if pgt.service_ticket\n        $LOG.info(\"Proxy granting ticket '#{ticket}' belonging to user '#{pgt.service_ticket.username}' successfully validated.\")\n      else\n        error = Error.new(:INTERNAL_ERROR, \"Proxy granting ticket '#{ticket}' is not associated with a service ticket.\")\n        $LOG.error(\"#{error.code} - #{error.message}\")\n      end\n    else\n      error = Error.new(:BAD_PGT, \"Invalid proxy granting ticket '#{ticket}' (no matching ticket found in the database).\")\n      $LOG.warn(\"#{error.code} - #{error.message}\")\n    end\n\n    [pgt, error]\n  end\n\n  # Takes an existing ServiceTicket object (presumably pulled from the database)\n  # and sends a POST with logout information to the service that the ticket\n  # was generated for.\n  #\n  # This makes possible the \"single sign-out\" functionality added in CAS 3.1.\n  # See http://www.ja-sig.org/wiki/display/CASUM/Single+Sign+Out\n  def send_logout_notification_for_service_ticket(st)\n    uri = URI.parse(st.service)\n    uri.path = '/' if uri.path.empty?\n    time = Time.now\n    rand = CASServer::Utils.random_string\n    path = uri.path\n    req = Net::HTTP::Post.new(path)\n    req.set_form_data('logoutRequest' => %{<samlp:LogoutRequest ID=\"#{rand}\" Version=\"2.0\" IssueInstant=\"#{time.rfc2822}\">\n <saml:NameID></saml:NameID>\n <samlp:SessionIndex>#{st.ticket}</samlp:SessionIndex>\n </samlp:LogoutRequest>})\n\n    begin\n      http = Net::HTTP.new(uri.host, uri.port)\n      http.use_ssl = true if uri.scheme =='https'\n\n      http.start do |conn|\n        response = conn.request(req)\n        if response.kind_of? Net::HTTPSuccess\n          $LOG.info \"Logout notification successfully posted to #{st.service.inspect}.\"\n          return true\n        else\n          $LOG.error \"Service #{st.service.inspect} responed to logout notification with code '#{response.code}'!\"\n          return false\n        end\n      end\n    rescue Exception => e\n      $LOG.error \"Failed to send logout notification to service #{st.service.inspect} due to #{e}\"\n      return false\n    end\n  end\n\n  def service_uri_with_ticket(service, st)\n    raise ArgumentError, \"Second argument must be a ServiceTicket!\" unless st.kind_of? CASServer::Model::ServiceTicket\n\n    # This will choke with a URI::InvalidURIError if service URI is not properly URI-escaped...\n    # This exception is handled further upstream (i.e. in the controller).\n    service_uri = URI.parse(service)\n\n    if service.include? \"?\"\n      if service_uri.query.empty?\n        query_separator = \"\"\n      else\n        query_separator = \"&\"\n      end\n    else\n      query_separator = \"?\"\n    end\n\n    #service_with_ticket = service + query_separator + \"ticket=\" + st.ticket\n    service_with_ticket = service.sub(\"return_to\", \"ticket=#{st.ticket}&return_to\")\n\n    $LOG.info(\"COLIN: #{service_with_ticket}\")\n    service_with_ticket\n  end\n\n  # Strips CAS-related parameters from a service URL and normalizes it,\n  # removing trailing / and ?. Also converts any spaces to +.\n  #\n  # For example, \"http://google.com?ticket=12345\" will be returned as\n  # \"http://google.com\". Also, \"http://google.com/\" would be returned as\n  # \"http://google.com\".\n  #\n  # Note that only the first occurance of each CAS-related parameter is\n  # removed, so that \"http://google.com?ticket=12345&ticket=abcd\" would be\n  # returned as \"http://google.com?ticket=abcd\".\n  def clean_service_url(dirty_service)\n    return dirty_service if dirty_service.blank?\n    clean_service = dirty_service.dup\n    ['service', 'ticket', 'gateway', 'renew'].each do |p|\n      clean_service.sub!(Regexp.new(\"&?#{p}=[^&]*\"), '')\n    end\n\n    clean_service.gsub!(/[\\/\\?&]$/, '') # remove trailing ?, /, or &\n    clean_service.gsub!('?&', '?')\n    clean_service.gsub!(' ', '+')\n\n    $LOG.debug(\"Cleaned dirty service URL #{dirty_service.inspect} to #{clean_service.inspect}\") if\n      dirty_service != clean_service\n\n    return clean_service\n  end\n  module_function :clean_service_url\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[283,10],[283,10]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":12,"goalBufferRange":null,"autoscroll":true},"deserializer":"Marker"},"714":{"id":714,"range":[[293,14],[293,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"715":{"id":715,"range":[[293,23],[293,43]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"719":{"id":719,"range":[[291,37],[291,82]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"720":{"id":720,"range":[[291,60],[291,70]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[290,4],[290,4]],"newRange":[[290,4],[290,5]],"oldText":"","newText":"#","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[290,76],[290,76]],"newRange":[[290,76],[291,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[291,0],[291,0]],"newRange":[[291,0],[291,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,4],[291,4]],"newRange":[[291,4],[291,75]],"oldText":"","newText":"service_with_ticket = service + query_separator + \"ticket=\" + st.ticket","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,27],[291,54]],"newRange":[[291,27],[291,27]],"oldText":"ervice + query_separator + ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[291,27],[291,27]]},"newParams":{"reversed":true,"range":[[291,26],[291,27]]},"deserializer":"MarkerPatch"},{"oldRange":[[291,26],[291,27]],"newRange":[[291,26],[291,26]],"oldText":"s","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,47],[291,47]],"newRange":[[291,47],[291,48]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,48],[291,48]],"newRange":[[291,48],[291,49]],"oldText":"","newText":"+","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,49],[291,49]],"newRange":[[291,49],[291,50]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,50],[291,50]],"newRange":[[291,50],[291,52]],"oldText":"","newText":"\"\"","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,51],[291,51]],"newRange":[[291,51],[291,52]],"oldText":"","newText":"&","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,53],[291,53]],"newRange":[[291,53],[291,54]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,54],[291,54]],"newRange":[[291,54],[291,55]],"oldText":"","newText":"+","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,55],[291,55]],"newRange":[[291,55],[291,56]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,56],[291,56]],"newRange":[[291,56],[291,57]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,57],[291,57]],"newRange":[[291,57],[291,58]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,58],[291,58]],"newRange":[[291,58],[291,59]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,59],[291,59]],"newRange":[[291,59],[291,60]],"oldText":"","newText":"v","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,60],[291,60]],"newRange":[[291,60],[291,61]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,61],[291,61]],"newRange":[[291,61],[291,62]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,62],[291,62]],"newRange":[[291,62],[291,63]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[256,0],[256,6]],"newRange":[[256,0],[256,0]],"oldText":"      ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[252,0],[252,1]],"newRange":[[252,0],[252,0]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[103,0],[103,6]],"newRange":[[103,0],[103,0]],"oldText":"      ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[88,0],[88,6]],"newRange":[[88,0],[88,0]],"oldText":"      ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,0],[292,0]],"newRange":[[291,0],[291,0]],"oldText":"    service_with_ticket = \"ticket=\" + st.ticket + \"&\" + service\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[290,5],[290,5]]},"newParams":{"reversed":true,"range":[[290,4],[290,5]]},"deserializer":"MarkerPatch"},{"oldRange":[[290,4],[290,5]],"newRange":[[290,4],[290,4]],"oldText":"#","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[290,75],[290,75]],"newRange":[[290,75],[291,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[291,0],[291,0]],"newRange":[[291,0],[291,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,4],[291,4]],"newRange":[[291,4],[291,5]],"oldText":"","newText":"p","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,5],[291,5]],"newRange":[[291,5],[291,6]],"oldText":"","newText":"u","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,6],[291,6]],"newRange":[[291,6],[291,7]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,7],[291,7]],"newRange":[[291,7],[291,8]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[291,8],[291,8]]},"newParams":{"range":[[291,7],[291,8]]},"deserializer":"MarkerPatch"},{"oldRange":[[291,7],[291,8]],"newRange":[[291,7],[291,7]],"oldText":"s","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[291,7],[291,7]]},"newParams":{"range":[[291,6],[291,7]]},"deserializer":"MarkerPatch"},{"oldRange":[[291,6],[291,7]],"newRange":[[291,6],[291,6]],"oldText":"t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[291,6],[291,6]]},"newParams":{"range":[[291,5],[291,6]]},"deserializer":"MarkerPatch"},{"oldRange":[[291,5],[291,6]],"newRange":[[291,5],[291,5]],"oldText":"u","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[291,5],[291,5]]},"newParams":{"range":[[291,4],[291,5]]},"deserializer":"MarkerPatch"},{"oldRange":[[291,4],[291,5]],"newRange":[[291,4],[291,4]],"oldText":"p","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[291,4],[291,4]]},"newParams":{"range":[[291,2],[291,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[291,2],[291,4]],"newRange":[[291,2],[291,2]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,2],[291,2]],"newRange":[[291,2],[291,4]],"oldText":"","newText":"  ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,4],[291,4]],"newRange":[[291,4],[291,14]],"oldText":"","newText":"$LOG.info(","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,14],[291,14]],"newRange":[[291,14],[291,16]],"oldText":"","newText":"\"\"","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,15],[291,15]],"newRange":[[291,15],[291,16]],"oldText":"","newText":"C","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,16],[291,16]],"newRange":[[291,16],[291,17]],"oldText":"","newText":"O","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,17],[291,17]],"newRange":[[291,17],[291,18]],"oldText":"","newText":"L","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,18],[291,18]],"newRange":[[291,18],[291,19]],"oldText":"","newText":"I","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,19],[291,19]],"newRange":[[291,19],[291,20]],"oldText":"","newText":"N","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,20],[291,20]],"newRange":[[291,20],[291,21]],"oldText":"","newText":":","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,21],[291,21]],"newRange":[[291,21],[291,22]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,22],[291,22]],"newRange":[[291,22],[291,23]],"oldText":"","newText":"#","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,23],[291,23]],"newRange":[[291,23],[291,25]],"oldText":"","newText":"{}","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,24],[291,24]],"newRange":[[291,24],[291,25]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,25],[291,25]],"newRange":[[291,25],[291,26]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,26],[291,26]],"newRange":[[291,26],[291,27]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,27],[291,27]],"newRange":[[291,27],[291,28]],"oldText":"","newText":"v","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,28],[291,28]],"newRange":[[291,28],[291,29]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,29],[291,29]],"newRange":[[291,29],[291,30]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,30],[291,30]],"newRange":[[291,30],[291,31]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,31],[291,31]],"newRange":[[291,31],[291,32]],"oldText":"","newText":"_","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,32],[291,32]],"newRange":[[291,32],[291,33]],"oldText":"","newText":"w","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,33],[291,33]],"newRange":[[291,33],[291,34]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,34],[291,34]],"newRange":[[291,34],[291,35]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,35],[291,35]],"newRange":[[291,35],[291,36]],"oldText":"","newText":"h","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,36],[291,36]],"newRange":[[291,36],[291,37]],"oldText":"","newText":"_","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,37],[291,37]],"newRange":[[291,37],[291,38]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,38],[291,38]],"newRange":[[291,38],[291,39]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,39],[291,39]],"newRange":[[291,39],[291,40]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,40],[291,40]],"newRange":[[291,40],[291,41]],"oldText":"","newText":"k","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,41],[291,41]],"newRange":[[291,41],[291,42]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,42],[291,42]],"newRange":[[291,42],[291,43]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,45],[291,45]],"newRange":[[291,45],[291,46]],"oldText":"","newText":")","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[290,4],[290,4]],"newRange":[[290,4],[290,5]],"oldText":"","newText":"#","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[290,5],[290,5]]},"newParams":{"range":[[290,4],[290,5]]},"deserializer":"MarkerPatch"},{"oldRange":[[290,4],[290,5]],"newRange":[[290,4],[290,4]],"oldText":"#","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[290,75],[290,75]],"newRange":[[290,75],[291,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[291,0],[291,0]],"newRange":[[291,0],[291,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[290,4],[290,4]],"newRange":[[290,4],[290,5]],"oldText":"","newText":"#","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[290,76],[290,76]],"newRange":[[290,76],[291,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[291,0],[291,0]],"newRange":[[291,0],[291,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,4],[291,4]],"newRange":[[291,4],[291,5]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,5],[291,5]],"newRange":[[291,5],[291,6]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,6],[291,6]],"newRange":[[291,6],[291,7]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,7],[291,7]],"newRange":[[291,7],[291,8]],"oldText":"","newText":"v","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,8],[291,8]],"newRange":[[291,8],[291,9]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,9],[291,9]],"newRange":[[291,9],[291,10]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,10],[291,10]],"newRange":[[291,10],[291,11]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,11],[291,11]],"newRange":[[291,11],[291,12]],"oldText":"","newText":"_","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,12],[291,12]],"newRange":[[291,12],[291,13]],"oldText":"","newText":"w","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,13],[291,13]],"newRange":[[291,13],[291,14]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,14],[291,14]],"newRange":[[291,14],[291,15]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,15],[291,15]],"newRange":[[291,15],[291,16]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,16],[291,16]],"newRange":[[291,16],[291,17]],"oldText":"","newText":"h","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[291,17],[291,17]]},"newParams":{"range":[[291,16],[291,17]]},"deserializer":"MarkerPatch"},{"oldRange":[[291,16],[291,17]],"newRange":[[291,16],[291,16]],"oldText":"h","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[291,16],[291,16]]},"newParams":{"range":[[291,15],[291,16]]},"deserializer":"MarkerPatch"},{"oldRange":[[291,15],[291,16]],"newRange":[[291,15],[291,15]],"oldText":"t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[291,15],[291,15]]},"newParams":{"range":[[291,14],[291,15]]},"deserializer":"MarkerPatch"},{"oldRange":[[291,14],[291,15]],"newRange":[[291,14],[291,14]],"oldText":"r","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,14],[291,14]],"newRange":[[291,14],[291,15]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,15],[291,15]],"newRange":[[291,15],[291,16]],"oldText":"","newText":"h","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,16],[291,16]],"newRange":[[291,16],[291,17]],"oldText":"","newText":"_","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,17],[291,17]],"newRange":[[291,17],[291,18]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,18],[291,18]],"newRange":[[291,18],[291,19]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,19],[291,19]],"newRange":[[291,19],[291,20]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,20],[291,20]],"newRange":[[291,20],[291,21]],"oldText":"","newText":"k","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,21],[291,21]],"newRange":[[291,21],[291,22]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,22],[291,22]],"newRange":[[291,22],[291,23]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,23],[291,23]],"newRange":[[291,23],[291,24]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,24],[291,24]],"newRange":[[291,24],[291,25]],"oldText":"","newText":"=","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,25],[291,25]],"newRange":[[291,25],[291,26]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,26],[291,26]],"newRange":[[291,26],[291,27]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,27],[291,27]],"newRange":[[291,27],[291,28]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,28],[291,28]],"newRange":[[291,28],[291,29]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,29],[291,29]],"newRange":[[291,29],[291,30]],"oldText":"","newText":"v","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,30],[291,30]],"newRange":[[291,30],[291,31]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,31],[291,31]],"newRange":[[291,31],[291,32]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,32],[291,32]],"newRange":[[291,32],[291,33]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,33],[291,33]],"newRange":[[291,33],[291,34]],"oldText":"","newText":".","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,34],[291,34]],"newRange":[[291,34],[291,35]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,35],[291,35]],"newRange":[[291,35],[291,36]],"oldText":"","newText":"u","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,36],[291,36]],"newRange":[[291,36],[291,37]],"oldText":"","newText":"b","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,37],[291,37]],"newRange":[[291,37],[291,39]],"oldText":"","newText":"()","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,38],[291,38]],"newRange":[[291,38],[291,59]],"oldText":"","newText":"\"return_to\", \"ticket=","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,59],[291,59]],"newRange":[[291,59],[291,60]],"oldText":"","newText":"#","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,60],[291,60]],"newRange":[[291,60],[291,62]],"oldText":"","newText":"{}","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,61],[291,61]],"newRange":[[291,61],[291,62]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,62],[291,62]],"newRange":[[291,62],[291,63]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,63],[291,63]],"newRange":[[291,63],[291,64]],"oldText":"","newText":".","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,64],[291,64]],"newRange":[[291,64],[291,65]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,65],[291,65]],"newRange":[[291,65],[291,66]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,66],[291,66]],"newRange":[[291,66],[291,67]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,67],[291,67]],"newRange":[[291,67],[291,68]],"oldText":"","newText":"k","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,68],[291,68]],"newRange":[[291,68],[291,69]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,69],[291,69]],"newRange":[[291,69],[291,70]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,71],[291,71]],"newRange":[[291,71],[291,72]],"oldText":"","newText":"&","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,72],[291,72]],"newRange":[[291,72],[291,73]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,73],[291,73]],"newRange":[[291,73],[291,74]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,74],[291,74]],"newRange":[[291,74],[291,75]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,75],[291,75]],"newRange":[[291,75],[291,76]],"oldText":"","newText":"u","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,76],[291,76]],"newRange":[[291,76],[291,77]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,77],[291,77]],"newRange":[[291,77],[291,78]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,78],[291,78]],"newRange":[[291,78],[291,79]],"oldText":"","newText":"_","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,79],[291,79]],"newRange":[[291,79],[291,80]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,80],[291,80]],"newRange":[[291,80],[291,81]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[291,81],[291,81]],"newRange":[[291,81],[291,82]],"oldText":"","newText":"\"","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[292,0],[292,4]],"newRange":[[292,0],[292,0]],"oldText":"    ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/github/github/vendor/gems/2.1.1/ruby/2.1.0/gems/rubycas-server-1.1.2/lib/casserver/cas.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"81552980ea217bae981381208c1b479e0f69e2b6","deserializer":"TextBuffer"},{"text":"require 'sinatra/base'\nrequire 'casserver/localization'\nrequire 'casserver/utils'\nrequire 'casserver/cas'\n\nrequire 'logger'\n$LOG ||= Logger.new(STDOUT)\n\nmodule CASServer\n  class Server < Sinatra::Base\n    if ENV['CONFIG_FILE']\n      CONFIG_FILE = ENV['CONFIG_FILE']\n    elsif !(c_file = File.dirname(__FILE__) + \"/../../config.yml\").nil? && File.exist?(c_file)\n      CONFIG_FILE = c_file\n    else\n      CONFIG_FILE = \"/etc/rubycas-server/config.yml\"\n    end\n    \n    include CASServer::CAS # CAS protocol helpers\n    include Localization\n\n    # Use :public_folder for Sinatra >= 1.3, and :public for older versions.\n    def self.use_public_folder?\n      Sinatra.const_defined?(\"VERSION\") && Gem::Version.new(Sinatra::VERSION) >= Gem::Version.new(\"1.3.0\")\n    end\n\n    set :app_file, __FILE__\n    set( use_public_folder? ? :public_folder : :public, # Workaround for differences in Sinatra versions.\n         Proc.new { settings.config[:public_dir] || File.join(root, \"..\", \"..\", \"public\") } )\n\n    config = HashWithIndifferentAccess.new(\n      :maximum_unused_login_ticket_lifetime => 5.minutes,\n      :maximum_unused_service_ticket_lifetime => 5.minutes, # CAS Protocol Spec, sec. 3.2.1 (recommended expiry time)\n      :maximum_session_lifetime => 2.days, # all tickets are deleted after this period of time\n      :log => {:file => 'casserver.log', :level => 'DEBUG'},\n      :uri_path => \"\"\n    )\n    set :config, config\n\n    def self.uri_path\n      config[:uri_path]\n    end\n\n    # Strip the config.uri_path from the request.path_info...\n    # FIXME: do we really need to override all of Sinatra's #static! to make this happen?\n    def static!\n      # Workaround for differences in Sinatra versions.\n      public_dir = Server.use_public_folder? ? settings.public_folder : settings.public\n      return if public_dir.nil?\n      public_dir = File.expand_path(public_dir)\n      \n      path = File.expand_path(public_dir + unescape(request.path_info.gsub(/^#{settings.config[:uri_path]}/,'')))\n      return if path[0, public_dir.length] != public_dir\n      return unless File.file?(path)\n\n      env['sinatra.static_file'] = path\n      send_file path, :disposition => nil\n    end\n\n    def self.run!(options={})\n      set options\n\n      handler      = detect_rack_handler\n      handler_name = handler.name.gsub(/.*::/, '')\n      \n      puts \"== RubyCAS-Server is starting up \" +\n        \"on port #{config[:port] || port} for #{environment} with backup from #{handler_name}\" unless handler_name =~/cgi/i\n        \n      begin\n        opts = handler_options\n      rescue Exception => e\n        print_cli_message e, :error\n        raise e\n      end\n        \n      handler.run self, opts do |server|\n        [:INT, :TERM].each { |sig| trap(sig) { quit!(server, handler_name) } }\n        set :running, true\n      end\n    rescue Errno::EADDRINUSE => e\n      puts \"== Something is already running on port #{port}!\"\n    end\n\n    def self.quit!(server, handler_name)\n      ## Use thins' hard #stop! if available, otherwise just #stop\n      server.respond_to?(:stop!) ? server.stop! : server.stop\n      puts \"\\n== RubyCAS-Server is shutting down\" unless handler_name =~/cgi/i\n    end\n    \n    def self.print_cli_message(msg, type = :info)\n      if respond_to?(:config) && config && config[:quiet]\n        return\n      end\n      \n      if type == :error\n        io = $stderr\n        prefix = \"!!! \"\n      else\n        io = $stdout\n        prefix = \">>> \"\n      end\n      \n      io.puts\n      io.puts \"#{prefix}#{msg}\"\n      io.puts\n    end\n\n    def self.load_config_file(config_file)\n      begin\n        config_file = File.open(config_file)\n      rescue Errno::ENOENT => e\n        \n        print_cli_message \"Config file #{config_file} does not exist!\", :error\n        print_cli_message \"Would you like the default config file copied to #{config_file.inspect}? [y/N]\"\n        if gets.strip.downcase == 'y'\n          require 'fileutils'\n          default_config = File.dirname(__FILE__) + '/../../config/config.example.yml'\n          \n          if !File.exists?(File.dirname(config_file))\n            print_cli_message \"Creating config directory...\"\n            FileUtils.mkdir_p(File.dirname(config_file), :verbose => true)\n          end\n          \n          print_cli_message \"Copying #{default_config.inspect} to #{config_file.inspect}...\"\n          FileUtils.cp(default_config, config_file, :verbose => true)\n          print_cli_message \"The default config has been copied. You should now edit it and try starting again.\"\n          exit\n        else\n          print_cli_message \"Cannot start RubyCAS-Server without a valid config file.\", :error\n          raise e\n        end\n      rescue Errno::EACCES => e\n        print_cli_message \"Config file #{config_file.inspect} is not readable (permission denied)!\", :error\n        raise e\n      rescue => e\n        print_cli_message \"Config file #{config_file.inspect} could not be read!\", :error\n        raise e\n      end\n      \n      config.merge! HashWithIndifferentAccess.new(YAML.load(config_file))\n      set :server, config[:server] || 'webrick'\n    end\n    \n    def self.reconfigure!(config)\n      config.each do |key, val|\n        self.config[key] = val\n      end\n      init_database!\n      init_logger!\n      init_authenticators!\n    end\n\n    def self.handler_options\n      handler_options = {\n        :Host => bind || config[:bind_address],\n        :Port => config[:port] || 443\n      }\n\n      handler_options.merge(handler_ssl_options).to_hash.symbolize_keys!\n    end\n\n    def self.handler_ssl_options\n      return {} unless config[:ssl_cert]\n\n      cert_path = config[:ssl_cert]\n      key_path = config[:ssl_key] || config[:ssl_cert]\n      \n      unless cert_path.nil? && key_path.nil?\n        raise \"The ssl_cert and ssl_key options cannot be used with mongrel. You will have to run your \" +\n          \" server behind a reverse proxy if you want SSL under mongrel.\" if\n            config[:server] == 'mongrel'\n\n        raise \"The specified certificate file #{cert_path.inspect} does not exist or is not readable. \" +\n          \" Your 'ssl_cert' configuration setting must be a path to a valid \" +\n          \" ssl certificate.\" unless\n            File.exists? cert_path\n\n        raise \"The specified key file #{key_path.inspect} does not exist or is not readable. \" +\n          \" Your 'ssl_key' configuration setting must be a path to a valid \" +\n          \" ssl private key.\" unless\n            File.exists? key_path\n\n        require 'openssl'\n        require 'webrick/https'\n\n        cert = OpenSSL::X509::Certificate.new(File.read(cert_path))\n        key = OpenSSL::PKey::RSA.new(File.read(key_path))\n\n        {\n          :SSLEnable        => true,\n          :SSLVerifyClient  => ::OpenSSL::SSL::VERIFY_NONE,\n          :SSLCertificate   => cert,\n          :SSLPrivateKey    => key\n        }\n      end\n    end\n\n    def self.init_authenticators!\n      auth = []\n      \n      if config[:authenticator].nil?\n        print_cli_message \"No authenticators have been configured. Please double-check your config file (#{CONFIG_FILE.inspect}).\", :error\n        exit 1\n      end\n      \n      begin\n        # attempt to instantiate the authenticator\n        config[:authenticator] = [config[:authenticator]] unless config[:authenticator].instance_of? Array\n        config[:authenticator].each { |authenticator| auth << authenticator[:class].constantize}\n      rescue NameError\n        if config[:authenticator].instance_of? Array\n          config[:authenticator].each do |authenticator|\n            if !authenticator[:source].nil?\n              # config.yml explicitly names source file\n              require authenticator[:source]\n            else\n              # the authenticator class hasn't yet been loaded, so lets try to load it from the casserver/authenticators directory\n              auth_rb = authenticator[:class].underscore.gsub('cas_server/', '')\n              require 'casserver/'+auth_rb\n            end\n            auth << authenticator[:class].constantize\n          end\n        else\n          if config[:authenticator][:source]\n            # config.yml explicitly names source file\n            require config[:authenticator][:source]\n          else\n            # the authenticator class hasn't yet been loaded, so lets try to load it from the casserver/authenticators directory\n            auth_rb = config[:authenticator][:class].underscore.gsub('cas_server/', '')\n            require 'casserver/'+auth_rb\n          end\n\n          auth << config[:authenticator][:class].constantize\n          config[:authenticator] = [config[:authenticator]]\n        end\n      end\n\n      auth.zip(config[:authenticator]).each_with_index{ |auth_conf, index|\n        authenticator, conf = auth_conf\n        $LOG.debug \"About to setup #{authenticator} with #{conf.inspect}...\"\n        authenticator.setup(conf.merge('auth_index' => index)) if authenticator.respond_to?(:setup)\n        $LOG.debug \"Done setting up #{authenticator}.\"\n      }\n\n      set :auth, auth\n    end\n\n    def self.init_logger!\n      if config[:log]\n        if $LOG && config[:log][:file]\n          print_cli_message \"Redirecting RubyCAS-Server log to #{config[:log][:file]}\"\n          #$LOG.close\n          $LOG = Logger.new(config[:log][:file])\n        end\n        $LOG.level = Logger.const_get(config[:log][:level]) if config[:log][:level]\n      end\n      \n      if config[:db_log]\n        if $LOG && config[:db_log][:file]\n          $LOG.debug \"Redirecting ActiveRecord log to #{config[:log][:file]}\"\n          #$LOG.close\n          ActiveRecord::Base.logger = Logger.new(config[:db_log][:file])\n        end\n        ActiveRecord::Base.logger.level = Logger.const_get(config[:db_log][:level]) if config[:db_log][:level]\n      end\n    end\n\n    def self.init_database!\n\n      unless config[:disable_auto_migrations]\n        ActiveRecord::Base.establish_connection(config[:database])\n        print_cli_message \"Running migrations to make sure your database schema is up to date...\"\n        prev_db_log = ActiveRecord::Base.logger\n        ActiveRecord::Base.logger = Logger.new(STDOUT)\n        ActiveRecord::Migration.verbose = true\n        ActiveRecord::Migrator.migrate(File.dirname(__FILE__) + \"/../../db/migrate\")\n        ActiveRecord::Base.logger = prev_db_log\n        print_cli_message \"Your database is now up to date.\"\n      end\n      \n      ActiveRecord::Base.establish_connection(config[:database])\n    end\n\n    configure do\n      load_config_file(CONFIG_FILE)\n      init_logger!\n      init_database!\n      init_authenticators!\n    end\n\n    before do\n      content_type :html, 'charset' => 'utf-8'\n      @theme = settings.config[:theme]\n      @organization = settings.config[:organization]\n      @uri_path = settings.config[:uri_path]\n      @infoline = settings.config[:infoline]\n      @custom_views = settings.config[:custom_views]\n      @template_engine = settings.config[:template_engine] || :erb\n      if @template_engine != :erb\n        require @template_engine\n        @template_engine = @template_engine.to_sym\n      end\n    end\n\n    # The #.#.# comments (e.g. \"2.1.3\") refer to section numbers in the CAS protocol spec\n    # under http://www.ja-sig.org/products/cas/overview/protocol/index.html\n    \n    # 2.1 :: Login\n\n    # 2.1.1\n    get \"#{uri_path}/login\" do\n      CASServer::Utils::log_controller_action(self.class, params)\n\n      # make sure there's no caching\n      headers['Pragma'] = 'no-cache'\n      headers['Cache-Control'] = 'no-store'\n      headers['Expires'] = (Time.now - 1.year).rfc2822\n\n      # optional params\n      @service = clean_service_url(params['service'])\n      @renew = params['renew']\n      @gateway = params['gateway'] == 'true' || params['gateway'] == '1'\n\n      if tgc = request.cookies['tgt']\n        tgt, tgt_error = validate_ticket_granting_ticket(tgc)\n      end\n\n      if tgt and !tgt_error\n        @message = {:type => 'notice',\n          :message => t.notice.logged_in_as(tgt.username)}\n      elsif tgt_error\n        $LOG.debug(\"Ticket granting cookie could not be validated: #{tgt_error}\")\n      elsif !tgt\n        $LOG.debug(\"No ticket granting ticket detected.\")\n      end\n\n      if params['redirection_loop_intercepted']\n        @message = {:type => 'mistake',\n          :message => t.error.unable_to_authenticate}\n      end\n\n      begin\n        if @service\n          if @renew\n            $LOG.info(\"Authentication renew explicitly requested. Proceeding with CAS login for service #{@service.inspect}.\")\n          elsif tgt && !tgt_error\n            $LOG.debug(\"Valid ticket granting ticket detected.\")\n            st = generate_service_ticket(@service, tgt.username, tgt)\n            service_with_ticket = service_uri_with_ticket(@service, st)\n            $LOG.info(\"User '#{tgt.username}' authenticated based on ticket granting cookie. Redirecting to service '#{@service}'.\")\n            redirect service_with_ticket, 303 # response code 303 means \"See Other\" (see Appendix B in CAS Protocol spec)\n          elsif @gateway\n            $LOG.info(\"Redirecting unauthenticated gateway request to service '#{@service}'.\")\n            redirect @service, 303\n          else\n            $LOG.info(\"Proceeding with CAS login for service #{@service.inspect}.\")\n          end\n        elsif @gateway\n            $LOG.error(\"This is a gateway request but no service parameter was given!\")\n            @message = {:type => 'mistake',\n              :message => t.error.no_service_parameter_given}\n        else\n          $LOG.info(\"Proceeding with CAS login without a target service.\")\n        end\n      rescue URI::InvalidURIError\n        $LOG.error(\"The service '#{@service}' is not a valid URI!\")\n        @message = {:type => 'mistake',\n          :message => t.error.invalid_target_service}\n      end\n\n      lt = generate_login_ticket\n\n      $LOG.debug(\"Rendering login form with lt: #{lt}, service: #{@service}, renew: #{@renew}, gateway: #{@gateway}\")\n\n      @lt = lt.ticket\n\n      #$LOG.debug(env)\n\n      # If the 'onlyLoginForm' parameter is specified, we will only return the\n      # login form part of the page. This is useful for when you want to\n      # embed the login form in some external page (as an IFRAME, or otherwise).\n      # The optional 'submitToURI' parameter can be given to explicitly set the\n      # action for the form, otherwise the server will try to guess this for you.\n      if params.has_key? 'onlyLoginForm'\n        if @env['HTTP_HOST']\n          guessed_login_uri = \"http#{@env['HTTPS'] && @env['HTTPS'] == 'on' ? 's' : ''}://#{@env['REQUEST_URI']}#{self / '/login'}\"\n        else\n          guessed_login_uri = nil\n        end\n\n        @form_action = params['submitToURI'] || guessed_login_uri\n\n        if @form_action\n          render :login_form\n        else\n          status 500\n          render t.error.invalid_submit_to_uri\n        end\n      else\n        render @template_engine, :login\n      end\n    end\n\n    \n    # 2.2\n    post \"#{uri_path}/login\" do\n      Utils::log_controller_action(self.class, params)\n      \n      # 2.2.1 (optional)\n      @service = clean_service_url(params['service'])\n\n      # 2.2.2 (required)\n      @username = params['username']\n      @password = params['password']\n      @lt = params['lt']\n\n      # Remove leading and trailing widespace from username.\n      @username.strip! if @username\n      \n      if @username && settings.config[:downcase_username]\n        $LOG.debug(\"Converting username #{@username.inspect} to lowercase because 'downcase_username' option is enabled.\")\n        @username.downcase!\n      end\n\n      if error = validate_login_ticket(@lt)\n        @message = {:type => 'mistake', :message => error}\n        # generate another login ticket to allow for re-submitting the form\n        @lt = generate_login_ticket.ticket\n        status 500\n        return render @template_engine, :login\n      end\n\n      # generate another login ticket to allow for re-submitting the form after a post\n      @lt = generate_login_ticket.ticket\n\n      $LOG.debug(\"Logging in with username: #{@username}, lt: #{@lt}, service: #{@service}, auth: #{settings.auth.inspect}\")\n      \n      credentials_are_valid = false\n      extra_attributes = {}\n      successful_authenticator = nil\n      begin\n        auth_index = 0\n        settings.auth.each do |auth_class|\n          auth = auth_class.new\n\n          auth_config = settings.config[:authenticator][auth_index]\n          # pass the authenticator index to the configuration hash in case the authenticator needs to know\n          # it splace in the authenticator queue\n          auth.configure(auth_config.merge('auth_index' => auth_index))\n\n          credentials_are_valid = auth.validate(\n            :username => @username,\n            :password => @password,\n            :service => @service,\n            :request => @env\n          )\n          if credentials_are_valid\n            extra_attributes.merge!(auth.extra_attributes) unless auth.extra_attributes.blank?\n            successful_authenticator = auth\n            break\n          end\n\n          auth_index += 1\n        end\n        \n        if credentials_are_valid\n          $LOG.info(\"Credentials for username '#{@username}' successfully validated using #{successful_authenticator.class.name}.\")\n          $LOG.debug(\"Authenticator provided additional user attributes: #{extra_attributes.inspect}\") unless extra_attributes.blank?\n\n          # 3.6 (ticket-granting cookie)\n          tgt = generate_ticket_granting_ticket(@username, extra_attributes)\n          response.set_cookie('tgt', tgt.to_s)\n\n          $LOG.debug(\"Ticket granting cookie '#{tgt.inspect}' granted to #{@username.inspect}\")\n\n          if @service.blank?\n            $LOG.info(\"Successfully authenticated user '#{@username}' at '#{tgt.client_hostname}'. No service param was given, so we will not redirect.\")\n            @message = {:type => 'confirmation', :message => t.notice.success_logged_in}\n          else\n            @st = generate_service_ticket(@service, @username, tgt)\n\n            begin\n              service_with_ticket = service_uri_with_ticket(@service, @st)\n\n              $LOG.info(\"Redirecting authenticated user '#{@username}' at '#{@st.client_hostname}' to service '#{@service}'\")\n              redirect service_with_ticket, 303 # response code 303 means \"See Other\" (see Appendix B in CAS Protocol spec)\n            rescue URI::InvalidURIError\n              $LOG.error(\"The service '#{@service}' is not a valid URI!\")\n              @message = {\n                :type => 'mistake',\n                :message => t.error.invalid_target_service\n              }\n            end\n          end\n        else\n          $LOG.warn(\"Invalid credentials given for user '#{@username}'\")\n          @message = {:type => 'mistake', :message => t.error.incorrect_username_or_password}\n          status 401\n        end\n      rescue CASServer::AuthenticatorError => e\n        $LOG.error(e)\n        # generate another login ticket to allow for re-submitting the form\n        @lt = generate_login_ticket.ticket\n        @message = {:type => 'mistake', :message => e.to_s}\n        status 401\n      end\n\n      render @template_engine, :login\n    end\n\n    get /^#{uri_path}\\/?$/ do\n      redirect \"#{config['uri_path']}/login\", 303\n    end\n\n\n    # 2.3\n\n    # 2.3.1\n    get \"#{uri_path}/logout\" do\n      CASServer::Utils::log_controller_action(self.class, params)\n\n      # The behaviour here is somewhat non-standard. Rather than showing just a blank\n      # \"logout\" page, we take the user back to the login page with a \"you have been logged out\"\n      # message, allowing for an opportunity to immediately log back in. This makes it\n      # easier for the user to log out and log in as someone else.\n      @service = clean_service_url(params['service'] || params['destination'])\n      @continue_url = params['url']\n\n      @gateway = params['gateway'] == 'true' || params['gateway'] == '1'\n\n      tgt = CASServer::Model::TicketGrantingTicket.find_by_ticket(request.cookies['tgt'])\n\n      response.delete_cookie 'tgt'\n\n      if tgt\n        CASServer::Model::TicketGrantingTicket.transaction do\n          $LOG.debug(\"Deleting Service/Proxy Tickets for '#{tgt}' for user '#{tgt.username}'\")\n          tgt.granted_service_tickets.each do |st|\n            send_logout_notification_for_service_ticket(st) if config[:enable_single_sign_out]\n            # TODO: Maybe we should do some special handling if send_logout_notification_for_service_ticket fails?\n            #       (the above method returns false if the POST results in a non-200 HTTP response).\n            $LOG.debug \"Deleting #{st.class.name.demodulize} #{st.ticket.inspect} for service #{st.service}.\"\n            st.destroy\n          end\n\n          pgts = CASServer::Model::ProxyGrantingTicket.find(:all,\n            :conditions => [CASServer::Model::Base.connection.quote_table_name(CASServer::Model::ServiceTicket.table_name)+\".username = ?\", tgt.username],\n            :include => :service_ticket)\n          pgts.each do |pgt|\n            $LOG.debug(\"Deleting Proxy-Granting Ticket '#{pgt}' for user '#{pgt.service_ticket.username}'\")\n            pgt.destroy\n          end\n\n          $LOG.debug(\"Deleting #{tgt.class.name.demodulize} '#{tgt}' for user '#{tgt.username}'\")\n          tgt.destroy\n        end\n\n        $LOG.info(\"User '#{tgt.username}' logged out.\")\n      else\n        $LOG.warn(\"User tried to log out without a valid ticket-granting ticket.\")\n      end\n\n      @message = {:type => 'confirmation', :message => t.notice.success_logged_out}\n\n      @message[:message] += t.notice.click_to_continue if @continue_url\n\n      @lt = generate_login_ticket\n\n      if @gateway && @service\n        redirect @service, 303\n      elsif @continue_url\n        render @template_engine, :logout\n      else\n        render @template_engine, :login\n      end\n    end\n  \n  \n    # Handler for obtaining login tickets.\n    # This is useful when you want to build a custom login form located on a \n    # remote server. Your form will have to include a valid login ticket\n    # value, and this can be fetched from the CAS server using the POST handler.\n\n    get \"#{uri_path}/loginTicket\" do\n      CASServer::Utils::log_controller_action(self.class, params)\n\n      $LOG.error(\"Tried to use login ticket dispenser with get method!\")\n\n      status 422\n\n      t.error.login_ticket_needs_post_request\n    end\n\n\n    # Renders a page with a login ticket (and only the login ticket)\n    # in the response body.\n    post \"#{uri_path}/loginTicket\" do\n      CASServer::Utils::log_controller_action(self.class, params)\n\n      lt = generate_login_ticket\n\n      $LOG.debug(\"Dispensing login ticket #{lt} to host #{(@env['HTTP_X_FORWARDED_FOR'] || @env['REMOTE_HOST'] || @env['REMOTE_ADDR']).inspect}\")\n\n      @lt = lt.ticket\n\n      @lt\n    end\n\n\n\t\t# 2.4\n\n\t\t# 2.4.1\n\t\tget \"#{uri_path}/validate\" do\n\t\t\tCASServer::Utils::log_controller_action(self.class, params)\n\t\t\t\n\t\t\t# required\n\t\t\t@service = clean_service_url(params['service'])\n\t\t\t@ticket = params['ticket']\n\t\t\t# optional\n\t\t\t@renew = params['renew']\n\t\t\t\n\t\t\tst, @error = validate_service_ticket(@service, @ticket)      \n\t\t\t@success = st && !@error\n\t\t\t\n\t\t\t@username = st.username if @success\n\t\t\t\n      status response_status_from_error(@error) if @error\n\t\t\t\n\t\t\trender @template_engine, :validate, :layout => false\n\t\tend\n\n\n    # 2.5\n\n    # 2.5.1\n    get \"#{uri_path}/serviceValidate\" do\n\t\t\tCASServer::Utils::log_controller_action(self.class, params)\n\n\t\t\t# required\n\t\t\t@service = clean_service_url(params['service'])\n\t\t\t@ticket = params['ticket']\n\t\t\t# optional\n\t\t\t@pgt_url = params['pgtUrl']\n\t\t\t@renew = params['renew']\n\n\t\t\tst, @error = validate_service_ticket(@service, @ticket)\n\t\t\t@success = st && !@error\n\n\t\t\tif @success\n        @username = st.username\n        if @pgt_url\n          pgt = generate_proxy_granting_ticket(@pgt_url, st)\n          @pgtiou = pgt.iou if pgt\n        end\n        @extra_attributes = st.granted_by_tgt.extra_attributes || {}\n      end\n\n      status response_status_from_error(@error) if @error\n\n\t\t\trender :builder, :proxy_validate\n\t\tend\n  \n    \n    # 2.6\n\n    # 2.6.1\n    get \"#{uri_path}/proxyValidate\" do\n      CASServer::Utils::log_controller_action(self.class, params)\n\n      # required\n      @service = clean_service_url(params['service'])\n      @ticket = params['ticket']\n      # optional\n      @pgt_url = params['pgtUrl']\n      @renew = params['renew']\n\n      @proxies = []\n\n      t, @error = validate_proxy_ticket(@service, @ticket)\n      @success = t && !@error\n\n      @extra_attributes = {}\n      if @success\n        @username = t.username\n\n        if t.kind_of? CASServer::Model::ProxyTicket\n          @proxies << t.granted_by_pgt.service_ticket.service\n        end\n\n        if @pgt_url\n          pgt = generate_proxy_granting_ticket(@pgt_url, t)\n          @pgtiou = pgt.iou if pgt\n        end\n\n        @extra_attributes = t.granted_by_tgt.extra_attributes || {}\n      end\n\n      status response_status_from_error(@error) if @error\n\n     render :builder, :proxy_validate\n    end\n\n\n    # 2.7\n    get \"#{uri_path}/proxy\" do\n      CASServer::Utils::log_controller_action(self.class, params)\n\n      # required\n      @ticket = params['pgt']\n      @target_service = params['targetService']\n\n      pgt, @error = validate_proxy_granting_ticket(@ticket)\n      @success = pgt && !@error\n\n      if @success\n        @pt = generate_proxy_ticket(@target_service, pgt)\n      end\n\n      status response_status_from_error(@error) if @error\n\n      render :builder, :proxy\n    end\n\n\n\n    # Helpers\n\n    def response_status_from_error(error)\n      case error.code.to_s\n      when /^INVALID_/, 'BAD_PGT'\n        422\n      when 'INTERNAL_ERROR'\n        500\n      else\n        500\n      end\n    end\n\n    def serialize_extra_attribute(builder, key, value)\n      if value.kind_of?(String)\n        builder.tag! key, value\n      elsif value.kind_of?(Numeric)\n        builder.tag! key, value.to_s\n      else\n        builder.tag! key do\n          builder.cdata! value.to_yaml\n        end\n      end\n    end\n\n    def compile_template(engine, data, options, views)\n      super engine, data, options, @custom_views || views\n    rescue Errno::ENOENT\n      raise unless @custom_views\n      super engine, data, options, views\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[484,14],[484,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":24,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/github/github/vendor/gems/2.1.1/ruby/2.1.0/gems/rubycas-server-1.1.2/lib/casserver/server.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"8216705f5c70b8dccc02ccf54fd5187aaa6b0975","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":12,"softTabs":true,"displayBuffer":{"id":13,"softWrap":false,"editorWidthInChars":null,"scrollTop":5388,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/github/github/vendor/gems/2.1.1/ruby/2.1.0/gems/rubycas-server-1.1.2/lib/casserver/cas.rb","tabLength":2,"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":24,"softTabs":true,"displayBuffer":{"id":25,"softWrap":false,"editorWidthInChars":null,"scrollTop":9291,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/github/github/vendor/gems/2.1.1/ruby/2.1.0/gems/rubycas-server-1.1.2/lib/casserver/server.rb","tabLength":2,"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/lildude/github/github/vendor/gems/2.1.1/ruby/2.1.0/gems/rubycas-server-1.1.2/lib/casserver/cas.rb","focused":true,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-ruby-on-rails","language-ruby"],"deserializer":"Workspace"},"packageStates":{"metrics":{"sessionLength":11805157},"find-and-replace":{"viewState":{"findHistory":["service_with_ticket","target_","service"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}},"fuzzy-finder":{"/Users/lildude/github/github/vendor/gems/2.1.1/ruby/2.1.0/gems/rubycas-server-1.1.2/lib/casserver/cas.rb":1409338113948,"/Users/lildude/github/github/vendor/gems/2.1.1/ruby/2.1.0/gems/rubycas-server-1.1.2/lib/casserver/server.rb":1409332742790},"keybinding-resolver":{"attached":false},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/lildude/github/github/vendor/gems/2.1.1/ruby/2.1.0/gems/rubycas-server-1.1.2/lib/casserver/cas.rb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}