{"mode":"editor","version":1,"windowDimensions":{"x":287,"y":22,"width":1024,"height":829},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/lildude/github/enterprise-manage","buffers":[{"text":"module Manage\n  class Api < Sinatra::Base\n    register Manage::Config\n\n    include Helpers::API\n    include Helpers::Truthy\n    include Helpers::Tempfiles\n\n    error 403 do\n      {error: 'Access forbidden, please upload or upgrade your license'}.to_json\n    end\n\n    before do\n      content_type 'application/json'\n      api_auth_check\n    end\n\n    get '/?' do\n      headers[\"Link\"] = links(clean_url(request))\n      204\n    end\n\n    post '/start' do\n      unless params[:license]\n        error 400, {:error => 'license-error',\n                :message => \"license not found. Please provide a license file\"}.to_json\n      end\n\n      saved_license = save_license(params[:license])\n      unless saved_license[0]\n        error(400, saved_license[1].to_json)\n      end\n\n      init_settings(request)\n\n      job_id = extract_package\n\n      headers['License-MD5'] = saved_license[1].md5\n      headers['Location'] = clean_url(request).sub('start', \"job/#{job_id}\")\n      status 202\n    end\n\n    post '/upgrade' do\n      if Manage::Chef.running?\n        error('400', {:error => 'config-in-progress', :message => 'Configuration is in progress'})\n      end\n\n      if params[:license]\n        saved_license = save_license(params[:license])\n\n        if saved_license[0]\n          headers['License-MD5'] = saved_license[1].md5\n        else\n          error(400, saved_license[1].to_json)\n        end\n      end\n\n      if params[:package]\n        job_id = extract_package(:configure)\n\n        headers['Location'] = clean_url(request).sub('upgrade', \"job/#{job_id}\")\n      else\n        headers['Location'] = clean_url(request).gsub('upgrade', 'configcheck')\n        Manage.configure!\n      end\n\n      status 202\n    end\n\n    get '/configcheck' do\n      Manage::Chef.progress_status\n    end\n\n    get '/settings' do\n      Manage.enterprise_settings.to_pretty_json\n    end\n\n    put '/settings' do\n      settings = Manage.enterprise_settings\n      if json = params[:settings]\n        begin\n          json = JSON.parse(json, :symbolize_names => true) unless json.is_a?(Hash)\n        rescue JSON::ParserError => e\n          status 400\n          return e.message.to_json\n        end\n        json = json[:enterprise] if json[:enterprise]\n\n        settings.update(json)\n\n        if settings.valid?\n          settings.save\n          headers['Location'] = clean_url(request)\n          status 204\n        else\n          status 400\n          return settings.errors.messages.to_json\n        end\n      else\n        status 400\n      end\n    end\n\n    post '/configure' do\n      if params[:complete]\n        Manage.install!(Manage.enterprise_settings)\n      else\n        Manage.configure!(Manage.enterprise_settings)\n      end\n      headers['Location'] = clean_url(request).gsub('configure', 'configcheck')\n      status 202\n    end\n\n    get '/ohai' do\n      Manage.load_node.to_json\n    end\n\n    get '/hostcheck' do\n      {\n        'license'  => (!license.nil? ? 'OK' : 'MISSED'),\n        'package'  => (!package_missing? ? 'OK' : 'MISSED')\n      }.to_json\n    end\n\n    get '/maintenance' do\n      maintenance = Manage::MaintenanceMode.new\n\n      maintenance.to_json\n    end\n\n    post '/maintenance' do\n      if json = params[:maintenance]\n        json = JSON.parse(json, :symbolize_names => true) unless json.is_a?(Hash)\n        maintenance = Manage::MaintenanceMode.new\n\n        if truthy?(json[:enabled])\n          maintenance.schedule(json[:when])\n        else\n          maintenance.restore_service\n        end\n\n        maintenance.to_json\n      else\n        status 400\n      end\n    end\n\n    get '/settings/authorized-keys' do\n      Manage::SshSettings.authorized_keys.to_json\n    end\n\n    post '/settings/authorized-keys' do\n      key = read_tempfile_or_string(params['authorized_key'])\n      if key.present?\n        settings = Manage::SshSettings.new\n        if settings.add_key(key)\n          status 201\n          return Manage::SshSettings.authorized_keys.to_json\n        else\n          status 400\n          return settings.errors.to_json\n        end\n      else\n        status 400\n        return {:error => \"Authorized key not specified\"}.to_json\n      end\n    end\n\n    delete '/settings/authorized-keys' do\n      key = read_tempfile_or_string(params['authorized_key'])\n      if key.present?\n        settings = Manage::SshSettings.new\n        if settings.remove_key(key)\n          status 200\n          return Manage::SshSettings.authorized_keys.to_json\n        else\n          status 400\n          return {:error => \"Unable to remove the key: #{key}\"}.to_json\n        end\n      else\n        status 400\n        return {:error => \"Authorized key not specified\"}.to_json\n      end\n    end\n\n    post '/settings/test/smtp' do\n      result = {}\n      settings = Manage.enterprise_settings\n      email = params[:smtp_test_email]\n\n      if email.present?\n        begin\n          smtp = SmtpSettings.new(params[:smtp])\n          if smtp.invalid?\n            raise smtp.errors.full_messages.join(\", \")\n          end\n          Mailer.configure!(smtp)\n          Mailer.test(email, settings.github_hostname, smtp.noreply_address)\n          result[:status] = \"success\"\n        rescue Exception => e\n          result.merge! \\\n            :status => \"error\",\n            :error  => CGI.escapeHTML(e.message)\n        end\n      else\n        result.merge! \\\n          :status => \"error\",\n          :error  => \"email is required\"\n      end\n\n      result.to_json\n    end\n\n\n    post '/settings/test/ldap' do\n      test_ldap_connection(params)\n    end\n\n    post '/support/bundle' do\n      job_id = Manage::Jobs::SupportBundle.create\n\n      status 202\n      {:job_id => job_id}.to_json\n    end\n\n    get '/job/:id' do\n      job_status = Resque::Plugins::Status::Hash.get(params[:id])\n\n      if !job_status\n        status 404\n      else\n        job_status.to_json\n      end\n    end\n\n    get '/ldap/attributes' do\n      if params[:ldap][:profile][:uid].blank?\n        params[:ldap][:profile][:uid] = 'uid'\n      end\n\n      ldap_settings = LdapSettings.from(params[:ldap])\n\n      if ldap_settings.valid?\n        ldap_settings.admin_attributes.to_json\n      else\n        status 400\n      end\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":63,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/github/enterprise-manage/lib/manage/api.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"498437e44f3b770f8911318c4fc5bc5ea76cc996","deserializer":"TextBuffer"},{"text":"require 'mail'\nrequire 'manage/ext/mail'\n\nclass Mailer\n  def self.test(email, hostname, no_reply_address)\n    url   = \"https://#{hostname}/setup/settings\"\n\n    Mail.deliver do\n      to       no_reply_address\n      from     no_reply_address\n      bcc      email\n      subject  \"GitHub Enterprise: SMTP Test Email\"\n      body     \"This is a test email generated from %s\" % url\n    end\n  end\n\n  def self.configure!(smtp)\n    settings = smtp.to_hash\n\n    settings[:enable_starttls_auto] = false unless settings[:enable_starttls_auto]\n\n    # just in case the username and password were set when trying a different\n    # authentication method and then switched to 'none'\n    if settings[:authentication].blank?\n      settings.delete(:username)\n      settings.delete(:user_name)\n      settings.delete(:password)\n    end\n\n    settings.keys.each { |key| settings.delete(key) if settings[key].nil? }\n\n    Mail.defaults do\n      delivery_method :smtp, settings\n    end\n  end\n\n  def self.logger\n    @logger ||= Logger.new(STDOUT)\n  end\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[3,0],[3,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":65,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"2":{"id":2,"range":[[2,0],[2,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"3":{"id":3,"range":[[2,0],[2,0]],"tailed":true,"reversed":false,"valid":false,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/github/enterprise-manage/lib/manage/mailer.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"1913ad143a1167f7fac8d18a7bb742c725047636","deserializer":"TextBuffer"},{"text":"#!/bin/bash\n\nset -e\n\nbundle install --path vendor/gems --binstubs bin \"$@\"\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":76,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/github/enterprise-manage/script/bootstrap","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"45ec58476eac614fc5157675d96773d2c5a28ebf","deserializer":"TextBuffer"},{"text":"root = File.dirname(__FILE__)\n\n$:.unshift(File.expand_path('lib', root))\nif ENV['RACK_ENV'] != 'production'\n  require File.expand_path('config/development', root)\nend\n\nrequire 'manage'\n\n# Use fake service stuff in development\nif Sinatra::Base.development? || Sinatra::Base.test?\n  Manage::Service.mock!\nend\n\nManage.setup\n\nunless Sinatra::Base.test?\n  use Sinatra::CommonLogger, Manage.logger\nend\n\n# Enable sessions\nuse Rack::Session::Cookie,\n  :key          => '_gh_manage',\n  :path         => '/',\n  :expire_after => (3 * 365 * 24 * 60 * 60), # seconds\n  :secret       => ENV['ENTERPRISE_SESSION_SECRET'] || '641dd6454584ddabfed6342cc66281fb'\n\n\n# All multipart file uploads are sent through a special /upload/*path prefix so\n# that nginx can apply some features. We emulate that here so that things work\n# the same way locally.\nclass SpecialUploadPath < Struct.new(:app)\n  def call(env)\n    path = env['PATH_INFO']\n    env['PATH_INFO'] = path.sub('/upload/', '/') if path =~ %r{/upload/.*$}\n    app.call(env)\n  end\nend\nuse SpecialUploadPath\n\n# Emulate the github app /status.json URL for testing in development. This\n# returns a 404 accept for requests whose unix timestamp is divisable by 10.\nclass FakeInstanceStatus < Struct.new(:app)\n  def call(env)\n    if env['PATH_INFO'] == '/status.json'\n      if Sinatra::Base.environment != :development || Time.now.to_i % 10 != 0\n        [404, {'Content-Type' => 'text/plain'}, \"Not Found\"]\n      else\n        json = '{ \"status\":\"ok\", \"configuration_id\":234234234234 }'\n        req = Rack::Request.new(env)\n        params = req.params\n        json = \"#{params['callback']}(#{json})\" if params['callback']\n        [200, {'Content-Type' => 'application/json'}, json]\n      end\n    else\n      app.call(env)\n    end\n  end\nend\nuse FakeInstanceStatus\n\nrequire 'rack/protection'\n\nmodule Rack\n  module Protection\n    class HttpOrigin\n      def base_url(env)\n        request = Rack::Request.new(env)\n        scheme = env['HTTP_X_FORWARDED_PROTO']\n        scheme ||= 'http'\n        \"#{scheme}://#{request.host}\"\n      end\n    end\n  end\nend\n\nuse Rack::Protection,\n  :frame_options => :deny\n\nrequire 'rack/csrf'\nmodule Rack\n  class Csrf\n    def skip_checking(request)\n      request.path =~ %r{\\A/setup/api}\n    end\n  end\nend\n\nuse Rack::Csrf\n\nmap '/setup/api' do\n  run Manage::Api\nend\n\nmap '/setup' do\n  run Manage::App\nend\n\nmap '/' do\n  use Rack::Rewrite do\n    r302 %r{^/?(\\.*)$}, '/setup/$1'\n  end\n\n  run(lambda {|env| [404, {}, []] })\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":249,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/github/enterprise-manage/config.ru","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"dc7a99b26810d1efa48478a8f95a4a571a7a4a60","deserializer":"TextBuffer"},{"text":"Gem::Specification.new do |s|\n  s.name        = 'enterprise-manage'\n  s.version     = '0.0.0'\n  s.platform    = Gem::Platform::RUBY\n  s.author      = \"@github/entops\"\n  s.email       = 'picard@starship.enterprise'\n  s.homepage    = \"http://github.com/github/enterprise-manage\"\n  s.summary     = \"The gemification of enterprise-manage for testing purposes.\"\n  s.description = s.summary\n  s.files       = Dir[\"lib/**/*\"]\n\n  s.add_dependency 'sinatra', '>= 1.4.2'\n  s.add_dependency 'sinatra-contrib'\n  s.add_dependency \"rack-rewrite\"\n  s.add_dependency \"god\"\n  s.add_dependency \"rack\"\n  s.add_dependency \"jstruct\"\n  s.add_dependency \"activemodel\",  \"~> 3.0\"\n  s.add_dependency \"sshkey\", \"~> 1.3.2\"\n  s.add_dependency \"openssl-extensions\"\n  s.add_dependency \"enterprise-crypto\", \"~> 0.3.23\"\n  s.add_dependency \"enterprise-ohai\", '~>0.1.8'\n  s.add_dependency 'chronic'\n  s.add_dependency 'cronedit'\n  s.add_dependency 'net-ldap'\n  s.add_dependency 'rack-protection'\n  s.add_dependency 'rack_csrf'\n  s.add_dependency 'mail'\n  s.add_dependency 'tzinfo'\n  s.add_dependency 'resque', \"1.24.1\"\n  s.add_dependency 'resque-status'\n  s.add_dependency 'coffee-script'\n  s.add_dependency 'sprockets'\n  s.add_dependency 'addressable'\n  s.add_dependency 'github-ldap'\nend\n","markers":{"markers":{"1":{"id":1,"range":[[28,25],[28,25]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":251,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/github/enterprise-manage/enterprise-manage.gemspec","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"816f88b9b7b684bed370942847d8e796a5cb25b7","deserializer":"TextBuffer"},{"text":"#!/bin/bash\n\nusage() {\ncat << USAGE\nUsage: `basename $0` [options]\n\nOPTIONS:\n  -h    Show this message\n  -o    Stream output to STDOUT.\n  -x    Extended bundle. Includes coredumps and rotated log files.\n\n\nUSAGE\n}\n\nmessage() {\n  echo \" --> ${1}\"\n}\n\n[ \"`whoami`\" = \"root\" ] || {\n  exec sudo -u root \"$0\" \"$@\"\n  echo Run this script as the root user. >&2\n  exit 1\n}\n\nFILE_PATH=\"/tmp/github-support-bundle-`date +\"%Y%m%d%H%M%S\"`.tgz\"\nBUNDLE_DIR=\"/github-support-bundle\"\nUSE_STDOUT=\n\nwhile getopts \"hox\" OPTION; do\n  case $OPTION in\n    h)\n      usage\n      exit 2\n      ;;\n    o)\n      USE_STDOUT=1\n      ;;\n    x)\n      EXTENDED=1\n      ;;\n    ?)\n      usage\n      exit\n      ;;\n  esac\ndone\n\n[ -n \"$USE_STDOUT\"  ] || {\n  message \"Saving support bundle to '${FILE_PATH}'...\"\n}\n\n# Cleanup previous support bundle\nrm -rf \"${BUNDLE_DIR}\"\n\n# System Logs\nmkdir -p ${BUNDLE_DIR}/system-logs\nmkdir -p ${BUNDLE_DIR}/system-logs/logrotate\n/usr/sbin/logrotate -d /etc/logrotate.conf > ${BUNDLE_DIR}/system-logs/logrotate/logrotate_test.log 2>&1\nln -nfs /var/log/dmesg* ${BUNDLE_DIR}/system-logs/\nln -nfs /var/log/kern.log* ${BUNDLE_DIR}/system-logs/\nln -nfs /var/log/god.log* ${BUNDLE_DIR}/system-logs/\nln -nfs /var/log/god/ ${BUNDLE_DIR}/system-logs/god\nln -nfs /var/log/boot.log* ${BUNDLE_DIR}/system-logs/\nln -nfs /var/log/auth.log* ${BUNDLE_DIR}/system-logs/\nln -nfs /var/log/segfaults.log* ${BUNDLE_DIR}/system-logs/\nln -nfs /var/log/syslog* ${BUNDLE_DIR}/system-logs/\n\n# Core dumps\nif [ -n \"$EXTENDED\" ]; then\n  if [ -d /cores ]; then\n    ln -nfs /cores ${BUNDLE_DIR}/core-dumps\n  fi\nfi\n\n# Chef Logs\nln -nfs /var/log/chef/ ${BUNDLE_DIR}/chef-logs\n\n# Application Logs\nln -nfs /data/github/shared/log/ ${BUNDLE_DIR}/github-logs\nln -nfs /data/github-services/shared/log ${BUNDLE_DIR}/github-services-logs\nln -nfs /data/enterprise-manage/shared/log ${BUNDLE_DIR}/enterprise-manage-logs\nln -nfs /data/enterprise-gems/shared/log ${BUNDLE_DIR}/enterprise-gems-logs\nln -nfs /data/slumlord/shared/log ${BUNDLE_DIR}/svn-bridge-logs\nln -nfs /data/nodeload2/shared/log ${BUNDLE_DIR}/nodeload-logs\nln -nfs /data/controller/shared/log ${BUNDLE_DIR}/controller-logs\nln -nfs /data/gist/shared/log ${BUNDLE_DIR}/gist-logs\nln -nfs /data/hookshot/shared/log ${BUNDLE_DIR}/hookshot-logs\n\n# Redis logs\nmkdir -p ${BUNDLE_DIR}/redis-logs && ln -nfs /var/log/redis.log* ${BUNDLE_DIR}/redis-logs/\n/data/enterprise-manage/current/admin/git/ghe-resque-info > ${BUNDLE_DIR}/redis-logs/resque-info.txt\n\n# MySQL logs\nln -nfs /var/log/mysql/ ${BUNDLE_DIR}/database-logs\n\n# Web Server Logs\nln -nfs /var/log/nginx/ ${BUNDLE_DIR}/web-logs\n\n# Installation Metadata\nmkdir -p ${BUNDLE_DIR}/metadata\nmkdir -p ${BUNDLE_DIR}/metadata/configs\n/data/enterprise-manage/current/admin/root/ghe-diagnostics > ${BUNDLE_DIR}/metadata/diagnostics.txt\n/sbin/sysctl -a > ${BUNDLE_DIR}/metadata/sysctl.txt 2> /dev/null\nln -nfs /data/enterprise/metadata.json ${BUNDLE_DIR}/metadata/\nln -nfs /data/enterprise/chef_metadata.json ${BUNDLE_DIR}/metadata/\nln -nfs /data/enterprise/customer.gpg ${BUNDLE_DIR}/metadata/\ncp /data/enterprise/dna.json ${BUNDLE_DIR}/metadata/dna.json\n/usr/share/rbenv/shims/ohai > ${BUNDLE_DIR}/metadata/system.json\nsed -i 's/\"password\": \".\\+\"/\"password\": \"[FILTERED]\"/' ${BUNDLE_DIR}/metadata/dna.json\nsed -i 's/\"key\": \".\\+\"/\"key\": \"[FILTERED]\"/' ${BUNDLE_DIR}/metadata/dna.json\nsed -i 's/\"secret_key_data\": \".\\+\"/\"secret_key_data\": \"[FILTERED]\"/' ${BUNDLE_DIR}/metadata/dna.json\nsed -i 's/\"community\": \".\\+\"/\"community\": \"[FILTERED]\"/' ${BUNDLE_DIR}/metadata/dna.json\nsed -i '/email/d' ${BUNDLE_DIR}/metadata/dna.json\nln -nfs /data/enterprise/enterprise.ghl ${BUNDLE_DIR}/metadata/\nln -nfs /data/enterprise/license.gpg ${BUNDLE_DIR}/metadata/\nln -nfs /etc/sysctl.d/90-github-customer.conf ${BUNDLE_DIR}/metadata/configs/\n\n# ElasticSearch logs\nln -nfs /var/log/elasticsearch/ ${BUNDLE_DIR}/elasticsearch-logs\n\n# Include user histories\nmkdir -p ${BUNDLE_DIR}/metadata/history\nfor homedir in /home/* /root; do\n  if [ -f \"${homedir}/.bash_history\" ]; then\n    ln ${homedir}/.bash_history ${BUNDLE_DIR}/metadata/history/`basename ${homedir}`\n  fi\ndone\n\n# Collectd\nmkdir -p ${BUNDLE_DIR}/collectd\nln -nfs /var/log/collectd ${BUNDLE_DIR}/collectd/logs\nmkdir -p ${BUNDLE_DIR}/collectd/graphs\nif [ -d /var/lib/collectd/rrd/ ]; then\n  for file in $( find /var/lib/collectd/rrd -name \\*.rrd ); do\n    XML=${file#/var/lib/collectd/rrd/}\n    XML=${XML//\\//.}\n    XML=${XML/.rrd/.xml}\n    rrdtool dump --no-header $file ${BUNDLE_DIR}/collectd/graphs/$XML\n  done\nfi\n\n# Gitmon\nmkdir -p ${BUNDLE_DIR}/gitmon\nln -nfs /var/log/gitmon ${BUNDLE_DIR}/gitmon/logs\nif [ -d /data/repositories/__gitmon__ ]; then\n  ln -s /data/repositories/__gitmon__ ${BUNDLE_DIR}/gitmon/data\nfi\n\n# Create the Support Bundle\nif [ -n \"$EXTENDED\" ]; then\n  tar czhf ${FILE_PATH} ${BUNDLE_DIR}/ 2> /dev/null\nelse\n  tar czhf ${FILE_PATH} --exclude=\"*.*.gz\" ${BUNDLE_DIR}/ 2> /dev/null\nfi\n\n# Correct permissions\nchown admin:admin ${FILE_PATH}\n\n[ ! -z $USE_STDOUT ] || {\n  message \"Done.\"\n}\n\n[ -z $USE_STDOUT ] || {\n  cat ${FILE_PATH}\n  rm ${FILE_PATH}\n}\n","markers":{"markers":{"1":{"id":1,"range":[[154,2],[154,2]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":398,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[8,32],[8,32]],"newRange":[[8,32],[9,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[9,0],[9,0]],"newRange":[[9,0],[9,2]],"oldText":"","newText":"  ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,2],[9,2]],"newRange":[[9,2],[9,3]],"oldText":"","newText":"-","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,3],[9,3]],"newRange":[[9,3],[9,4]],"oldText":"","newText":"x","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,4],[9,4]],"newRange":[[9,4],[9,6]],"oldText":"","newText":"  ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,6],[9,6]],"newRange":[[9,6],[9,8]],"oldText":"","newText":"  ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[9,8],[9,8]]},"newParams":{"reversed":true,"range":[[9,7],[9,8]]},"deserializer":"MarkerPatch"},{"oldRange":[[9,7],[9,8]],"newRange":[[9,7],[9,7]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[9,7],[9,7]]},"newParams":{"range":[[9,6],[9,7]]},"deserializer":"MarkerPatch"},{"oldRange":[[9,6],[9,7]],"newRange":[[9,6],[9,6]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[9,6],[9,6]]},"newParams":{"range":[[9,5],[9,6]]},"deserializer":"MarkerPatch"},{"oldRange":[[9,5],[9,6]],"newRange":[[9,5],[9,5]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[9,5],[9,5]]},"newParams":{"range":[[9,4],[9,5]]},"deserializer":"MarkerPatch"},{"oldRange":[[9,4],[9,5]],"newRange":[[9,4],[9,4]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,4],[9,4]],"newRange":[[9,4],[9,5]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,5],[9,5]],"newRange":[[9,5],[9,6]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,6],[9,6]],"newRange":[[9,6],[9,7]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,7],[9,7]],"newRange":[[9,7],[9,8]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[9,8],[9,8]]},"newParams":{"range":[[9,7],[9,8]]},"deserializer":"MarkerPatch"},{"oldRange":[[9,7],[9,8]],"newRange":[[9,7],[9,7]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[9,7],[9,7]]},"newParams":{"range":[[9,6],[9,7]]},"deserializer":"MarkerPatch"},{"oldRange":[[9,6],[9,7]],"newRange":[[9,6],[9,6]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[9,6],[9,6]]},"newParams":{"range":[[9,5],[9,6]]},"deserializer":"MarkerPatch"},{"oldRange":[[9,5],[9,6]],"newRange":[[9,5],[9,5]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[9,5],[9,5]]},"newParams":{"range":[[9,4],[9,5]]},"deserializer":"MarkerPatch"},{"oldRange":[[9,4],[9,5]],"newRange":[[9,4],[9,4]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,4],[9,4]],"newRange":[[9,4],[9,8]],"oldText":"","newText":"    ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,8],[9,8]],"newRange":[[9,8],[9,71]],"oldText":"","newText":"Extended bundle. Includes coredumps, collectd and gitmon files.","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[9,34],[9,71]]},"newParams":{"tailed":false,"range":[[9,71],[9,71]]},"deserializer":"MarkerPatch"},{"oldRange":[[9,34],[9,71]],"newRange":[[9,34],[9,35]],"oldText":"coredumps, collectd and gitmon files.","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,35],[9,35]],"newRange":[[9,35],[9,36]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,36],[9,36]],"newRange":[[9,36],[9,37]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,37],[9,37]],"newRange":[[9,37],[9,38]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,38],[9,38]],"newRange":[[9,38],[9,39]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,39],[9,39]],"newRange":[[9,39],[9,40]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,40],[9,40]],"newRange":[[9,40],[9,41]],"oldText":"","newText":"d","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,41],[9,41]],"newRange":[[9,41],[9,42]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,42],[9,42]],"newRange":[[9,42],[9,43]],"oldText":"","newText":"l","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,43],[9,43]],"newRange":[[9,43],[9,44]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,44],[9,44]],"newRange":[[9,44],[9,45]],"oldText":"","newText":"g","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,45],[9,45]],"newRange":[[9,45],[9,46]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,46],[9,46]],"newRange":[[9,46],[9,47]],"oldText":"","newText":"f","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,47],[9,47]],"newRange":[[9,47],[9,48]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,48],[9,48]],"newRange":[[9,48],[9,49]],"oldText":"","newText":"l","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,49],[9,49]],"newRange":[[9,49],[9,50]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,50],[9,50]],"newRange":[[9,50],[9,51]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,51],[9,51]],"newRange":[[9,51],[9,52]],"oldText":"","newText":".","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[9,25],[9,52]]},"newParams":{"tailed":false,"range":[[9,52],[9,52]]},"deserializer":"MarkerPatch"},{"oldRange":[[9,25],[9,52]],"newRange":[[9,25],[9,66]],"oldText":"Includes rotated log files.","newText":"Includes coredumps and rotated log files.","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[29,17],[29,17]],"newRange":[[29,17],[29,18]],"oldText":"","newText":"x","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[37,8],[37,8]],"newRange":[[37,8],[38,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[38,0],[38,0]],"newRange":[[38,0],[38,6]],"oldText":"","newText":"      ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[38,6],[38,6]]},"newParams":{"reversed":true,"range":[[38,4],[38,6]]},"deserializer":"MarkerPatch"},{"oldRange":[[38,4],[38,6]],"newRange":[[38,4],[38,4]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[38,4],[38,4]],"newRange":[[38,4],[40,8]],"oldText":"","newText":"x)\n      EXTENDED=1\n      ;;","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[48,2],[48,18]]},"newParams":{"tailed":false,"range":[[48,18],[48,18]]},"deserializer":"MarkerPatch"},{"oldRange":[[48,2],[48,18]],"newRange":[[48,2],[48,19]],"oldText":"! -z $USE_STDOUT","newText":"-n \"$USE_STDOUT\" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[69,0],[71,2]]},"newParams":{"tailed":false,"range":[[71,2],[71,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[69,0],[71,2]],"newRange":[[69,0],[73,2]],"oldText":"if [ -d /cores ]; then\n  ln -nfs /cores ${BUNDLE_DIR}/core-dumps\nfi","newText":"if [ -n \"$EXTENDED\" ]; then\n  if [ -d /cores ]; then\n    ln -nfs /cores ${BUNDLE_DIR}/core-dumps\n  fi\nfi","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[150,0],[150,49]]},"newParams":{"tailed":false,"range":[[150,49],[150,49]]},"deserializer":"MarkerPatch"},{"oldRange":[[150,0],[150,49]],"newRange":[[150,0],[154,2]],"oldText":"tar czhf ${FILE_PATH} ${BUNDLE_DIR}/ 2> /dev/null","newText":"if [ -n \"$EXTENDED\" ]; then\n  tar czhf ${FILE_PATH} ${BUNDLE_DIR}/ 2> /dev/null\nelse\n  tar czhf ${FILE_PATH} --exclude=\"*.*.gz\" ${BUNDLE_DIR}/ 2> /dev/null\nfi","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lildude/github/enterprise-manage/admin/root/ghe-support-bundle","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"eb3817eb44af627b4ecd5d928d238de239a7d815","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":63,"softTabs":true,"displayBuffer":{"id":64,"softWrap":false,"editorWidthInChars":101,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/github/enterprise-manage/lib/manage/api.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":65,"softTabs":true,"displayBuffer":{"id":66,"softWrap":false,"editorWidthInChars":101,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/github/enterprise-manage/lib/manage/mailer.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":76,"softTabs":true,"displayBuffer":{"id":77,"softWrap":false,"editorWidthInChars":101,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/github/enterprise-manage/script/bootstrap","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":249,"softTabs":true,"displayBuffer":{"id":250,"softWrap":false,"editorWidthInChars":101,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/github/enterprise-manage/config.ru","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":251,"softTabs":true,"displayBuffer":{"id":252,"softWrap":false,"editorWidthInChars":101,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/github/enterprise-manage/enterprise-manage.gemspec","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":398,"softTabs":true,"displayBuffer":{"id":399,"softWrap":false,"editorWidthInChars":null,"scrollTop":2630,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/github/enterprise-manage/admin/root/ghe-support-bundle","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/lildude/github/enterprise-manage/admin/root/ghe-support-bundle","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"metrics":{"sessionLength":1957140},"fuzzy-finder":{"/Users/lildude/github/enterprise-manage/lib/manage/api.rb":1398333764842,"/Users/lildude/github/enterprise-manage/lib/manage/mailer.rb":1398334169164,"/Users/lildude/github/enterprise-manage/script/bootstrap":1398333952728,"/Users/lildude/github/enterprise-manage/config.ru":1398333996639,"/Users/lildude/github/enterprise-manage/enterprise-manage.gemspec":1408964187534,"/Users/lildude/github/enterprise-manage/admin/root/ghe-support-bundle":1408964203200},"keybinding-resolver":{"attached":false},"tree-view":{"directoryExpansionStates":{"admin":{"root":{}}},"selectedPath":"/Users/lildude/github/enterprise-manage/admin/root/ghe-support-bundle","hasFocus":false,"attached":true,"scrollLeft":11,"scrollTop":170,"width":200}}}