{"mode":"editor","version":1,"windowDimensions":{"x":640,"y":23,"width":1280,"height":1374,"maximized":false},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/lildude/tmp/backup-utils","buffers":[{"text":"#!/bin/sh\n#/ Usage: ghe-host-check [<host>]\n#/ Verify connectivity with the GitHub Enterprise host. When no <host> is\n#/ provided, the $GHE_HOSTNAME configured in backup.config is assumed.\nset -e\n\n# Bring in the backup configuration.\ncd $(dirname \"$0\")/..\n. share/github-backup-utils/ghe-backup-config\n\n# Use the host provided on the command line if provided, or fallback on the\n# $GHE_HOSTNAME configured in backup.config when not present.\nhost=\"${1:-$GHE_HOSTNAME}\"\n\n# Options to pass to SSH during connection check\noptions=\"\n    -o PasswordAuthentication=no\n    -o ConnectTimeout=5\n    -o ConnectionAttempts=1\n\"\n\n# Split host:port into parts\nport=$(ssh_port_part \"$host\")\nhostname=$(ssh_host_part \"$host\")\n\nset +e\noutput=$(echo \"cat \\\"$GHE_REMOTE_METADATA_FILE\\\" 2>/dev/null || exit 101\" | ghe-ssh -o BatchMode=no $options $host -- /bin/sh 2>&1)\nrc=$?\nset -e\n\nif [ $rc -ne 0 ]; then\n    case $rc in\n        255)\n            if echo \"$output\" | grep -i \"port 22: connection refused\" >/dev/null; then\n                exec \"$0\" \"$hostname:122\"\n            fi\n\n            echo \"$output\" 1>&2\n            echo \"Error: ssh connection with '$host' failed\" 1>&2\n            echo \"Note that your SSH key needs to be setup on $host as described in:\" 1>&2\n            echo \"* https://enterprise.github.com/help/articles/adding-an-ssh-key-for-shell-access\" 1>&2\n            ;;\n        101)\n            echo \"Error: couldn't read GitHub Enterprise fingerprint on '$host' or this isn't a GitHub appliance.\" 1>&2\n            ;;\n        1)\n            if [ \"${port:-22}\" -eq 22 ] && echo \"$output\" | grep \"use port 122\" >/dev/null; then\n                exec \"$0\" \"$hostname:122\"\n            else\n                echo \"$output\" 1>&2\n            fi\n            ;;\n\n    esac\n    exit $rc\nfi\n\nversion=$(echo \"$output\" | grep version | cut -d'\"' -f4)\nif [ -z \"$version\" ]; then\n    echo \"Error: failed to parse version from $GHE_REMOTE_METADATA_FILE on '$host' or this isn't a GitHub appliance.\" 1>&2\n    exit 2\nfi\n\necho \"Connect $hostname:$port OK (v$version)\"\n","markers":{"markers":{"1":{"id":1,"range":[[46,80],[46,80]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":4,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[33,43],[33,43]]},"newParams":{"reversed":true,"range":[[33,42],[33,43]]},"deserializer":"MarkerPatch"},{"oldRange":[[33,42],[33,43]],"newRange":[[33,42],[33,42]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[33,42],[33,42]]},"newParams":{"range":[[33,41],[33,42]]},"deserializer":"MarkerPatch"},{"oldRange":[[33,41],[33,42]],"newRange":[[33,41],[33,41]],"oldText":"q","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[33,41],[33,41]]},"newParams":{"range":[[33,40],[33,41]]},"deserializer":"MarkerPatch"},{"oldRange":[[33,40],[33,41]],"newRange":[[33,40],[33,40]],"oldText":"-","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[33,69],[33,69]],"newRange":[[33,69],[33,70]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,70],[33,70]],"newRange":[[33,70],[33,71]],"oldText":"","newText":">","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[33,71],[33,71]]},"newParams":{"range":[[33,70],[33,71]]},"deserializer":"MarkerPatch"},{"oldRange":[[33,70],[33,71]],"newRange":[[33,70],[33,70]],"oldText":">","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"oldRange":[[33,70],[33,70]],"newRange":[[33,70],[33,71]],"oldText":"","newText":"2","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,71],[33,71]],"newRange":[[33,71],[33,72]],"oldText":"","newText":">","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[33,72],[33,72]],"newRange":[[33,72],[33,73]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[33,73],[33,73]],"newRange":[[33,73],[33,74]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,74],[33,74]],"newRange":[[33,74],[33,75]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,75],[33,75]],"newRange":[[33,75],[33,76]],"oldText":"","newText":"v","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,76],[33,76]],"newRange":[[33,76],[33,77]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[33,77],[33,77]],"newRange":[[33,77],[33,78]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,78],[33,78]],"newRange":[[33,78],[33,79]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,79],[33,79]],"newRange":[[33,79],[33,80]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,80],[33,80]],"newRange":[[33,80],[33,81]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[46,68],[46,68]]},"newParams":{"range":[[46,67],[46,68]]},"deserializer":"MarkerPatch"},{"oldRange":[[46,67],[46,68]],"newRange":[[46,67],[46,67]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[46,67],[46,67]]},"newParams":{"range":[[46,66],[46,67]]},"deserializer":"MarkerPatch"},{"oldRange":[[46,66],[46,67]],"newRange":[[46,66],[46,66]],"oldText":"q","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[46,66],[46,66]]},"newParams":{"range":[[46,65],[46,66]]},"deserializer":"MarkerPatch"},{"oldRange":[[46,65],[46,66]],"newRange":[[46,65],[46,65]],"oldText":"-","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[46,79],[46,79]],"newRange":[[46,79],[46,80]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[46,80],[46,80]],"newRange":[[46,80],[46,81]],"oldText":"","newText":"2","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[46,81],[46,81]],"newRange":[[46,81],[46,82]],"oldText":"","newText":">","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[46,82],[46,82]],"newRange":[[46,82],[46,83]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[46,83],[46,83]],"newRange":[[46,83],[46,84]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[46,84],[46,84]],"newRange":[[46,84],[46,85]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[46,85],[46,85]],"newRange":[[46,85],[46,86]],"oldText":"","newText":"v","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[46,86],[46,86]],"newRange":[[46,86],[46,87]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[46,87],[46,87]],"newRange":[[46,87],[46,88]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[46,88],[46,88]],"newRange":[[46,88],[46,89]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[46,89],[46,89]],"newRange":[[46,89],[46,90]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[46,90],[46,90]],"newRange":[[46,90],[46,91]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[33,71],[33,71]]},"newParams":{"range":[[33,70],[33,71]]},"deserializer":"MarkerPatch"},{"oldRange":[[33,70],[33,71]],"newRange":[[33,70],[33,70]],"oldText":"2","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[46,81],[46,81]]},"newParams":{"range":[[46,80],[46,81]]},"deserializer":"MarkerPatch"},{"oldRange":[[46,80],[46,81]],"newRange":[[46,80],[46,80]],"oldText":"2","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[46,80],[46,80]],"newRange":[[46,80],[46,81]],"oldText":"","newText":"2","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[33,70],[33,70]],"newRange":[[33,70],[33,71]],"oldText":"","newText":"2","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[33,71],[33,71]]},"newParams":{"range":[[33,70],[33,71]]},"deserializer":"MarkerPatch"},{"oldRange":[[33,70],[33,71]],"newRange":[[33,70],[33,70]],"oldText":"2","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[46,81],[46,81]]},"newParams":{"range":[[46,80],[46,81]]},"deserializer":"MarkerPatch"},{"oldRange":[[46,80],[46,81]],"newRange":[[46,80],[46,80]],"oldText":"2","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/lildude/Downloads/backup-utils/bin/ghe-host-check","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"dc1b3c00f3cd8b87065ce4641d161609c3797dfb","deserializer":"TextBuffer"},{"text":"#!/bin/sh\n#/ Usage: ghe-restore-settings <host>\n#/ Restore settings from a snapshot to the given <host>.\nset -e\n\n# Bring in the backup configuration\ncd $(dirname \"$0\")/../..\n. share/github-backup-utils/ghe-backup-config\n\n# Show usage and bail with no arguments\n[ -z \"$*\" ] && print_usage\n\n# Grab host arg\nGHE_HOSTNAME=\"$1\"\n\n# Perform a host-check and establish GHE_REMOTE_XXX variables.\nghe_remote_version_required \"$GHE_HOSTNAME\"\n\n# The snapshot to restore should be set by the ghe-restore command but this lets\n# us run this script directly.\n: ${GHE_RESTORE_SNAPSHOT:=current}\n\n# Path to snapshot dir we're restoring from\nGHE_RESTORE_SNAPSHOT_PATH=\"$GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT\"\n\necho \"Restoring settings ...\"\nif [ \"$GHE_VERSION_MAJOR\" -ge 2 ]; then\n  # work around issue importing settings with bad storage mode values\n  ( cat \"$GHE_RESTORE_SNAPSHOT_PATH/settings.json\" && echo ) |\n    sed 's/\"storage_mode\": \"device\"/\"storage_mode\": \"rootfs\"/' |\n    ghe-ssh \"$GHE_HOSTNAME\" -- '/usr/bin/env GHEBUVER=2 ghe-import-settings' 1>&3\nelse\n    ( cat \"$GHE_RESTORE_SNAPSHOT_PATH/settings.json\" && echo ) |\n    ghe-ssh \"$GHE_HOSTNAME\" -- '/usr/bin/env GHEBUVER=2 ghe-import-settings' 1>&3\nfi\n\n# Bail out if we're restoring against a pre-2.x appliance. Everything below is\n# supported by v2.0 appliances only.\nif [ \"$GHE_VERSION_MAJOR\" -lt 2 ]; then\n    exit 0\nfi\n\necho \"Restoring license ...\"\nghe-ssh \"$GHE_HOSTNAME\" -- 'ghe-import-license' < \"$GHE_RESTORE_SNAPSHOT_PATH/enterprise.ghl\" 1>&3\n\n# Restore management console password hash if present.\nif [ -f \"$GHE_RESTORE_SNAPSHOT_PATH/manage-password\" ]; then\n    echo \"Restoring management console password ...\"\n    cat \"$GHE_RESTORE_SNAPSHOT_PATH/manage-password\" |\n    ghe-ssh \"$GHE_HOSTNAME\" -- \"ghe-import-passwords\"\nfi\n","markers":{"markers":{"1":{"id":1,"range":[[32,62],[32,62]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":8,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[28,2],[28,2]],"newRange":[[28,2],[28,3]],"oldText":"","newText":"(","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[28,3],[28,3]],"newRange":[[28,3],[28,4]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[28,50],[28,50]],"newRange":[[28,50],[28,51]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[28,51],[28,51]],"newRange":[[28,51],[28,52]],"oldText":"","newText":"&","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[28,52],[28,52]],"newRange":[[28,52],[28,53]],"oldText":"","newText":"&","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[28,53],[28,53]],"newRange":[[28,53],[28,54]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[28,54],[28,54]],"newRange":[[28,54],[28,55]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[28,55],[28,55]],"newRange":[[28,55],[28,56]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[28,56],[28,56]],"newRange":[[28,56],[28,57]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[28,57],[28,57]],"newRange":[[28,57],[28,58]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[28,58],[28,58]],"newRange":[[28,58],[28,59]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[28,59],[28,59]],"newRange":[[28,59],[28,60]],"oldText":"","newText":")","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[32,4],[32,4]],"newRange":[[32,4],[32,5]],"oldText":"","newText":"(","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,5],[32,5]],"newRange":[[32,5],[32,6]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[32,52],[32,52]],"newRange":[[32,52],[32,53]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,53],[32,53]],"newRange":[[32,53],[32,54]],"oldText":"","newText":"&","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,54],[32,54]],"newRange":[[32,54],[32,55]],"oldText":"","newText":"&","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,55],[32,55]],"newRange":[[32,55],[32,56]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,56],[32,56]],"newRange":[[32,56],[32,57]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,57],[32,57]],"newRange":[[32,57],[32,58]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,58],[32,58]],"newRange":[[32,58],[32,59]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,59],[32,59]],"newRange":[[32,59],[32,60]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,60],[32,60]],"newRange":[[32,60],[32,61]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,61],[32,61]],"newRange":[[32,61],[32,62]],"oldText":"","newText":")","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/lildude/Downloads/backup-utils/share/github-backup-utils/ghe-restore-settings","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e51eb596f408bca8f9b224311ea2d1afd85d80d8","deserializer":"TextBuffer"},{"text":"#!/bin/sh\n#/ Usage: ghe-restore [-v] [-s <snapshot-id>] [<host>]\n#/ Restores a GitHub instance from local backup snapshots. The <host> is the\n#/ hostname or IP of the GitHub instance. The <host> may be omitted when\n#/ the GHE_RESTORE_HOST config variable is set in backup.config. When a <host>\n#/ argument is provided, it always overrides the configured restore host.\n#/\n#/ Options:\n#/   -f                Don't prompt for confirmation before restoring.\n#/   -c                Restore appliance settings and license in addition to\n#/                     datastores. Settings are not restored by default to\n#/                     prevent overwriting different configuration on the\n#/                     restore host.\n#/   -s <snapshot-id>  Restore from the snapshot with the given id. Available\n#/                     snapshots may be listed under the data directory.\n#/   -v                Enable verbose output.\n#/\n#/ Note that the host must be reachable and your SSH key must be setup as\n#/ described in the following help article:\n#/\n#/ <https://enterprise.github.com/help/articles/adding-an-ssh-key-for-shell-access>\nset -e\n\n# Bring in the backup configuration.\ncd $(dirname \"$0\")/..\n. share/github-backup-utils/ghe-backup-config\n\n# Parse arguments\nrestore_settings=false\nforce=false\nwhile true; do\n    case \"$1\" in\n        -f|--force)\n            force=true\n            shift\n            ;;\n        -s)\n            snapshot_id=\"$(basename \"$2\")\"\n            shift 2\n            ;;\n        -c)\n            restore_settings=true\n            shift\n            ;;\n        -*)\n            echo \"Error: invalid argument: '$1'\" 1>&2\n            exit 1\n            ;;\n        *)\n            break\n            ;;\n    esac\ndone\n\n# Grab the host arg\nGHE_HOSTNAME=\"${1:-$GHE_RESTORE_HOST}\"\n\n# Hostname without any port suffix\nhostname=$(echo \"$GHE_HOSTNAME\" | cut -f 1 -d :)\n\n# Show usage with no <host>\n[ -z \"$GHE_HOSTNAME\" ] && print_usage\n\n# ghe-restore-snapshot-path validates it exists, determines what current is,\n# and if there's any problem, exit for us\nGHE_RESTORE_SNAPSHOT_PATH=\"$(ghe-restore-snapshot-path \"$snapshot_id\")\"\nGHE_RESTORE_SNAPSHOT=$(basename \"$GHE_RESTORE_SNAPSHOT_PATH\")\nexport GHE_RESTORE_SNAPSHOT\n\n# Figure out whether to use the tarball or rsync restore strategy based on the\n# strategy file written in the snapshot directory.\nGHE_BACKUP_STRATEGY=$(cat \"$GHE_RESTORE_SNAPSHOT_PATH/strategy\")\n\n# Perform a host-check and establish the remote version in GHE_REMOTE_VERSION.\nghe_remote_version_required \"$GHE_HOSTNAME\"\n\n# Keep other processes on the VM in the loop about the restore status.\n#\n# Other processes will look for these states:\n# \"restoring\" - restore is currently in progress\n# \"failed\"    - restore has failed\n# \"complete\"  - restore has completed successfully\nupdate_restore_status () {\n    if [ \"$GHE_VERSION_MAJOR\" -ge 2 ]; then\n        echo \"$1\" |\n        ghe-ssh \"$GHE_HOSTNAME\" -- \"sudo dd of='$GHE_REMOTE_DATA_USER_DIR/common/ghe-restore-status' 2>/dev/null\"\n    fi\n}\n\n# Figure out if this instance has been configured or is entirely new.\ninstance_configured=false\nif ghe-ssh \"$GHE_HOSTNAME\" -- \\\n    \"[ -f '$GHE_REMOTE_DATA_DIR/enterprise/dna.json' -o \\\n       -f '$GHE_REMOTE_ROOT_DIR/etc/github/configured' ]\"; then\n    instance_configured=true\nelif [ \"$GHE_VERSION_MAJOR\" -ge 2 ]; then\n    restore_settings=true\nfi\n\n# Prompt to verify the restore host given is correct. Restoring overwrites\n# important data on the destination appliance that cannot be recovered. This is\n# mostly to prevent accidents where the backup host is given to restore instead\n# of a separate restore host since they're used in such close proximity.\nif $instance_configured && ! $force; then\n    echo\n    echo \"WARNING: All data on GitHub Enterprise appliance $hostname ($GHE_REMOTE_VERSION)\"\n    echo \"         will be overwritten with data from snapshot ${GHE_RESTORE_SNAPSHOT}.\"\n    echo \"Please verify that this is the correct restore host before continuing.\"\n    printf \"Type 'yes' to continue: \"\n\n    while read -r response; do\n        case $response in\n            yes|Yes|YES)\n                break\n                ;;\n            '')\n                printf \"Type 'yes' to continue: \"\n                ;;\n            *)\n                echo \"Restore aborted.\" 1>&2\n                exit 1\n                ;;\n        esac\n    done\n    echo\nfi\n\necho \"Starting restore of $GHE_HOSTNAME from snapshot $GHE_RESTORE_SNAPSHOT\"\ntrap \"update_restore_status failed\" EXIT\nupdate_restore_status \"restoring\"\n\n# Verify the host has been fully configured at least once if when running\n# against v11.10.x appliances and the -c option wasn't specified.\nif [ \"$GHE_VERSION_MAJOR\" -le 1 ] && ! $restore_settings && ! $instance_configured; then\n    echo \"Error: $hostname not configured.\" 1>&2\n    echo \"Please visit https://$hostname/setup/settings to configure base appliance settings before continuing.\" 1>&2\n    exit 1\nfi\n\n# Restoring Elasticsearch to 11.10.3x via rsync requires GNU tar\nif [ \"$GHE_VERSION_MAJOR\" -le 1 ] && [ \"$GHE_BACKUP_STRATEGY\" = \"rsync\" ]; then\n    if ! tar --version | grep GNU >/dev/null; then\n        if ! command -v gtar >/dev/null 2>&1; then\n            echo \"GNU tar is required.  Aborting.\" >&2\n            exit 1\n        fi\n    fi\nfi\n\n# Make sure the GitHub appliance is in maintenance mode.\nif $instance_configured; then\n    if ! ghe-maintenance-mode-status \"$GHE_HOSTNAME\"; then\n        echo \"Error: $GHE_HOSTNAME must be put in maintenance mode before restoring. Aborting.\" 1>&2\n        exit 1\n    fi\nfi\n\n# Restore settings and license if restoring to an unconfigured appliance or when\n# specified manually.\nif $restore_settings; then\n    ghe-restore-settings \"$GHE_HOSTNAME\"\nfi\n\n# Make sure mysql and elasticsearch are prep'd and running before restoring into\n# appliances v2.x or greater. These services will not have been started on appliances\n# that have not been configured yet.\nif [ \"$GHE_VERSION_MAJOR\" -ge 2 ]; then\n    echo \"sudo ghe-service-ensure-mysql && sudo ghe-service-ensure-elasticsearch\" |\n    ghe-ssh \"$GHE_HOSTNAME\" -- /bin/sh 1>&3\nfi\n\necho \"Restoring Git repositories ...\"\nghe-restore-repositories-${GHE_BACKUP_STRATEGY} \"$GHE_HOSTNAME\" 1>&3\n\necho \"Restoring GitHub Pages ...\"\nghe-restore-pages-${GHE_BACKUP_STRATEGY} \"$GHE_HOSTNAME\" 1>&3\n\nif [ \"$GHE_VERSION_MAJOR\" -ge 2 ]; then\n    echo \"Restoring asset attachments ...\"\n    ghe-restore-userdata alambic_assets \"$GHE_HOSTNAME\" 1>&3\n\n    echo \"Restoring hook deliveries ...\"\n    ghe-restore-userdata hookshot \"$GHE_HOSTNAME\" 1>&3\nfi\n\necho \"Restoring MySQL database ...\"\ngzip -dc \"$GHE_RESTORE_SNAPSHOT_PATH/mysql.sql.gz\" | ghe-ssh \"$GHE_HOSTNAME\" -- 'ghe-import-mysql' 1>&3\n\necho \"Restoring Redis database ...\"\nghe-ssh \"$GHE_HOSTNAME\" -- 'ghe-import-redis' < \"$GHE_RESTORE_SNAPSHOT_PATH/redis.rdb\" 1>&3\n\necho \"Restoring SSH authorized keys ...\"\nghe-ssh \"$GHE_HOSTNAME\" -- 'ghe-import-authorized-keys' < \"$GHE_RESTORE_SNAPSHOT_PATH/authorized-keys.json\" 1>&3\n\necho \"Restoring Elasticsearch indices ...\"\nghe-restore-es-${GHE_BACKUP_STRATEGY} \"$GHE_HOSTNAME\" 1>&3\n\n# When restoring to a 2.x host that has already been configured, kick off a\n# config run to perform data migrations.\nif [ \"$GHE_VERSION_MAJOR\" -ge 2 ] && $instance_configured; then\n    echo \"Configuring storage ...\"\n    ghe-ssh \"$GHE_HOSTNAME\" -- \"sudo ghe-config-apply\" 1>&3\nfi\n\n# Update the remote status to \"complete\". This has to happen before importing\n# ssh host keys because subsequent commands will fail due to the host key\n# changing otherwise.\ntrap \"\" EXIT\nupdate_restore_status \"complete\"\n\necho \"Restoring SSH host keys ...\"\nghe-ssh \"$GHE_HOSTNAME\" -- 'ghe-import-ssh-host-keys' < \"$GHE_RESTORE_SNAPSHOT_PATH/ssh-host-keys.tar\" 1>&3\n\necho \"Completed restore of $GHE_HOSTNAME from snapshot $GHE_RESTORE_SNAPSHOT\"\necho \"Visit https://$hostname/setup/settings to review appliance configuration.\"\n","markers":{"markers":{"1":{"id":1,"range":[[141,25],[141,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":12,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[141,33],[141,33]]},"newParams":{"reversed":true,"range":[[141,32],[141,33]]},"deserializer":"MarkerPatch"},{"oldRange":[[141,32],[141,33]],"newRange":[[141,32],[141,32]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[141,32],[141,32]]},"newParams":{"range":[[141,31],[141,32]]},"deserializer":"MarkerPatch"},{"oldRange":[[141,31],[141,32]],"newRange":[[141,31],[141,31]],"oldText":"q","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[141,31],[141,31]]},"newParams":{"range":[[141,30],[141,31]]},"deserializer":"MarkerPatch"},{"oldRange":[[141,30],[141,31]],"newRange":[[141,30],[141,30]],"oldText":"-","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[141,33],[141,33]],"newRange":[[141,33],[141,34]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[141,34],[141,34]],"newRange":[[141,34],[141,35]],"oldText":"","newText":">","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[141,35],[141,35]],"newRange":[[141,35],[141,36]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[141,36],[141,36]],"newRange":[[141,36],[141,37]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[141,37],[141,37]],"newRange":[[141,37],[141,38]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[141,38],[141,38]],"newRange":[[141,38],[141,39]],"oldText":"","newText":"v","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[141,39],[141,39]],"newRange":[[141,39],[141,40]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[141,40],[141,40]],"newRange":[[141,40],[141,41]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[141,41],[141,41]],"newRange":[[141,41],[141,42]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[141,42],[141,42]],"newRange":[[141,42],[141,43]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[141,43],[141,43]],"newRange":[[141,43],[141,44]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/lildude/Downloads/backup-utils/bin/ghe-restore","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"ee645bca23e53efb7270c3b015bc25ac2a384883","deserializer":"TextBuffer"},{"text":"#!/bin/sh\n#/ Usage: ghe-restore-es-rsync <host>\n#/ Restore an rsync snapshot of all Elasticsearch data to a GitHub instance.\n#/\n#/ Note: This script typically isn't called directly. It's invoked by the\n#/ ghe-restore command when the rsync strategy is used.\nset -e\n\n# Bring in the backup configuration\ncd $(dirname \"$0\")/../..\n. share/github-backup-utils/ghe-backup-config\n\n# Show usage and bail with no arguments\n[ -z \"$*\" ] && print_usage\n\n# Grab host arg\nGHE_HOSTNAME=\"$1\"\n\n# Perform a host-check and establish the remote version in GHE_REMOTE_VERSION.\nghe_remote_version_required \"$GHE_HOSTNAME\"\n\n# The snapshot to restore should be set by the ghe-restore command but this lets\n# us run this script directly.\n: ${GHE_RESTORE_SNAPSHOT:=current}\n\n# The directory holding the snapshot to restore\nsnapshot_dir=\"$GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT\"\n\n# Transfer all ES data from the latest snapshot to the GitHub instance.\nif [ ! -d \"$snapshot_dir/elasticsearch\" ]; then\n    echo \"Warning: Elasticsearch backup missing. Skipping ...\"\n    exit 0\n\n# restoring v11.10.x ES snapshot into a v2.0 appliance\nelif [ \"$GHE_VERSION_MAJOR\" -gt 1 -a -f \"$snapshot_dir/elasticsearch/elasticsearch.yml\" ]; then\n    ghe-ssh \"$GHE_HOSTNAME\" -- \"sudo mkdir -p '$GHE_REMOTE_DATA_USER_DIR/elasticsearch-legacy'\" 1>&3\n    ghe-ssh \"$GHE_HOSTNAME\" -- \"sudo chown elasticsearch:elasticsearch '$GHE_REMOTE_DATA_USER_DIR/elasticsearch-legacy'\" 1>&3\n\n    ghe-rsync -avz --delete \\\n        -e \"ghe-ssh -p $(ssh_port_part \"$GHE_HOSTNAME\")\" \\\n        --rsync-path=\"sudo -u elasticsearch rsync\" \\\n        \"$snapshot_dir/elasticsearch/\" \\\n        \"$(ssh_host_part \"$GHE_HOSTNAME\"):$GHE_REMOTE_DATA_USER_DIR/elasticsearch-legacy\" 1>&3\n\n# restoring v2.0 ES snapshot into a v2.0 appliance\nelif [ \"$GHE_VERSION_MAJOR\" -gt 1 ]; then\n    ghe-ssh \"$GHE_HOSTNAME\" -- \"sudo mkdir -p '$GHE_REMOTE_DATA_USER_DIR/elasticsearch-restore'\" 1>&3\n    ghe-ssh \"$GHE_HOSTNAME\" -- \"sudo chown elasticsearch:elasticsearch '$GHE_REMOTE_DATA_USER_DIR/elasticsearch-restore'\" 1>&3\n\n    ghe-rsync -avz --delete \\\n        -e \"ghe-ssh -p $(ssh_port_part \"$GHE_HOSTNAME\")\" \\\n        --rsync-path=\"sudo -u elasticsearch rsync\" \\\n        \"$snapshot_dir/elasticsearch/\" \\\n        \"$(ssh_host_part \"$GHE_HOSTNAME\"):$GHE_REMOTE_DATA_USER_DIR/elasticsearch-restore\" 1>&3\n\n# restoring v11.10.x ES snapshot into a v11.10.x appliance\nelse\n    # Use GNU tar on BSDs.\n    TAR=tar\n    if ! tar --version | grep GNU >/dev/null; then\n            TAR=gtar\n    fi\n    cd \"$GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT\"\n    $TAR -cf - --owner=root --group=root elasticsearch |\n    ghe-ssh \"$GHE_HOSTNAME\" -- 'ghe-import-es-indices' 1>&3\nfi\n","markers":{"markers":{"1":{"id":1,"range":[[59,44],[59,44]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":36,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[59,33],[59,33]]},"newParams":{"reversed":true,"range":[[59,32],[59,33]]},"deserializer":"MarkerPatch"},{"oldRange":[[59,32],[59,33]],"newRange":[[59,32],[59,32]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[59,32],[59,32]]},"newParams":{"range":[[59,31],[59,32]]},"deserializer":"MarkerPatch"},{"oldRange":[[59,31],[59,32]],"newRange":[[59,31],[59,31]],"oldText":"q","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[59,31],[59,31]]},"newParams":{"range":[[59,30],[59,31]]},"deserializer":"MarkerPatch"},{"oldRange":[[59,30],[59,31]],"newRange":[[59,30],[59,30]],"oldText":"-","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[59,33],[59,33]],"newRange":[[59,33],[59,34]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,34],[59,34]],"newRange":[[59,34],[59,35]],"oldText":"","newText":">","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,35],[59,35]],"newRange":[[59,35],[59,36]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,36],[59,36]],"newRange":[[59,36],[59,37]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,37],[59,37]],"newRange":[[59,37],[59,38]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,38],[59,38]],"newRange":[[59,38],[59,39]],"oldText":"","newText":"v","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,39],[59,39]],"newRange":[[59,39],[59,40]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,40],[59,40]],"newRange":[[59,40],[59,41]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,41],[59,41]],"newRange":[[59,41],[59,42]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,42],[59,42]],"newRange":[[59,42],[59,43]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,43],[59,43]],"newRange":[[59,43],[59,44]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/lildude/Downloads/backup-utils/share/github-backup-utils/ghe-restore-es-rsync","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"46698ab424ae8125780611a83f48ab251be70806","deserializer":"TextBuffer"},{"text":"#!/bin/sh\n#/ Usage: ghe-ssh [<option>...] <host> [<simple-command>...]\n#/        echo <complex-command>... | ghe-ssh [<option>...] <host> /bin/sh\n#/ Helper to ssh into a GitHub instance with the right user and port. The first\n#/ form should be used for simple commands; the second form should be used for\n#/ complex commands that include pipelines or multiple commands.\nset -e\n\n# Bring in the backup configuration\ncd $(dirname \"$0\")/../..\n. share/github-backup-utils/ghe-backup-config\n\nopts=\"$GHE_EXTRA_SSH_OPTS\"\nwhile true; do\n    case \"$1\" in\n        -p|-l|-o)\n            opts=\"$opts $1 $2\"\n            shift 2\n            ;;\n        --)\n            echo \"Error: illegal '--' in ssh invocation\"\n            exit 1\n            ;;\n        *)\n            host=\"$1\"\n            shift\n            break\n            ;;\n    esac\ndone\n\n# Show usage with no host\n[ -z \"$host\" ] && print_usage\n\n# Shift off '--' if given immediately after host.\nif [ \"$1\" = \"--\" ]; then\n    shift\nfi\n\n# Split host:port into parts\nport=$(ssh_port_part \"$host\")\nhost=$(ssh_host_part \"$host\")\n\n# Add port / -p option when non-standard port given.\n[ \"$port\" != \"22\" ] && opts=\"-p $port $opts\"\n\n# Add user / -l option\nuser=\"${host%@*}\"\n[ \"$user\" = \"$host\" ] && user=\"admin\"\nopts=\"-l $user $opts\"\n\n# Bail out with error if the simple command form is used with complex commands.\n# Complex\nif echo \"$*\" | grep \"[|;]\" >/dev/null || [ $(echo \"$*\" | wc -l) -gt 1 ]; then\n    echo \"fatal: ghe-ssh: Attempt to invoke complex command with simple command form.\" 1>&2\n    echo \"See ghe-ssh --help for more on correcting.\" 1>&2\n    exit 1\nfi\n\n# Turn on verbose SSH logging if needed\n$GHE_VERBOSE_SSH && set -x\n\n# Exec ssh command with modified host / port args and add nice to command.\nexec ssh $opts -o BatchMode=yes \"$host\" -- $GHE_NICE $GHE_IONICE \"$@\"\n","markers":{"markers":{"1":{"id":1,"range":[[53,37],[53,37]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":40,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[53,23],[53,23]]},"newParams":{"reversed":true,"range":[[53,22],[53,23]]},"deserializer":"MarkerPatch"},{"oldRange":[[53,22],[53,23]],"newRange":[[53,22],[53,22]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[53,22],[53,22]]},"newParams":{"range":[[53,21],[53,22]]},"deserializer":"MarkerPatch"},{"oldRange":[[53,21],[53,22]],"newRange":[[53,21],[53,21]],"oldText":"q","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[53,21],[53,21]]},"newParams":{"range":[[53,20],[53,21]]},"deserializer":"MarkerPatch"},{"oldRange":[[53,20],[53,21]],"newRange":[[53,20],[53,20]],"oldText":"-","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,26],[53,26]],"newRange":[[53,26],[53,27]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[53,27],[53,27]],"newRange":[[53,27],[53,28]],"oldText":"","newText":">","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[53,28],[53,28]],"newRange":[[53,28],[53,29]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[53,29],[53,29]],"newRange":[[53,29],[53,30]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[53,30],[53,30]],"newRange":[[53,30],[53,31]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[53,31],[53,31]],"newRange":[[53,31],[53,32]],"oldText":"","newText":"v","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[53,32],[53,32]],"newRange":[[53,32],[53,33]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[53,33],[53,33]],"newRange":[[53,33],[53,34]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[53,34],[53,34]],"newRange":[[53,34],[53,35]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[53,35],[53,35]],"newRange":[[53,35],[53,36]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[53,36],[53,36]],"newRange":[[53,36],[53,37]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/lildude/Downloads/backup-utils/share/github-backup-utils/ghe-ssh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2a6b0c146ad8f2bee0e189763b6aa4d41b95e336","deserializer":"TextBuffer"},{"text":"#!/bin/sh\n#/ Usage: ghe-backup-repositories-rsync\n#/ Take an online, incremental snapshot of all Git repository data.\n#/\n#/ Note: This command typically isn't called directly. It's invoked by\n#/ ghe-backup when the rsync strategy is used.\nset -e\n\n# This command is designed to allow for transferring active Git repository data\n# from a GitHub instance to a backup site in a way that ensures data is\n# captured in a consistent state even when being written to.\n#\n# - All Git GC operations are disabled on the GitHub instance for the duration of\n#   the backup. This removes the possibly of objects or packs being removed\n#   while the backup is in progress.\n#\n# - In progress Git GC operations are given a cooldown window to complete. The\n#   script will sleep for up to 60 seconds waiting for GC operations to finish.\n#\n# - Git repository data is transferred in a specific order: auxiliary files,\n#   packed refs, loose refs, reflogs, and finally objects and pack files in that\n#   order. This ensures that all referenced objects are captured.\n#\n# - Git GC operations are re-enabled on the GitHub instance.\n#\n# The script uses multiple runs of rsync to transfer repository files. Each run\n# includes a list of filter rules that ensure only specific types of files are\n# transferred.\n#\n# See the \"FILTER RULES\" and \"INCLUDE/EXCLUDE PATTERN RULES\" sections of the\n# rsync(1) manual for more information:\n#      <http://rsync.samba.org/ftp/rsync/rsync.html>\n\n# Bring in the backup configuration\ncd $(dirname \"$0\")/../..\n. share/github-backup-utils/ghe-backup-config\n\n# Set up remote host and root backup snapshot directory based on config\nhost=\"$GHE_HOSTNAME\"\nbackup_dir=\"$GHE_SNAPSHOT_DIR/repositories\"\n\n# Location of last good backup for rsync --link-dest\nbackup_current=\"$GHE_DATA_DIR/current/repositories\"\n\n# Verify rsync is available.\nif ! rsync --version 1>/dev/null 2>&1; then\n    echo \"Error: rsync not found.\" 1>&2\n    exit 1\nfi\n\n# Perform a host-check and establish GHE_REMOTE_XXX variables.\nghe_remote_version_required \"$host\"\n\n# Remote sync-in-progress file location. When this file exists, Git GC\n# operations are disabled on the GitHub instance.\nsync_in_progress_file=\"$GHE_REMOTE_DATA_USER_DIR/repositories/.sync_in_progress\"\n\n# Make sure root backup dir exists if this is the first run\nmkdir -p \"$backup_dir\"\n\n# Removes the remote sync-in-progress file on exit, re-enabling GC operations\n# on the remote instance.\ncleanup() {\n  ghe-ssh \"$host\" -- \"sudo rm -f '$sync_in_progress_file'\"\n}\ntrap 'cleanup' EXIT\ntrap 'exit $?' INT # ^C always terminate\n\n# Touch the sync-in-progress file, disabling GC operations, and wait for all\n# active GC processes to finish on the remote side.\necho \"\n    set -e\n    sudo -u git touch '$sync_in_progress_file'\n\n    sanity=0\n    while [ \\$sanity -lt $GHE_GIT_COOLDOWN_PERIOD ]; do\n        # note: the bracket synta[x] below is to prevent matches against the\n        # grep process itself.\n        if ps axo args | grep -E -e '^git( -.*)? nw-repac[k]( |$)' -e '^git( -.*)? g[c]( |$)' >/dev/null; then\n            sleep 1\n            sanity=\\$(( sanity + 1 ))\n        else\n            exit 0\n        fi\n    done\n    exit 7\n\" | ghe-ssh \"$host\" -- /bin/sh || {\n    res=$?\n    if [ $res = 7 ]; then\n        echo \"Error: Git GC processes remain after $GHE_GIT_COOLDOWN_PERIOD seconds. Aborting...\" 1>&2\n    fi\n    exit $res\n}\n\n# Transfer repository data from a GitHub instance to the current snapshot\n# directory, using a previous snapshot to avoid transferring files that have\n# already been transferred. A set of rsync filter rules are provided on stdin\n# for each invocation.\nrsync_repository_data () {\n    ghe-rsync -av \\\n        -e \"ghe-ssh -p $(ssh_port_part \"$host\")\" \\\n        $link_dest \"$@\" \\\n        --rsync-path='sudo -u git rsync' \\\n        --include-from=- --exclude=\\* \\\n        \"$(ssh_host_part \"$host\"):$GHE_REMOTE_DATA_USER_DIR/repositories/\" \\\n        \"$backup_dir\" 1>&3\n}\n\n# If we have a previous increment, avoid transferring existing files via rsync's\n# --link-dest support. This also decreases physical space usage considerably.\nif [ -d \"$backup_current\" ]; then\n    link_dest=\"--link-dest=../../current/repositories\"\nfi\n\n# Sync all auxiliary repository data. This includes files and directories like\n# HEAD, audit_log, config, description, info/, etc. No refs or object data\n# should be transferred here.\necho 1>&3\necho \"* Transferring auxiliary files ...\" 1>&3\nrsync_repository_data -z <<RULES\n- /__*__/\n+ /*/\n+ /*/*.git\n- /*/*.git/objects\n- /*/*.git/refs\n- /*/*.git/packed-refs\n- /*/*.git/logs\n+ /*/*.git/**\nRULES\n\n# Sync packed refs files. This is performed before sync'ing loose refs since\n# loose refs trump packed-refs information.\necho 1>&3\necho \"* Transferring packed-refs files ...\" 1>&3\nrsync_repository_data -z <<RULES\n- /__*__/\n+ /*/\n+ /*/*.git\n+ /*/*.git/packed-refs\nRULES\n\n# Sync loose refs and reflogs. This must be performed before object data is\n# transferred to ensure that all referenced objects are included.\necho 1>&3\necho \"* Transferring refs and reflogs ...\"  1>&3\nrsync_repository_data -z <<RULES\n- /__*__/\n+ /*/\n+ /*/*.git\n+ /*/*.git/refs\n+ /*/*.git/refs/**\n+ /*/*.git/logs\n+ /*/*.git/logs/**\nRULES\n\n# Sync git objects and pack files. Compressing is disabled during this phase\n# since these files are already well compressed.\necho 1>&3\necho \"* Transferring objects and packs ...\" 1>&3\nrsync_repository_data -H <<RULES\n- /__*__/\n+ /*/\n+ /*/*.git\n+ /*/*.git/objects\n- tmp_*\n+ /*/*.git/objects/**\nRULES\n\n# Sync __special__ data directories, including the __alambic_assets__,\n# __hookshot__, and __purgatory__ directories. The __nodeload_archives__,\n# __gitmon__, and __render__ directories are excludes since they act only as\n# caches.\n#\n# Under v2.x and greater, only the special __purgatory__ directory remains under\n# /data/repositories. All other special user data directories have been moved under\n# the /data/user directory.\necho 1>&3\necho \"* Transferring special data directories ...\" 1>&3\nrsync_repository_data <<RULES\n- /__nodeload_archives__/\n- /__gitmon__/\n- /__render__/\n+ /__*__/\n+ /__*__/**\nRULES\necho 1>&3\n","markers":{"markers":{"1":{"id":1,"range":[[78,104],[78,104]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":44,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[78,33],[78,33]]},"newParams":{"reversed":true,"range":[[78,32],[78,33]]},"deserializer":"MarkerPatch"},{"oldRange":[[78,32],[78,33]],"newRange":[[78,32],[78,32]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[78,32],[78,32]]},"newParams":{"range":[[78,31],[78,32]]},"deserializer":"MarkerPatch"},{"oldRange":[[78,31],[78,32]],"newRange":[[78,31],[78,31]],"oldText":"q","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[78,31],[78,31]]},"newParams":{"range":[[78,30],[78,31]]},"deserializer":"MarkerPatch"},{"oldRange":[[78,30],[78,31]],"newRange":[[78,30],[78,30]],"oldText":"-","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[78,93],[78,93]],"newRange":[[78,93],[78,94]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[78,94],[78,94]],"newRange":[[78,94],[78,95]],"oldText":"","newText":">","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[78,95],[78,95]],"newRange":[[78,95],[78,96]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[78,96],[78,96]],"newRange":[[78,96],[78,97]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[78,97],[78,97]],"newRange":[[78,97],[78,98]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[78,98],[78,98]],"newRange":[[78,98],[78,99]],"oldText":"","newText":"v","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[78,99],[78,99]],"newRange":[[78,99],[78,100]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[78,100],[78,100]],"newRange":[[78,100],[78,101]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[78,101],[78,101]],"newRange":[[78,101],[78,102]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[78,102],[78,102]],"newRange":[[78,102],[78,103]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[78,103],[78,103]],"newRange":[[78,103],[78,104]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/lildude/Downloads/backup-utils/share/github-backup-utils/ghe-backup-repositories-rsync","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"be87d31397415c73aadc0cfe2bbb6d91bd5ab295","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Downloads/backup-utils/bin/ghe-host-check","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":12,"softTabs":true,"displayBuffer":{"id":13,"softWrapped":false,"editorWidthInChars":null,"scrollTop":2236,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Downloads/backup-utils/bin/ghe-restore","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":36,"softTabs":true,"displayBuffer":{"id":37,"softWrapped":false,"editorWidthInChars":null,"scrollTop":175,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Downloads/backup-utils/share/github-backup-utils/ghe-restore-es-rsync","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":40,"softTabs":true,"displayBuffer":{"id":41,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Downloads/backup-utils/share/github-backup-utils/ghe-ssh","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":44,"softTabs":true,"displayBuffer":{"id":45,"softWrapped":false,"editorWidthInChars":null,"scrollTop":960,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Downloads/backup-utils/share/github-backup-utils/ghe-backup-repositories-rsync","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lildude/Downloads/backup-utils/share/github-backup-utils/ghe-restore-settings","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemUri":"/Users/lildude/Downloads/backup-utils/share/github-backup-utils/ghe-backup-repositories-rsync","focused":true,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-shellscript","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"metrics":{"sessionLength":2117680},"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["grep"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/lildude/Downloads/backup-utils/bin/ghe-host-check":1418408216191,"/Users/lildude/Downloads/backup-utils/bin/ghe-restore":1418408224374,"/Users/lildude/Downloads/backup-utils/share/github-backup-utils/ghe-restore-es-rsync":1418408371286,"/Users/lildude/Downloads/backup-utils/share/github-backup-utils/ghe-ssh":1418408385596,"/Users/lildude/Downloads/backup-utils/share/github-backup-utils/ghe-backup-repositories-rsync":1418408505477,"/Users/lildude/Downloads/backup-utils/share/github-backup-utils/ghe-restore-settings":1418407635302},"keybinding-resolver":{"attached":false},"tree-view":{"directoryExpansionStates":{"bin":{},"share":{"github-backup-utils":{}}},"selectedPath":"/Users/lildude/tmp/backup-utils/share/github-backup-utils/ghe-backup-repositories-rsync","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}