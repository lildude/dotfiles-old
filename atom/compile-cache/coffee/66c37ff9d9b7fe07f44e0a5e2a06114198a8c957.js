(function() {
  var HEADING_REGEX, JumpTo, REFERENCE_REGEX, TABLE_COL_REGEX, utils;

  utils = require("../utils");

  HEADING_REGEX = /^\#{1,6} +.+$/;

  REFERENCE_REGEX = /\[?([^\s\]]+)(?:\]|\]:)?/;

  TABLE_COL_REGEX = /([^\|]*?)\s*\|/;

  module.exports = JumpTo = (function() {
    function JumpTo(command) {
      this.command = command;
      this.editor = atom.workspace.getActiveTextEditor();
      this.cursor = this.editor.getCursorBufferPosition();
    }

    JumpTo.prototype.trigger = function(e) {
      var fn, range;
      fn = this.command.replace(/-[a-z]/ig, function(s) {
        return s[1].toUpperCase();
      });
      range = this[fn]();
      if (range) {
        return this.editor.setCursorBufferPosition(range);
      } else {
        return e.abortKeyBinding();
      }
    };

    JumpTo.prototype.previousHeading = function() {
      var found, range;
      range = [[0, 0], [this.cursor.row - 1, 0]];
      found = false;
      this.editor.buffer.backwardsScanInRange(HEADING_REGEX, range, function(match) {
        found = match.range.start;
        return match.stop();
      });
      return found;
    };

    JumpTo.prototype.nextHeading = function() {
      var eof, range;
      eof = this.editor.getEofBufferPosition();
      range = this._findNextHeading([[this.cursor.row + 1, 0], [eof.row + 1, 0]]) || this._findNextHeading([[0, 0], [eof.row + 1, 0]]);
      return range;
    };

    JumpTo.prototype._findNextHeading = function(range) {
      var found;
      found = false;
      this.editor.buffer.scanInRange(HEADING_REGEX, range, function(match) {
        found = match.range.start;
        return match.stop();
      });
      return found;
    };

    JumpTo.prototype.referenceDefinition = function() {
      var found, key;
      key = this.editor.getSelectedText() || this.editor.getWordUnderCursor();
      if (!key) {
        return false;
      }
      key = utils.regexpEscape(REFERENCE_REGEX.exec(key)[1]);
      found = false;
      this.editor.buffer.scan(RegExp("\\[" + key + "\\]", "g"), (function(_this) {
        return function(match) {
          var end;
          end = match.range.end;
          if (end.row !== _this.cursor.row) {
            found = [end.row, end.column - 1];
            return match.stop();
          }
        };
      })(this));
      return found;
    };

    JumpTo.prototype.nextTableCell = function() {
      var line;
      line = this.editor.lineTextForBufferRow(this.cursor.row);
      if (utils.isTableRow(line) || utils.isTableSeparator(line)) {
        return this._findNextTableCell(line, this.cursor.row, this.cursor.column);
      } else {
        return false;
      }
    };

    JumpTo.prototype._findNextTableCell = function(currentLine, row, column) {
      var td;
      column = currentLine.indexOf("|", column);
      if (column === -1 || column === currentLine.length - 1) {
        row += 1;
        column = 0;
        currentLine = this.editor.lineTextForBufferRow(row);
      }
      if (utils.isTableSeparator(currentLine)) {
        row += 1;
        column = 0;
        currentLine = this.editor.lineTextForBufferRow(row);
      }
      if (currentLine === void 0) {
        return false;
      }
      if (currentLine[column] === "|") {
        column += 1;
        currentLine = currentLine.slice(column);
      }
      if (td = TABLE_COL_REGEX.exec(currentLine)) {
        return [row, column + td[1].length];
      } else {
        return [row, column + currentLine.length];
      }
    };

    return JumpTo;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2xpbGR1ZGUvLmF0b20vcGFja2FnZXMvbWFya2Rvd24td3JpdGVyL2xpYi9jb21tYW5kcy9qdW1wLXRvLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSw4REFBQTs7QUFBQSxFQUFBLEtBQUEsR0FBUSxPQUFBLENBQVEsVUFBUixDQUFSLENBQUE7O0FBQUEsRUFFQSxhQUFBLEdBQWtCLGVBRmxCLENBQUE7O0FBQUEsRUFHQSxlQUFBLEdBQWtCLDBCQUhsQixDQUFBOztBQUFBLEVBSUEsZUFBQSxHQUFrQixnQkFKbEIsQ0FBQTs7QUFBQSxFQU1BLE1BQU0sQ0FBQyxPQUFQLEdBQ007QUFDUyxJQUFBLGdCQUFDLE9BQUQsR0FBQTtBQUNYLE1BQUEsSUFBQyxDQUFBLE9BQUQsR0FBVyxPQUFYLENBQUE7QUFBQSxNQUNBLElBQUMsQ0FBQSxNQUFELEdBQVUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBZixDQUFBLENBRFYsQ0FBQTtBQUFBLE1BRUEsSUFBQyxDQUFBLE1BQUQsR0FBVSxJQUFDLENBQUEsTUFBTSxDQUFDLHVCQUFSLENBQUEsQ0FGVixDQURXO0lBQUEsQ0FBYjs7QUFBQSxxQkFLQSxPQUFBLEdBQVMsU0FBQyxDQUFELEdBQUE7QUFDUCxVQUFBLFNBQUE7QUFBQSxNQUFBLEVBQUEsR0FBSyxJQUFDLENBQUEsT0FBTyxDQUFDLE9BQVQsQ0FBaUIsVUFBakIsRUFBNkIsU0FBQyxDQUFELEdBQUE7ZUFBTyxDQUFFLENBQUEsQ0FBQSxDQUFFLENBQUMsV0FBTCxDQUFBLEVBQVA7TUFBQSxDQUE3QixDQUFMLENBQUE7QUFBQSxNQUNBLEtBQUEsR0FBUSxJQUFFLENBQUEsRUFBQSxDQUFGLENBQUEsQ0FEUixDQUFBO0FBR0EsTUFBQSxJQUFHLEtBQUg7ZUFDRSxJQUFDLENBQUEsTUFBTSxDQUFDLHVCQUFS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

//# sourceURL=/Users/lildude/.atom/packages/markdown-writer/lib/commands/jump-to.coffee
