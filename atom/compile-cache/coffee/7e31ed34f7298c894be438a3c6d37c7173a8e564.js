(function() {
  describe('editor-linter', function() {
    var EditorLinter, editorLinter, getMessage, textEditor;
    getMessage = require('./common').getMessage;
    EditorLinter = require('../lib/editor-linter');
    editorLinter = null;
    textEditor = null;
    beforeEach(function() {
      return waitsForPromise(function() {
        atom.workspace.destroyActivePaneItem();
        return atom.workspace.open(__dirname + '/fixtures/file.txt').then(function() {
          if (editorLinter != null) {
            editorLinter.dispose();
          }
          textEditor = atom.workspace.getActiveTextEditor();
          return editorLinter = new EditorLinter(textEditor);
        });
      });
    });
    describe('::constructor', function() {
      return it("cries when provided argument isn't a TextEditor", function() {
        expect(function() {
          return new EditorLinter;
        }).toThrow();
        expect(function() {
          return new EditorLinter(null);
        }).toThrow();
        return expect(function() {
          return new EditorLinter(55);
        }).toThrow();
      });
    });
    describe('::{add, remove}Message', function() {
      return it('adds/removes decorations from the editor', function() {
        var countDecorations, message;
        countDecorations = textEditor.getDecorations().length;
        editorLinter.underlineIssues = true;
        message = getMessage('Hey!', __dirname + '/fixtures/file.txt', [[0, 1], [0, 2]]);
        editorLinter.addMessage(message);
        expect(textEditor.getDecorations().length).toBe(countDecorations + 1);
        editorLinter.deleteMessage(message);
        return expect(textEditor.getDecorations().length).toBe(countDecorations);
      });
    });
    describe('::getMessages', function() {
      return it('returns a set of messages', function() {
        var message, messageSet;
        message = getMessage('Hey!', __dirname + '/fixtures/file.txt', [[0, 1], [0, 2]]);
        messageSet = editorLinter.getMessages();
        editorLinter.addMessage(message);
        expect(messageSet.has(message)).toBe(true);
        editorLinter.deleteMessage(message);
        return expect(messageSet.has(message)).toBe(false);
      });
    });
    describe('::onDidMessage{Add, Change, Delete}', function() {
      return it('notifies us of the changes to messages', function() {
        var message, messageAdd, messageChange, messageRemove;
        message = getMessage('Hey!', __dirname + '/fixtures/file.txt', [[0, 1], [0, 2]]);
        messageAdd = jasmine.createSpy('messageAdd');
        messageChange = jasmine.createSpy('messageChange');
        messageRemove = jasmine.createSpy('messageRemove');
        editorLinter.onDidMessageAdd(messageAdd);
        editorLinter.onDidMessageChange(messageChange);
        editorLinter.onDidMessageDelete(messageRemove);
        editorLinter.addMessage(message);
        expect(messageAdd).toHaveBeenCalled();
        expect(messageAdd).toHaveBeenCalledWith(message);
        expect(messageChange).toHaveBeenCalled();
        expect(messageChange.mostRecentCall.args[0].type).toBe('add');
        expect(messageChange.mostRecentCall.args[0].message).toBe(message);
        editorLinter.deleteMessage(message);
        expect(messageRemove).toHaveBeenCalled();
        expect(messageRemove).toHaveBeenCalledWith(message);
        expect(messageChange.mostRecentCall.args[0].type).toBe('delete');
        return expect(messageChange.mostRecentCall.args[0].message).toBe(message);
      });
    });
    describe('::{handle, add, remove}Gutter', function() {
      return it('handles the attachment and detachment of gutter to text editor', function() {
        editorLinter.gutterEnabled = false;
        expect(editorLinter.gutter === null).toBe(true);
        editorLinter.gutterEnabled = true;
        editorLinter.handleGutter();
        expect(editorLinter.gutter === null).toBe(false);
        editorLinter.gutterEnabled = false;
        editorLinter.handleGutter();
        expect(editorLinter.gutter === null).toBe(true);
        editorLinter.addGutter();
        expect(editorLinter.gutter === null).toBe(false);
        editorLinter.removeGutter();
        expect(editorLinter.gutter === null).toBe(true);
        editorLinter.removeGutter();
        return expect(editorLinter.gutter === null).toBe(true);
      });
    });
    describe('::onShouldLint', function() {
      return it('ignores instant save requests', function() {
        var timesTriggered;
        timesTriggered = 0;
        editorLinter.onShouldLint(function() {
          return timesTriggered++;
        });
        textEditor.save();
        textEditor.save();
        textEditor.save();
        textEditor.save();
        textEditor.save();
        return expect(timesTriggered).toBe(5);
      });
    });
    return describe('::onDidDestroy', function() {
      return it('is called when TextEditor is destroyed', function() {
        var didDestroy;
        didDestroy = false;
        editorLinter.onDidDestroy(function() {
          return didDestroy = true;
        });
        textEditor.destroy();
        return expect(didDestroy).toBe(true);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2xpbGR1ZGUvLmF0b20vcGFja2FnZXMvbGludGVyL3NwZWMvZWRpdG9yLWxpbnRlci1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsRUFBQSxRQUFBLENBQVMsZUFBVCxFQUEwQixTQUFBLEdBQUE7QUFDeEIsUUFBQSxrREFBQTtBQUFBLElBQUMsYUFBYyxPQUFBLENBQVEsVUFBUixFQUFkLFVBQUQsQ0FBQTtBQUFBLElBQ0EsWUFBQSxHQUFlLE9BQUEsQ0FBUSxzQkFBUixDQURmLENBQUE7QUFBQSxJQUVBLFlBQUEsR0FBZSxJQUZmLENBQUE7QUFBQSxJQUdBLFVBQUEsR0FBYSxJQUhiLENBQUE7QUFBQSxJQUtBLFVBQUEsQ0FBVyxTQUFBLEdBQUE7YUFDVCxlQUFBLENBQWdCLFNBQUEsR0FBQTtBQUNkLFFBQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxxQkFBZixDQUFBLENBQUEsQ0FBQTtlQUNBLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBZixDQUFvQixTQUFBLEdBQVksb0JBQWhDLENBQXFELENBQUMsSUFBdEQsQ0FBMkQsU0FBQSxHQUFBOztZQUN6RCxZQUFZLENBQUUsT0FBZCxDQUFBO1dBQUE7QUFBQSxVQUNBLFVBQUEsR0FBYSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFmLENBQUEsQ0FEYixDQUFBO2lCQUVBLFlBQUEsR0FBbUIsSUFBQSxZQUFBLENBQWEsVUFBYixFQUhzQztRQUFBLENBQTNELEVBRmM7TUFBQSxDQUFoQixFQURTO0lBQUEsQ0FBWCxDQUxBLENBQUE7QUFBQSxJQWFBLFFBQUEsQ0FBUyxlQUFULEVBQTBCLFNBQUEsR0FBQTthQUN4QixFQUFBLENBQUcsaURBQUgsRUFBc0QsU0FBQSxHQUFBO0FBQ3BELFFBQUEsTUFBQSxDQUFPLFNBQUEsR0FBQTtpQkFDTCxHQUFBLENBQUEsYUFE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

//# sourceURL=/Users/lildude/.atom/packages/linter/spec/editor-linter-spec.coffee
