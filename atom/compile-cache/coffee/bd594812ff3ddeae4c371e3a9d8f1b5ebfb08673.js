(function() {
  var StyleLine;

  StyleLine = require("../../lib/commands/style-line");

  describe("StyleLine", function() {
    describe(".isStyleOn", function() {
      it("check heading 1 exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("h1");
        fixture = "# heading 1";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      it("check heading 1 not exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("h1");
        fixture = "## heading 1";
        return expect(cmd.isStyleOn(fixture)).toBe(false);
      });
      it("check ul exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("ul");
        fixture = "* unordered list";
        expect(cmd.isStyleOn(fixture)).toBe(true);
        fixture = "- unordered list";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      return it("check ul not exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("ul");
        fixture = "a normal list";
        expect(cmd.isStyleOn(fixture)).toBe(false);
        fixture = "0. ordered list";
        return expect(cmd.isStyleOn(fixture)).toBe(false);
      });
    });
    describe(".addStyle", function() {
      it("applies heading 1 styles", function() {
        var cmd, fixture;
        atom.config.set("markdown-writer.lineStyles.h1", {
          before: "# ",
          after: " #"
        });
        cmd = new StyleLine("h1");
        fixture = "## heading 1 ##";
        return expect(cmd.addStyle(fixture)).toBe("# heading 1 #");
      });
      it("applies heading 2 styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("h2");
        fixture = "# heading 2";
        return expect(cmd.addStyle(fixture)).toBe("## heading 2");
      });
      return it("applies blockquote styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("blockquote");
        fixture = "blockquote";
        return expect(cmd.addStyle(fixture)).toBe("> blockquote");
      });
    });
    describe(".removeStyle", function() {
      it("applies heading 1 styles", function() {
        var cmd, fixture;
        atom.config.set("markdown-writer.lineStyles.h1", {
          before: "# ",
          after: " #"
        });
        cmd = new StyleLine("h1");
        fixture = "# heading 1 #";
        return expect(cmd.removeStyle(fixture)).toBe("heading 1");
      });
      it("remove heading 3 styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("h3");
        fixture = "### heading 3";
        return expect(cmd.removeStyle(fixture)).toBe("heading 3");
      });
      return it("remove ol styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("ol");
        fixture = "123. ordered list";
        return expect(cmd.removeStyle(fixture)).toBe("ordered list");
      });
    });
    return describe(".trigger", function() {
      var editor;
      editor = null;
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open("empty.markdown");
        });
        return runs(function() {
          return editor = atom.workspace.getActiveTextEditor();
        });
      });
      it("insert empty blockquote style", function() {
        new StyleLine("blockquote").trigger();
        expect(editor.getText()).toBe("> ");
        return expect(editor.getCursorBufferPosition().column).toBe(2);
      });
      it("apply heading 2", function() {
        editor.setText("# heading");
        new StyleLine("h2").trigger();
        expect(editor.getText()).toBe("## heading");
        return expect(editor.getCursorBufferPosition().column).toBe(10);
      });
      it("remove heading 3", function() {
        editor.setText("### heading");
        new StyleLine("h3").trigger();
        expect(editor.getText()).toBe("heading");
        return expect(editor.getCursorBufferPosition().column).toBe(7);
      });
      it("apply ordered/unordered list", function() {
        editor.setText("- list");
        new StyleLine("ol").trigger();
        expect(editor.getText()).toBe("1. list");
        expect(editor.getCursorBufferPosition().column).toBe(7);
        new StyleLine("ul").trigger();
        expect(editor.getText()).toBe("- list");
        return expect(editor.getCursorBufferPosition().column).toBe(6);
      });
      return it("apply task/taskdone list", function() {
        editor.setText("task");
        new StyleLine("task").trigger();
        expect(editor.getText()).toBe("- [ ] task");
        new StyleLine("taskdone").trigger();
        expect(editor.getText()).toBe("- [X] task");
        new StyleLine("task").trigger();
        expect(editor.getText()).toBe("- [ ] task");
        new StyleLine("task").trigger();
        return expect(editor.getText()).toBe("task");
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2xpbGR1ZGUvLmF0b20vcGFja2FnZXMvbWFya2Rvd24td3JpdGVyL3NwZWMvY29tbWFuZHMvc3R5bGUtbGluZS1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSxTQUFBOztBQUFBLEVBQUEsU0FBQSxHQUFZLE9BQUEsQ0FBUSwrQkFBUixDQUFaLENBQUE7O0FBQUEsRUFFQSxRQUFBLENBQVMsV0FBVCxFQUFzQixTQUFBLEdBQUE7QUFDcEIsSUFBQSxRQUFBLENBQVMsWUFBVCxFQUF1QixTQUFBLEdBQUE7QUFDckIsTUFBQSxFQUFBLENBQUcsd0JBQUgsRUFBNkIsU0FBQSxHQUFBO0FBQzNCLFlBQUEsWUFBQTtBQUFBLFFBQUEsR0FBQSxHQUFVLElBQUEsU0FBQSxDQUFVLElBQVYsQ0FBVixDQUFBO0FBQUEsUUFDQSxPQUFBLEdBQVUsYUFEVixDQUFBO2VBRUEsTUFBQSxDQUFPLEdBQUcsQ0FBQyxTQUFKLENBQWMsT0FBZCxDQUFQLENBQThCLENBQUMsSUFBL0IsQ0FBb0MsSUFBcEMsRUFIMkI7TUFBQSxDQUE3QixDQUFBLENBQUE7QUFBQSxNQUtBLEVBQUEsQ0FBRyw0QkFBSCxFQUFpQyxTQUFBLEdBQUE7QUFDL0IsWUFBQSxZQUFBO0FBQUEsUUFBQSxHQUFBLEdBQVUsSUFBQSxTQUFBLENBQVUsSUFBVixDQUFWLENBQUE7QUFBQSxRQUNBLE9BQUEsR0FBVSxjQURWLENBQUE7ZUFFQSxNQUFBLENBQU8sR0FBRyxDQUFDLFNBQUosQ0FBYyxPQUFkLENBQVAsQ0FBOEIsQ0FBQyxJQUEvQixDQUFvQyxLQUFwQyxFQUgrQjtNQUFBLENBQWpDLENBTEEsQ0FBQTtBQUFBLE1BVUEsRUFBQSxDQUFHLGlCQUFILEVBQXNCLFNBQUEsR0FBQTtBQUNwQixZQUFBLFlBQUE7QUFBQSxRQUFBLEdBQUEsR0FBVSxJ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

//# sourceURL=/Users/lildude/.atom/packages/markdown-writer/spec/commands/style-line-spec.coffee
