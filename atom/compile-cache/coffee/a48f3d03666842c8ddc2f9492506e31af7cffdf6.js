(function() {
  var DATE_REGEX, FRONT_MATTER_REGEX, IMG_RAW_ATTRIBUTE, IMG_RAW_REGEX, IMG_REGEX, INLINE_LINK_REGEX, REFERENCE_LINK_REGEX, SLUG_REGEX, TABLE_LINE_SEPARATOR_REGEX, URL_REGEX, dasherize, dirTemplate, getDate, getDateStr, getFrontMatter, getFrontMatterText, getJSON, getTimeStr, getTitleSlug, hasFrontMatter, isImage, isInlineLink, isRawImage, isReferenceDefinition, isReferenceLink, isTableSeparator, isUrl, os, parseDateStr, parseImage, parseInlineLink, parseRawImage, parseReferenceLink, path, reference_def_regex, regexpEscape, request, template, yaml;

  os = require("os");

  path = require("path");

  yaml = require("js-yaml");

  request = require("request");

  getJSON = function(uri, succeed, error) {
    var data;
    data = {
      uri: uri,
      json: true,
      encoding: 'utf-8',
      gzip: true
    };
    return request(data, function(err, res, body) {
      if (!err && res.statusCode === 200) {
        return succeed(body);
      } else {
        return error(err);
      }
    });
  };

  getDateStr = function(date) {
    date = getDate(date);
    return "" + date.year + "-" + date.month + "-" + date.day;
  };

  DATE_REGEX = /^(\d{4})[-\/](\d{1,2})[-\/](\d{1,2})$/g;

  parseDateStr = function(str) {
    var date, matches;
    date = new Date();
    matches = DATE_REGEX.exec(str);
    if (matches) {
      date.setYear(parseInt(matches[1], 10));
      date.setMonth(parseInt(matches[2], 10) - 1);
      date.setDate(parseInt(matches[3], 10));
    }
    return getDate(date);
  };

  getTimeStr = function(date) {
    date = getDate(date);
    return "" + date.hour + ":" + date.minute;
  };

  getDate = function(date) {
    if (date == null) {
      date = new Date();
    }
    return {
      year: "" + date.getFullYear(),
      i_month: "" + (date.getMonth() + 1),
      month: ("0" + (date.getMonth() + 1)).slice(-2),
      i_day: "" + date.getDate(),
      day: ("0" + date.getDate()).slice(-2),
      hour: ("0" + date.getHours()).slice(-2),
      minute: ("0" + date.getMinutes()).slice(-2),
      seconds: ("0" + date.getSeconds()).slice(-2)
    };
  };

  FRONT_MATTER_REGEX = /^(?:---\s*)?([^:]+:[\s\S]*?)\s*---\s*$/m;

  hasFrontMatter = function(content) {
    return FRONT_MATTER_REGEX.test(content);
  };

  getFrontMatter = function(content) {
    var matches, yamlText;
    matches = content.match(FRONT_MATTER_REGEX);
    if (!matches) {
      return {};
    }
    yamlText = matches[1].trim();
    return yaml.safeLoad(yamlText) || {};
  };

  getFrontMatterText = function(obj, noLeadingFence) {
    var yamlText;
    yamlText = yaml.safeDump(obj);
    if (noLeadingFence) {
      return ["" + yamlText + "---", ""].join(os.EOL);
    } else {
      return ["---", "" + yamlText + "---", ""].join(os.EOL);
    }
  };

  IMG_RAW_REGEX = /<img(.*?)\/?>/i;

  IMG_RAW_ATTRIBUTE = /([a-z]+?)=('|")(.*?)\2/ig;

  IMG_REGEX = /!\[(.+?)\]\(([^\)\s]+)\s?[\"\']?([^)]*?)[\"\']?\)/;

  INLINE_LINK_REGEX = /\[(.+?)\]\(([^\)\s]+)\s?[\"\']?([^)]*?)[\"\']?\)/;

  REFERENCE_LINK_REGEX = /\[(.+?)\]\s?\[(.*)\]/;

  reference_def_regex = function(id, opts) {
    if (opts == null) {
      opts = {};
    }
    if (!opts.noEscape) {
      id = regexpEscape(id);
    }
    return RegExp("^ *\\[" + id + "\\]: +([^\\s]*?)(?: +\"?(.+?)\"?)?$", "m");
  };

  isRawImage = function(input) {
    return IMG_RAW_REGEX.test(input);
  };

  parseRawImage = function(input) {
    var attributes, img, pattern;
    img = {};
    attributes = IMG_RAW_REGEX.exec(input)[1].match(IMG_RAW_ATTRIBUTE);
    pattern = RegExp("" + IMG_RAW_ATTRIBUTE.source, "i");
    attributes.forEach(function(attr) {
      var elem;
      elem = pattern.exec(attr);
      if (elem) {
        return img[elem[1]] = elem[3];
      }
    });
    return img;
  };

  isImage = function(input) {
    return IMG_REGEX.test(input);
  };

  parseImage = function(input) {
    var image;
    image = IMG_REGEX.exec(input);
    return {
      alt: image[1],
      src: image[2],
      title: image[3]
    };
  };

  isInlineLink = function(input) {
    return INLINE_LINK_REGEX.test(input) && !isImage(input);
  };

  parseInlineLink = function(input) {
    var link;
    link = INLINE_LINK_REGEX.exec(input);
    return {
      text: link[1],
      url: link[2],
      title: link[3]
    };
  };

  isReferenceLink = function(input) {
    return REFERENCE_LINK_REGEX.test(input);
  };

  isReferenceDefinition = function(input) {
    return reference_def_regex(".+?", {
      noEscape: true
    }).test(input);
  };

  parseReferenceLink = function(input, content) {
    var id, link, refn;
    refn = REFERENCE_LINK_REGEX.exec(input);
    id = refn[2] || refn[1];
    link = reference_def_regex(id).exec(content);
    return {
      id: id,
      text: refn[1],
      url: link[1],
      title: link[2] || ""
    };
  };

  URL_REGEX = /^(https?|ftp):\/\/[^\s\/$.?#].[^\s]*$/i;

  isUrl = function(url) {
    return URL_REGEX.test(url);
  };

  TABLE_LINE_SEPARATOR_REGEX = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)\|?$/;

  isTableSeparator = function(line) {
    return TABLE_LINE_SEPARATOR_REGEX.test(line);
  };

  regexpEscape = function(str) {
    return str && str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  };

  dasherize = function(str) {
    return str.trim().toLowerCase().replace(/[^-\w\s]|_/g, "").replace(/\s+/g, "-");
  };

  SLUG_REGEX = /^(\d{1,4}-\d{1,2}-\d{1,4}-)(.+)$/;

  getTitleSlug = function(str) {
    var matches;
    str = path.basename(str, path.extname(str));
    if (matches = SLUG_REGEX.exec(str)) {
      return matches[2];
    } else {
      return str;
    }
  };

  dirTemplate = function(directory, date) {
    return template(directory, getDate(date));
  };

  template = function(text, data, matcher) {
    if (matcher == null) {
      matcher = /[<{]([\w-]+?)[>}]/g;
    }
    return text.replace(matcher, function(match, attr) {
      if (data[attr] != null) {
        return data[attr];
      } else {
        return match;
      }
    });
  };

  module.exports = {
    getJSON: getJSON,
    getDate: getDate,
    parseDateStr: parseDateStr,
    getDateStr: getDateStr,
    getTimeStr: getTimeStr,
    hasFrontMatter: hasFrontMatter,
    getFrontMatter: getFrontMatter,
    getFrontMatterText: getFrontMatterText,
    frontMatterRegex: FRONT_MATTER_REGEX,
    isRawImage: isRawImage,
    parseRawImage: parseRawImage,
    isImage: isImage,
    parseImage: parseImage,
    isInlineLink: isInlineLink,
    parseInlineLink: parseInlineLink,
    isReferenceLink: isReferenceLink,
    isReferenceDefinition: isReferenceDefinition,
    parseReferenceLink: parseReferenceLink,
    isUrl: isUrl,
    isTableSeparator: isTableSeparator,
    regexpEscape: regexpEscape,
    dasherize: dasherize,
    getTitleSlug: getTitleSlug,
    dirTemplate: dirTemplate,
    template: template
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/lildude/.atom/packages/markdown-writer/lib/utils.coffee