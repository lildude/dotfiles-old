(function() {
  var insertAfterCurrentParagraph, insertAtEndOfArticle, removeDefinitionRange, utils, _findFirstEmptyRow, _findFirstNonEmptyRowBackwards, _isReferenceDefinition;

  utils = require("../utils");

  insertAtEndOfArticle = function(editor, text) {
    var point, position, row;
    position = editor.getCursorBufferPosition();
    row = _findFirstNonEmptyRowBackwards(editor, editor.getLastBufferRow());
    point = [row, editor.lineTextForBufferRow(row).length];
    if (_isReferenceDefinition(editor, row)) {
      editor.setTextInBufferRange([point, point], "\n" + text);
    } else {
      editor.setTextInBufferRange([point, point], "\n\n" + text);
    }
    return editor.setCursorBufferPosition(position);
  };

  _findFirstNonEmptyRowBackwards = function(editor, row) {
    while (row >= 0 && editor.lineTextForBufferRow(row).length === 0) {
      row--;
    }
    return row;
  };

  insertAfterCurrentParagraph = function(editor, text) {
    var point, position, row;
    position = editor.getCursorBufferPosition();
    row = _findFirstEmptyRow(editor, position.row + 1);
    point = [row, editor.lineTextForBufferRow(row).length];
    if (_isReferenceDefinition(editor, row)) {
      editor.setTextInBufferRange([point, point], "\n" + text);
    } else if (point[1] > 0) {
      editor.setTextInBufferRange([point, point], "\n\n" + text);
    } else {
      editor.setTextInBufferRange([point, point], "\n" + text + "\n");
    }
    return editor.setCursorBufferPosition(position);
  };

  _findFirstEmptyRow = function(editor, row) {
    var lastRow;
    lastRow = editor.getLastBufferRow();
    while (row <= lastRow && editor.lineTextForBufferRow(row).length !== 0) {
      row++;
    }
    if (row > lastRow) {
      return lastRow;
    }
    while (row < lastRow && _isReferenceDefinition(editor, row + 1)) {
      row++;
    }
    return row;
  };

  _isReferenceDefinition = function(editor, row) {
    var line;
    line = editor.lineTextForBufferRow(row);
    return utils.isReferenceDefinition(line);
  };

  removeDefinitionRange = function(editor, range) {
    var emptyLineAbove, emptyLineBelow, lineNum, _ref, _ref1;
    lineNum = range.start.row;
    emptyLineAbove = !!((_ref = editor.lineTextForBufferRow(lineNum - 1)) != null ? _ref.trim() : void 0);
    emptyLineBelow = !!((_ref1 = editor.lineTextForBufferRow(lineNum + 1)) != null ? _ref1.trim() : void 0);
    editor.setSelectedBufferRange(range);
    editor.deleteLine();
    if (emptyLineAbove && emptyLineBelow) {
      return editor.deleteLine();
    }
  };

  module.exports = {
    insertAtEndOfArticle: insertAtEndOfArticle,
    insertAfterCurrentParagraph: insertAfterCurrentParagraph,
    removeDefinitionRange: removeDefinitionRange
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2xpbGR1ZGUvLmF0b20vcGFja2FnZXMvbWFya2Rvd24td3JpdGVyL2xpYi9oZWxwZXJzL2luc2VydC1saW5rLWhlbHBlci5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsMkpBQUE7O0FBQUEsRUFBQSxLQUFBLEdBQVEsT0FBQSxDQUFRLFVBQVIsQ0FBUixDQUFBOztBQUFBLEVBT0Esb0JBQUEsR0FBdUIsU0FBQyxNQUFELEVBQVMsSUFBVCxHQUFBO0FBQ3JCLFFBQUEsb0JBQUE7QUFBQSxJQUFBLFFBQUEsR0FBVyxNQUFNLENBQUMsdUJBQVAsQ0FBQSxDQUFYLENBQUE7QUFBQSxJQUVBLEdBQUEsR0FBTSw4QkFBQSxDQUErQixNQUEvQixFQUF1QyxNQUFNLENBQUMsZ0JBQVAsQ0FBQSxDQUF2QyxDQUZOLENBQUE7QUFBQSxJQUdBLEtBQUEsR0FBUSxDQUFDLEdBQUQsRUFBTSxNQUFNLENBQUMsb0JBQVAsQ0FBNEIsR0FBNUIsQ0FBZ0MsQ0FBQyxNQUF2QyxDQUhSLENBQUE7QUFJQSxJQUFBLElBQUcsc0JBQUEsQ0FBdUIsTUFBdkIsRUFBK0IsR0FBL0IsQ0FBSDtBQUNFLE1BQUEsTUFBTSxDQUFDLG9CQUFQLENBQTRCLENBQUMsS0FBRCxFQUFRLEtBQVIsQ0FBNUIsRUFBNkMsSUFBQSxHQUFJLElBQWpELENBQUEsQ0FERjtLQUFBLE1BQUE7QUFHRSxNQUFBLE1BQU0sQ0FBQyxvQkFBUCxDQUE0QixDQUFDLEtBQUQsRUFBUSxLQUFSLENBQTVCLEVBQTZDLE1BQUEsR0FBTSxJQUFuRCxDQUFBLENBSEY7S0FKQTtXQVNBLE1BQU0sQ0FBQyx1QkFBUCxDQUErQixRQUEvQixFQVZxQjtFQUFBLENBUHZCLENBQUE7O0FBQUEsRUFtQkEsOEJBQUEsR0FBaUMsU0FBQyxNQUFELEVBQVMsR0FBVCxHQUFBO0FBQ3pC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

//# sourceURL=/Users/lildude/.atom/packages/markdown-writer/lib/helpers/insert-link-helper.coffee
